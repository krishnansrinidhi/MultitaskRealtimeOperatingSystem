
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
08006b6c l    d  .rodata	00000000 .rodata
08017244 l    d  .init_array	00000000 .init_array
0801724c l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000a3c l    d  .bss	00000000 .bss
20001c84 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
08017c8c l    d  .parsetable	00000000 .parsetable
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
08004e20 l       .text	00000000 LoopCopyDataInit
08004e18 l       .text	00000000 CopyDataInit
08004e34 l       .text	00000000 LoopFillZerobss
08004e2e l       .text	00000000 FillZerobss
08004e46 l       .text	00000000 LoopForever
08004e60 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08006b54 l     O .text	00000000 __EH_FRAME_BEGIN__
08000188 l     F .text	00000000 __do_global_dtors_aux
20000a3c l       .bss	00000000 completed.8122
0801724c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001ac l     F .text	00000000 frame_dummy
20000a40 l       .bss	00000000 object.8127
08017248 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mycode.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
20000004 l     O .data	00000004 buf.5804
20000008 l     O .data	00000004 printPrompt.5805
08006e75 l     O .rodata	00000006 __FUNCTION__.5819
20000a58 l     O .bss	00000004 count.5802
20000a5c l     O .bss	00000004 saved.5803
00000000 l    df *ABS*	00000000 dump.c
20000010 l     O .data	00000004 count.5233
20000a60 l     O .bss	00000004 address.5232
00000000 l    df *ABS*	00000000 syscall.c
20000a64 l     O .bss	00000004 heap_end.5843
00000000 l    df *ABS*	00000000 terminal.c
080008fc l     F .text	00000080 USBD_CDC_DataIn
20000a68 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
00000000 l    df *ABS*	00000000 printf_stdarg.c
08001014 l     F .text	00000028 printchar
0800103c l     F .text	00000086 prints
080010c2 l     F .text	000000a6 printi
08001168 l     F .text	00000120 print
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20000b8c l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
08002e48 l     F .text	0000002a I2C_TransferConfig
08002e74 l     F .text	00000090 I2C_IsAcknowledgeFailed
08002f04 l     F .text	00000068 I2C_WaitOnFlagUntilTimeout
08002f6c l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
08002fc0 l     F .text	00000064 I2C_RequestMemoryWrite
08003024 l     F .text	00000062 I2C_RequestMemoryRead
08003086 l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
0800339a l     F .text	0000008c SPI_WaitFlagStateUntilTimeout
08003426 l     F .text	0000009c SPI_WaitFifoStateUntilTimeout
080034c2 l     F .text	00000042 SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
20000b90 l     O .bss	00000001 cfgidx.10117
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
08003e80 l     F .text	00000012 USBD_CDC_DataIn
08003e92 l     F .text	00000028 USBD_CDC_EP0_RxReady
08003ebc l     F .text	0000000c USBD_CDC_GetFSCfgDesc
08003ec8 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
08003ed4 l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
08003eec l     F .text	0000002e USBD_CDC_DataOut
08003f1a l     F .text	0000005a USBD_CDC_Setup
08003f74 l     F .text	0000003a USBD_CDC_DeInit
08003fae l     F .text	00000086 USBD_CDC_Init
20000094 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20000b94 l     O .bss	00000230 mem.10338
00000000 l    df *ABS*	00000000 usbd_desc.c
080042f0 l     F .text	00000028 IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
080043c8 l     F .text	00000004 CDC_Itf_DeInit
080043cc l     F .text	00000020 CDC_Itf_Receive
080043ec l     F .text	00000018 CDC_Itf_Init
08004404 l     F .text	00000058 CDC_Itf_Control
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
0800445c l     F .text	00000080 SPIx_Init
080044dc l     F .text	00000040 SPIx_WriteRead
0800451c l     F .text	0000006c I2Cx_Init
20000dc4 l     O .bss	00000060 SpiHandle
20000e24 l     O .bss	00000038 I2cHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20000e5c l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20000e60 l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 __call_atexit.c
080053ec l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005598 l     F .text	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/softfp/crti.o
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/softfp/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000200 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
08017250 l       .fini_array	00000000 __fini_array_end
20000a3c l       .bss	00000000 __bss_start__
20001c84 l       .bss	00000000 __bss_end__
00000200 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 HAL_DMA_Abort
00000000 l       *UND*	00000000 software_init_hook
0801724c l       .fini_array	00000000 __fini_array_start
0801724c l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
08017244 l       .init_array	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
08017244 l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 _exit
08017244 l       .init_array	00000000 __preinit_array_start
08004e60  w    F .text	00000002 RTC_Alarm_IRQHandler
080120e0 g     O .rodata	00000010 RTC_BKP19R_fields
08017090 g     O .rodata	00000010 APBAHBPrescTable
08008254 g     O .rodata	00000058 TIM2_SR_fields
0800f768 g     O .rodata	00000108 CAN_F10R1_fields
08012f60 g     O .rodata	00000010 TIM16_DMAR_fields
08004f5c g     F .text	00000014 putchar
08004e60  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08011cd0 g     O .rodata	00000010 I2C1_RXDR_fields
080049e8 g     F .text	0000001e LSM303DLHC_AccFilterCmd
08004e60  w    F .text	00000002 TIM8_CC_IRQHandler
080122b0 g     O .rodata	00000038 TIM6_CR1_fields
08007e90 g     O .rodata	00000050 I2C1_ICR_fields
080008f4 g     F .text	00000004 _isatty_r
20000e98 g     O .bss	00000050 input_b
08011fa0 g     O .rodata	00000010 TIM2_PSC_fields
08008aac g     O .rodata	00000030 TIM17_CCMR1_Output_fields
08005120 g     F .text	000000ba strcpy
08012540 g     O .rodata	00000058 COMP_COMP5_CSR_fields
0800dfec g     O .rodata	00000010 I2C1_TXDR_fields
08004f70 g     F .text	00000064 _puts_r
08004390 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
0800a0a4 g     O .rodata	00000108 CAN_F19R1_fields
08000ca0 g     F .text	0000003c DecodeWriteRegister
08002cfa g     F .text	000000c8 HAL_PCD_EP_ClrStall
0800f3bc g     O .rodata	00000010 TIM16_CCR1_fields
08004e60  w    F .text	00000002 DebugMon_Handler
080008f8 g     F .text	00000004 _lseek_r
0800e81c g     O .rodata	00000028 FPU_MVFR1_fields
08004188 g     F .text	0000001a HAL_PCD_ResetCallback
08002df6 g     F .text	0000002e PCD_WritePMA
08013210 g     O .rodata	00000108 CAN_F22R1_fields
08008494 g     O .rodata	000000e8 CAN_FA1R_fields
20000f38 g     O .bss	00000224 hUSBDDevice
0800a2b4 g     O .rodata	00000050 TIM2_SMCR_fields
08017ca4 g     O .parsetable	0000000c CmdTestE
08008a54 g     O .rodata	00000028 NVIC_IPR1_fields
0800e4ec g     O .rodata	00000108 CAN_F14R1_fields
0800f758 g     O .rodata	00000010 TIM8_PSC_fields
0800d7ec g     O .rodata	00000038 TIM15_EGR_fields
0800097c g     F .text	00000054 CmdStats
08004cdc g     F .text	0000002e L3GD20_FilterConfig
08002dc2 g     F .text	00000034 HAL_PCDEx_PMAConfig
0801019c g     O .rodata	000000fc TIM2_registers
08011984 g     O .rodata	00000060 TIM15_DIER_fields
08009328 g     O .rodata	00000010 DMA1_CMAR3_fields
08009b3c g     O .rodata	00000108 GPIOA_BSRR_fields
08016be0 g     O .rodata	00000068 DMA1_CCR7_fields
0800237c g     F .text	000001b0 HAL_PCD_EP_Close
0800e99c g     O .rodata	00000010 TSC_IOG6CR_fields
08009338 g     O .rodata	00000030 ADC1_SQR1_fields
080091f8 g     O .rodata	000000e8 CAN_FS1R_fields
0800f2f4 g     O .rodata	00000038 TIM1_CCMR2_Input_fields
08007a50 g     O .rodata	00000018 RTC_SHIFTR_fields
08001288 g     F .text	0000001c printf
08004c60 g     F .text	00000040 L3GD20_EnableIT
08012138 g     O .rodata	00000030 CAN_TI1R_fields
080038be g     F .text	00000016 USBD_SetClassConfig
0800ef14 g     O .rodata	00000028 NVIC_IPR14_fields
08004e60  w    F .text	00000002 TIM1_CC_IRQHandler
08001d28 g     F .text	00000060 HAL_NVIC_SetPriority
0800a88c g     O .rodata	00000150 ADC1_registers
08004170 g     F .text	00000010 HAL_PCD_DataInStageCallback
080120f0 g     O .rodata	00000020 TIM2_CR2_fields
0800ee44 g     O .rodata	00000010 Flash_WRPR_fields
080067b8 g     F .text	00000020 __sseek
08005688 g     F .text	0000000a __sinit
08009df4 g     O .rodata	00000068 DMA1_CCR2_fields
080067e0 g     F .text	000000a8 __swbuf_r
08004e60  w    F .text	00000002 HardFault_Handler
08008654 g     O .rodata	00000108 TSC_IOHCR_fields
0800de9c g     O .rodata	00000028 CRC_CR_fields
08008634 g     O .rodata	00000010 NVIC_ISER0_fields
08006314 g     F .text	00000002 __malloc_unlock
08010cb0 g     O .rodata	00000010 TIM15_ARR_fields
08012ba0 g     O .rodata	00000010 RTC_BKP24R_fields
0800e3f4 g     O .rodata	00000010 TIM1_CCR3_fields
08016c60 g     O .rodata	00000010 TIM1_DMAR_fields
08009ab4 g     O .rodata	00000010 TIM15_CCR1_fields
08004e60  w    F .text	00000002 USB_HP_IRQHandler
08011f78 g     O .rodata	00000018 USART1_RTOR_fields
0800c4c0 g     O .rodata	00000078 RCC_AHBENR_fields
0800fc6c g     O .rodata	00000020 TIM2_CNT_fields
08010b98 g     O .rodata	00000090 I2C1_registers
080004f0 g     F .text	00000004 SysTick_Handler
0800cd70 g     O .rodata	00000010 RTC_WPR_fields
08012c30 g     O .rodata	00000010 RTC_SSR_fields
08001f60 g     F .text	0000000a HAL_GPIO_WritePin
0800e6f4 g     O .rodata	00000010 TSC_IOG2CR_fields
0800408c g     F .text	00000026 USBD_CDC_ReceivePacket
08004e60  w    F .text	00000002 PVD_IRQHandler
08008644 g     O .rodata	00000010 DMA1_CPAR7_fields
080049ae g     F .text	0000001c LSM303DLHC_AccRebootCmd
0800fc8c g     O .rodata	00000018 TIM6_CNT_fields
08010ae0 g     O .rodata	00000080 TIM1_DIER_fields
08004180 g     F .text	00000008 HAL_PCD_SOFCallback
0800d87c g     O .rodata	00000010 NVIC_ICPR0_fields
08006248 g     F .text	000000c6 memmove
08004e60  w    F .text	00000002 TAMP_STAMP_IRQHandler
080046cc g     F .text	00000068 GYRO_IO_Init
08012a08 g     O .rodata	00000028 NVIC_IPR2_fields
08017250 g       *ABS*	00000000 _sidata
08001c48 g     F .text	00000038 HAL_RCC_GetHCLKFreq
08004e60  w    F .text	00000002 PendSV_Handler
08017c98 g     O .parsetable	0000000c CmdButtonE
08011034 g     O .rodata	00000010 NVIC_ICPR1_fields
08004e60  w    F .text	00000002 NMI_Handler
08001d88 g     F .text	00000018 HAL_NVIC_EnableIRQ
08017244 g       .init_array	00000000 __exidx_end
08005248 g     F .text	00000064 __strtok_r
08004e60  w    F .text	00000002 EXTI3_IRQHandler
08001bdc g     F .text	0000006c HAL_RCC_GetSysClockFreq
0800460c g     F .text	0000001c BSP_LED_Off
08016908 g     O .rodata	00000010 DMA1_CNDTR5_fields
0800c848 g     O .rodata	000000a0 TIM8_CCER_fields
0800d0d0 g     O .rodata	00000108 CAN_F8R2_fields
08017d10 g       .parsetable	00000000 _parsetable_end
080117ec g     O .rodata	00000050 RCC_AHBRSTR_fields
08004e64 g     F .text	0000000c __errno
0800857c g     O .rodata	00000010 RTC_BKP6R_fields
08008ba0 g     O .rodata	00000030 CAN_TI2R_fields
08003ac0 g     F .text	00000218 USBD_StdDevReq
080030d8 g     F .text	00000090 HAL_I2C_Init
08010e28 g     O .rodata	00000010 NVIC_ISER2_fields
08017cf8 g     O .parsetable	0000000c CmdWE
08003168  w    F .text	00000002 HAL_I2C_MspDeInit
0800bc00 g     O .rodata	00000028 CAN_RDH0R_fields
0800e39c g     O .rodata	00000028 FPU_FPDSCR_fields
080042d8 g     F .text	0000000c USBD_VCP_DeviceDescriptor
08001c80  w    F .text	00000002 HAL_MspInit
08009f8c g     O .rodata	00000108 CAN_F0R2_fields
08007998 g     O .rodata	00000010 TSC_IOG8CR_fields
08004270 g     F .text	00000026 USBD_LL_IsStallEP
08012438 g     O .rodata	00000108 CAN_F0R1_fields
0800d1d8 g     O .rodata	00000028 TIM15_SMCR_fields
08004224 g     F .text	0000000e USBD_LL_Start
08004824 g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
080048e8 g     F .text	00000030 BSP_ACCELERO_Init
080038b4 g     F .text	0000000a USBD_Start
080008ea g     F .text	0000000a _fstat_r
08001f6a g     F .text	00000008 HAL_GPIO_TogglePin
08011184 g     O .rodata	00000050 TIM8_CR1_fields
0800f11c g     O .rodata	00000010 Flash_AR_fields
0800b244 g     O .rodata	00000108 CAN_F2R1_fields
0800e074 g     O .rodata	00000060 COMP_COMP4_CSR_fields
08009710 g     O .rodata	00000048 GPIOB_AFRH_fields
08006b6c g       .text	00000000 _etext
0800e02c g     O .rodata	00000018 EXTI_PR2_fields
0800ef54 g     O .rodata	00000030 USB_FS_FNR_fields
20000a3c g       .bss	00000000 _sbss
0800ddbc g     O .rodata	00000060 COMP_registers
08011044 g     O .rodata	00000108 CAN_F4R2_fields
080042d4 g     F .text	00000002 USBD_static_free
0800d7dc g     O .rodata	00000010 DMA1_CMAR1_fields
0800afc8 g     O .rodata	00000068 TIM2_DIER_fields
0800be20 g     O .rodata	00000010 TSC_IOG1CR_fields
08012f18 g     O .rodata	00000028 TIM17_CCER_fields
08012d10 g     O .rodata	00000010 TIM8_RCR_fields
0800f544 g     O .rodata	00000018 TIM16_CNT_fields
0800adc0 g     O .rodata	00000108 GPIOB_BSRR_fields
0800c2e0 g     O .rodata	00000108 CAN_F16R2_fields
08009d84 g     O .rodata	00000020 ADC1_OFR1_fields
080119e4 g     O .rodata	00000108 CAN_F24R2_fields
0800b594 g     O .rodata	00000010 RTC_BKP23R_fields
0800ebbc g     O .rodata	00000010 TIM15_CCR2_fields
08008f10 g     O .rodata	000000a0 ADC1_CFGR_fields
080089bc g     O .rodata	00000010 RTC_BKP13R_fields
080038a6 g     F .text	0000000e USBD_RegisterClass
0800c548 g     O .rodata	00000108 CAN_F20R1_fields
0800c3e8 g     O .rodata	00000068 USART1_ICR_fields
08016f24 g     O .rodata	00000108 CAN_F25R2_fields
08012f40 g     O .rodata	00000010 TSC_IOG4CR_fields
0800c650 g     O .rodata	00000108 CAN_F27R2_fields
08016e94 g     O .rodata	00000080 TIM8_SR_fields
08007e38 g     O .rodata	00000058 USB_FS_ISTR_fields
08010c80 g     O .rodata	00000010 DMA1_CMAR2_fields
08009930 g     O .rodata	00000010 RTC_BKP26R_fields
0800d84c g     O .rodata	00000030 ADC1_SQR2_fields
0800cd80 g     O .rodata	00000018 TIM17_CNT_fields
080097e0 g     O .rodata	00000010 WWDG_SR_fields
08001dcc g     F .text	00000188 HAL_GPIO_Init
0800b150 g     O .rodata	0000009c EXTI_registers
08003a62 g     F .text	00000006 USBD_LL_SetSpeed
2000017c g     O .data	00000004 BUTTON_PORT
08004918 g     F .text	00000010 BSP_ACCELERO_GetXYZ
0800b574 g     O .rodata	00000010 NVIC_ICTR_fields
08008864 g     O .rodata	00000010 TIM6_ARR_fields
0800bc38 g     O .rodata	000000b8 CAN_TSR_fields
080007a8 g     F .text	000000b4 DumpBuffer
0800d048 g     O .rodata	00000088 GPIOA_IDR_fields
080078b8 g     O .rodata	00000058 USB_FS_USB_EP3R_fields
080041a4 g     F .text	00000002 HAL_PCD_ResumeCallback
08000220 g     F .text	00000134 memcpy
08011fb0 g     O .rodata	00000108 CAN_F7R2_fields
08011b9c g     O .rodata	00000018 TIM1_CNT_fields
08004734 g     F .text	00000044 GYRO_IO_Write
08004fe4 g     F .text	000000f8 setvbuf
08000354 g     F .text	0000005c CmdLED
0800b3e4 g     O .rodata	00000080 TIM1_SR_fields
08009e5c g     O .rodata	00000028 NVIC_IPR13_fields
08008a7c g     O .rodata	00000010 TIM15_PSC_fields
08003d08 g     F .text	000000b2 USBD_StdEPReq
0800558c g     F .text	0000000c _cleanup_r
0800f928 g     O .rodata	00000048 GPIOA_AFRH_fields
08010e80 g     O .rodata	00000018 DAC_DHR12RD_fields
08011224 g     O .rodata	00000060 COMP_COMP2_CSR_fields
08010e98 g     O .rodata	00000080 TIM8_DIER_fields
08016c48 g     O .rodata	00000018 ADC1_DIFSEL_fields
08004644 g     F .text	00000074 BSP_PB_Init
08004e60  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
08004e60  w    F .text	00000002 EXTI0_IRQHandler
08012628 g     O .rodata	00000018 TIM8_OR_fields
08004e60  w    F .text	00000002 I2C2_EV_IRQHandler
08008b60 g     O .rodata	00000028 CAN_TDH0R_fields
0800b35c g     O .rodata	00000058 USB_FS_USB_EP4R_fields
0800dffc g     O .rodata	00000030 WWDG_registers
08007c18 g     O .rodata	00000010 TIM17_RCR_fields
08004fd4 g     F .text	00000010 puts
08003e54 g     F .text	00000016 USBD_CtlSendStatus
08004e60  w    F .text	00000002 FPU_IRQHandler
08001ce8  w    F .text	0000001a HAL_Delay
08003cd8 g     F .text	00000030 USBD_StdItfReq
0800b34c g     O .rodata	00000010 TIM8_CCR4_fields
20000014 g     O .data	00000004 SystemCoreClock
08011bb4 g     O .rodata	000000e4 TIM15_registers
08002630 g     F .text	00000182 HAL_PCD_EP_Transmit
080001fc g     F .text	00000012 my_Tick
0800e294 g     O .rodata	00000108 CAN_F3R1_fields
08003a80 g     F .text	00000028 USBD_ParseSetupRequest
0800f28c g     O .rodata	00000018 TIM2_CCR1_fields
0800c108 g     O .rodata	00000018 DAC_SWTRIGR_fields
08004e60  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800ac60 g     O .rodata	00000108 CAN_F13R1_fields
08005c80 g     F .text	00000010 malloc
0800d5b4 g     O .rodata	00000010 IWDG_RLR_fields
08002e24 g     F .text	00000022 PCD_ReadPMA
080003d8 g     F .text	00000054 CmdGyro
08012bf0 g     O .rodata	00000018 CAN_FMR_fields
08016cd8 g     O .rodata	0000003c OPAMP_registers
08010a10 g     O .rodata	00000010 DMA1_CNDTR4_fields
08012398 g     O .rodata	00000010 NVIC_IABR1_fields
08012270 g     O .rodata	00000030 ADC1_2_registers
20000128 g     O .data	0000001c VCP_Desc
08011d20 g     O .rodata	000000d8 EXTI_PR1_fields
08004e60  w    F .text	00000002 UsageFault_Handler
08010540 g     O .rodata	00000028 TIM8_CCR5_fields
08004e60  w    F .text	00000002 ADC1_2_IRQHandler
20000e6c g     O .bss	00000004 __malloc_top_pad
20000ee8 g     O .bss	00000050 input
08011284 g     O .rodata	00000108 CAN_F4R1_fields
0800ef3c g     O .rodata	00000018 ADC1_TR3_fields
0800b464 g     O .rodata	00000010 DMA1_CPAR2_fields
080097f0 g     O .rodata	00000050 TIM16_DIER_fields
08001f54 g     F .text	0000000c HAL_GPIO_ReadPin
0800dfcc g     O .rodata	00000010 NVIC_ICER2_fields
080053d4 g     F .text	00000018 strtoul
200013d8 g     O .bss	00000004 BuffLength
080097d0 g     O .rodata	00000010 TIM8_CCR1_fields
200013dc g     O .bss	0000006c UartHandle
080127f0 g     O .rodata	00000108 CAN_F9R2_fields
0801018c g     O .rodata	00000010 DAC_DHR12L2_fields
08005914 g     F .text	00000318 __sfvwrite_r
08003a68 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
08004e60  w    F .text	00000002 SPI1_IRQHandler
0800e404 g     O .rodata	00000030 CAN_TI0R_fields
08004e60  w    F .text	00000002 CAN_SCE_IRQHandler
08012960 g     O .rodata	00000050 ADC1_SMPR2_fields
0800f454 g     O .rodata	00000028 NVIC_IPR4_fields
080008b0 g     F .text	00000034 _sbrk_r
08008994 g     O .rodata	00000028 NVIC_IPR18_fields
080040b4 g     F .text	0000009c HAL_PCD_MspInit
080103b8 g     O .rodata	00000018 TIM6_DIER_fields
08009560 g     O .rodata	00000068 TIM1_CCMR1_Output_fields
080167d8 g     O .rodata	000000b8 USART1_ISR_fields
08004e60  w    F .text	00000002 TIM6_DAC_IRQHandler
0800a384 g     O .rodata	00000070 I2C1_CR2_fields
0800e6e4 g     O .rodata	00000010 TIM8_CCR2_fields
08002c58 g     F .text	000000a2 HAL_PCD_EP_SetStall
08000a98 g     F .text	0000000a _read_r
08007a00 g     O .rodata	00000050 TIM1_SMCR_fields
0800e8fc g     O .rodata	00000038 CAN_ESR_fields
0800387c g     F .text	0000002a USBD_Init
080113ac g     O .rodata	00000088 GPIOB_BRR_fields
20001160 g     O .bss	00000178 hpcd
080069f0 g     F .text	00000084 _fclose_r
0800f3cc g     O .rodata	00000020 ADC1_OFR2_fields
08008adc g     O .rodata	00000018 TIM2_ARR_fields
080047c0 g     F .text	00000064 COMPASSACCELERO_IO_Init
20000e68 g     O .bss	00000004 __malloc_max_sbrked_mem
08012fb8 g     O .rodata	00000108 CAN_F9R1_fields
0800f12c g     O .rodata	00000040 RTC_DR_fields
08011b04 g     O .rodata	00000010 TIM1_CCR1_fields
08001da0 g     F .text	0000002c HAL_SYSTICK_Config
080108f8 g     O .rodata	00000010 Flash_OPTKEYR_fields
0800ba00 g     O .rodata	00000020 ADC1_OFR4_fields
2000115c g     O .bss	00000004 USBDDataIn
08004e60  w    F .text	00000002 TIM8_UP_IRQHandler
20000144 g     O .data	0000001a USBD_StringSerial
0800bf48 g     O .rodata	00000108 CAN_F25R1_fields
08012d50 g     O .rodata	00000020 SPI1_I2SPR_fields
08010448 g     O .rodata	00000010 ADC1_JDR1_fields
08011024 g     O .rodata	00000010 IWDG_KR_fields
080122e8 g     O .rodata	00000058 USB_FS_USB_EP0R_fields
0800486c g     F .text	0000003c COMPASSACCELERO_IO_Write
0800e704 g     O .rodata	00000108 CAN_F23R2_fields
0800e464 g     O .rodata	00000048 CRC_registers
0800abb8 g     O .rodata	000000a8 USART1_CR1_fields
0800b5d4 g     O .rodata	00000264 RTC_registers
0800bd18 g     O .rodata	00000108 CAN_F5R2_fields
0800a9dc g     O .rodata	00000030 TIM17_CR2_fields
08017244 g       .init_array	00000000 __exidx_start
0800a294 g     O .rodata	00000020 TIM16_CCMR1_Input_fields
08008e80 g     O .rodata	00000010 Flash_KEYR_fields
08004b6e g     F .text	0000001c LSM303DLHC_AccZClickITConfig
0800edcc g     O .rodata	00000068 TIM8_CCMR2_Output_fields
080096e0 g     O .rodata	00000030 PWR_CSR_fields
0801196c g     O .rodata	00000018 RTC_ALRMASSR_fields
200000a0 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
080120b8 g     O .rodata	00000028 SYSCFG_EXTICR4_fields
0800aee0 g     O .rodata	00000010 NVIC_IABR0_fields
0801723c g     O .rodata	00000004 _global_impure_ptr
0800b090 g     O .rodata	00000048 FPU_MVFR0_fields
08010b70 g     O .rodata	00000010 TIM16_RCR_fields
08006370 g     F .text	000003ec _realloc_r
08004e70 g     F .text	00000050 __libc_init_array
08003e42 g     F .text	00000012 USBD_CtlContinueRx
08011f90 g     O .rodata	00000010 RTC_BKP12R_fields
08008364 g     O .rodata	00000018 USART1_GTPR_fields
08002044 g     F .text	00000338 HAL_PCD_EP_Open
08004e60  w    F .text	00000002 DMA2_Channel2_IRQHandler
08004e60  w    F .text	00000002 DMA1_Channel4_IRQHandler
080095d8 g     O .rodata	00000018 TIM1_OR_fields
08007910 g     O .rodata	00000088 GPIOB_PUPDR_fields
080027b2 g     F .text	000004a6 HAL_PCD_IRQHandler
08000510 g     F .text	00000020 CmdR
08012c40 g     O .rodata	00000010 TIM1_CCR4_fields
0800d7a4 g     O .rodata	00000028 CAN_TDL1R_fields
080111fc g     O .rodata	00000028 NVIC_IPR7_fields
08004d0a g     F .text	0000002e L3GD20_FilterCmd
08011ce0 g     O .rodata	00000010 TIM17_DMAR_fields
0800316a g     F .text	0000002e HAL_I2C_DeInit
080103a0 g     O .rodata	00000018 TIM15_CNT_fields
08003506 g     F .text	000000a6 HAL_SPI_Init
0800a54c g     O .rodata	00000010 RTC_BKP10R_fields
0800b030 g     O .rodata	00000050 CAN_MSR_fields
0800efe4 g     O .rodata	000000a8 RCC_registers
08006b54 g     F .text	00000000 _init
0800bcf0 g     O .rodata	00000028 CAN_TDL0R_fields
0800e3c4 g     O .rodata	00000010 DAC_DHR8R2_fields
0800f970 g     O .rodata	00000098 RCC_APB1RSTR_fields
0800496c g     F .text	00000010 BSP_GYRO_GetXYZ
0800a094 g     O .rodata	00000010 RTC_BKP0R_fields
0800fd1c g     O .rodata	00000438 CAN_registers
08017c8c g       .parsetable	00000000 _parsetable_start
0800bb70 g     O .rodata	00000068 DMA1_CCR5_fields
0800b234 g     O .rodata	00000010 RTC_BKP8R_fields
0800a7b4 g     O .rodata	000000d8 TSC_registers
0800e0d4 g     O .rodata	00000038 TIM2_CCMR2_Input_fields
08004254 g     F .text	0000000e USBD_LL_StallEP
080091b0 g     O .rodata	00000010 NVIC_ICER1_fields
08011cf0 g     O .rodata	00000030 TIM16_EGR_fields
08017ce0 g     O .parsetable	0000000c CmdRE
08003504  w    F .text	00000002 HAL_SPI_MspInit
08010298 g     O .rodata	00000108 CAN_F8R1_fields
08004e60  w    F .text	00000002 USART3_IRQHandler
0800d674 g     O .rodata	00000108 CAN_F21R1_fields
0800ad68 g     O .rodata	00000058 RCC_CSR_fields
08004318 g     F .text	00000040 USBD_VCP_SerialStrDescriptor
0800dbe4 g     O .rodata	00000088 GPIOA_OTYPER_fields
08012f70 g     O .rodata	00000018 DAC_DHR12LD_fields
08009c44 g     O .rodata	00000038 TIM16_SR_fields
0800fa08 g     O .rodata	00000144 TIM1_registers
0800569c g     F .text	0000002c __libc_fini_array
080125e8 g     O .rodata	00000040 ADC1_JSQR_fields
20001c84 g       .bss	00000000 _ebss
080012a4 g     F .text	00000030 CmdTest
080048a8 g     F .text	00000040 COMPASSACCELERO_IO_Read
200001d0 g     O .data	0000002c L3gd20Drv
0800e134 g     O .rodata	00000058 FPU_CPACR_fields
08004e60  w    F .text	00000002 DMA1_Channel7_IRQHandler
0800e60c g     O .rodata	00000028 CAN_TDL2R_fields
08003290 g     F .text	00000104 HAL_I2C_Mem_Read
080092e0 g     O .rodata	00000048 GPIOA_AFRL_fields
08004e10  w    F .text	00000038 Reset_Handler
20000018 g     O .data	00000043 USBD_CDC_CfgFSDesc
08016a98 g     O .rodata	00000010 RTC_BKP29R_fields
08004928 g     F .text	00000044 BSP_GYRO_Init
08009068 g     O .rodata	00000028 NVIC_IPR0_fields
0800d8bc g     O .rodata	00000088 GPIOA_ODR_fields
0800b474 g     O .rodata	00000028 NVIC_IPR15_fields
080095c8 g     O .rodata	00000010 TIM1_CCR2_fields
0800aa40 g     O .rodata	000000d8 EXTI_RTSR1_fields
0800bb60 g     O .rodata	00000010 DAC_DOR2_fields
0800d7cc g     O .rodata	00000010 CRC_DR_fields
080090c8 g     O .rodata	00000088 GPIOB_OSPEEDR_fields
08017cd4 g     O .parsetable	0000000c CmdLEDE
08004e60  w    F .text	00000002 UART5_IRQHandler
08000d68 g     F .text	0000003c DecodePeripheral
08011ca8 g     O .rodata	00000028 SYSCFG_EXTICR1_fields
08007d30 g     O .rodata	00000108 CAN_F11R2_fields
08004e60  w    F .text	00000002 ADC3_IRQHandler
0800d5c4 g     O .rodata	00000040 RTC_TSTR_fields
0800e8ac g     O .rodata	00000050 TIM2_CR1_fields
08001ca8 g     F .text	00000024 HAL_Init
0800d290 g     O .rodata	00000108 CAN_F1R2_fields
08006318 g     F .text	00000058 _putc_r
08003e22 g     F .text	00000020 USBD_CtlPrepareRx
0800ce20 g     O .rodata	00000010 RTC_BKP17R_fields
0800fb4c g     O .rodata	00000028 CAN_RDL1R_fields
0800a56c g     O .rodata	00000108 CAN_F23R1_fields
080035ae g     F .text	0000002e HAL_SPI_DeInit
08004e60  w    F .text	00000002 TIM4_IRQHandler
0800ba48 g     O .rodata	00000108 CAN_F18R1_fields
08012c50 g     O .rodata	000000a8 USB_FS_registers
08012f08 g     O .rodata	00000010 TIM8_CCR3_fields
08010908 g     O .rodata	00000108 CAN_F13R2_fields
08006d3e g     O .rodata	00000008 LEDs
0800f08c g     O .rodata	00000038 TIM2_CCMR1_Input_fields
08016f14 g     O .rodata	00000010 DAC_DHR12R1_fields
080131d0 g     O .rodata	00000030 I2C1_OAR1_fields
080042cc g     F .text	00000008 USBD_static_malloc
080091d0 g     O .rodata	00000028 CAN_RF0R_fields
08004e60  w    F .text	00000002 CAN_RX1_IRQHandler
08004e60  w    F .text	00000002 DMA2_Channel1_IRQHandler
080091c0 g     O .rodata	00000010 RTC_BKP7R_fields
0800dc6c g     O .rodata	00000018 ADC1_TR1_fields
08012b90 g     O .rodata	00000010 DMA1_CNDTR7_fields
0800405e g     F .text	0000002e USBD_CDC_TransmitPacket
20000180 g     O .data	00000004 I2cxTimeout
0800bb50 g     O .rodata	00000010 TSC_IOG5CR_fields
0800c4b0 g     O .rodata	00000010 DAC_DHR12R2_fields
0800e3e4 g     O .rodata	00000010 RTC_BKP18R_fields
080001e4 g     F .text	00000016 mytest
0800a55c g     O .rodata	00000010 DMA1_CMAR6_fields
0800c478 g     O .rodata	00000038 TIM15_CCMR1_Input_fields
0800042c g     F .text	0000002c CmdButton
00000000  w      *UND*	00000000 __deregister_frame_info
08003e6a g     F .text	00000016 USBD_CtlReceiveStatus
0800b960 g     O .rodata	00000018 TIM2_CCR4_fields
20001c84 g       ._user_heap_stack	00000000 end
20000160 g     O .data	00000008 LineCoding
0800b0d8 g     O .rodata	00000078 SPI1_CR1_fields
08004e60  w    F .text	00000002 I2C1_EV_IRQHandler
0800fca4 g     O .rodata	00000078 SPI1_registers
08004232 g     F .text	00000014 USBD_LL_OpenEP
0800f3ec g     O .rodata	00000018 TIM8_DCR_fields
08000de8 g     F .text	00000048 DecodePrintRegisters
0800daec g     O .rodata	00000070 USB_FS_USB_CNTR_fields
0800c078 g     O .rodata	00000090 USART1_registers
08004ca0 g     F .text	0000003c L3GD20_DisableIT
080095f0 g     O .rodata	00000010 USART1_TDR_fields
0800f880 g     O .rodata	00000080 RCC_APB1ENR_fields
080035ac  w    F .text	00000002 HAL_SPI_MspDeInit
08013200 g     O .rodata	00000010 DMA1_CNDTR2_fields
08010f18 g     O .rodata	00000078 CAN_IER_fields
080123a8 g     O .rodata	00000068 DMA1_CCR1_fields
080127e0 g     O .rodata	00000010 NVIC_ICER0_fields
0800d64c g     O .rodata	00000010 NVIC_ISER1_fields
0800399c g     F .text	00000088 USBD_LL_DataInStage
08016a88 g     O .rodata	00000010 RTC_BKP31R_fields
0800da9c g     O .rodata	00000050 TIM1_EGR_fields
08011b34 g     O .rodata	00000068 TIM2_CCMR1_Output_fields
08010cc0 g     O .rodata	00000018 DAC_SR_fields
0800ec8c g     O .rodata	00000018 TIM2_CCR2_fields
080041a8 g     F .text	0000007c USBD_LL_Init
08011174 g     O .rodata	00000010 RTC_BKP3R_fields
080045f0 g     F .text	0000001c BSP_LED_On
08004b8a g     F .text	00000032 L3GD20_Init
08004e60  w    F .text	00000002 DMA1_Channel6_IRQHandler
08003aa8 g     F .text	00000016 USBD_CtlError
2000005c g     O .data	00000038 USBD_CDC
080038d4 g     F .text	0000000e USBD_ClrClassConfig
08016890 g     O .rodata	00000010 RTC_BKP5R_fields
08004e60  w    F .text	00000002 UART4_IRQHandler
08004e60  w    F .text	00000002 DMA2_Channel4_IRQHandler
08004034 g     F .text	0000000e USBD_CDC_RegisterInterface
08005694 g     F .text	00000002 __sfp_lock_acquire
080061b4 g     F .text	00000092 memchr
08005764 g     F .text	000001b0 _free_r
08004e60  w    F .text	00000002 TIM3_IRQHandler
08004e60  w    F .text	00000002 RCC_IRQHandler
0800822c g     O .rodata	00000028 RTC_CALR_fields
0800b080 g     O .rodata	00000010 DAC_DHR12L1_fields
0800832c g     O .rodata	00000038 TIM17_SR_fields
0800d9cc g     O .rodata	00000088 GPIOB_OTYPER_fields
08004e60  w    F .text	00000002 DMA1_Channel1_IRQHandler
08011e80 g     O .rodata	00000010 RTC_BKP9R_fields
08012d70 g     O .rodata	00000108 CAN_F14R2_fields
0800415e g     F .text	00000012 HAL_PCD_DataOutStageCallback
08004e60 g       .text	00000002 Default_Handler
20000a38 g     O .data	00000004 __malloc_sbrk_base
08004374 g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
0800f32c g     O .rodata	00000090 GPIOA_LCKR_fields
0800c238 g     O .rodata	00000098 RTC_TAFCR_fields
20000168 g     O .data	00000010 USBD_CDC_fops
08012e78 g     O .rodata	00000090 GPIOA_registers
0800b940 g     O .rodata	00000010 NVIC_ISPR2_fields
08004e60  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
080103e0 g     O .rodata	00000068 TIM2_CCMR2_Output_fields
080094c0 g     O .rodata	00000090 GPIOB_LCKR_fields
08008e90 g     O .rodata	00000080 TIM8_CR2_fields
08002620 g     F .text	00000010 HAL_PCD_EP_GetRxCount
080089cc g     O .rodata	00000038 CAN_BTR_fields
080168a0 g     O .rodata	00000068 DMA1_CCR4_fields
08009a8c g     O .rodata	00000028 NVIC_IPR10_fields
0800c2d0 g     O .rodata	00000010 TIM17_ARR_fields
0800c120 g     O .rodata	00000108 CAN_F12R2_fields
080106c0 g     O .rodata	00000030 USART1_RQR_fields
0800ef94 g     O .rodata	00000050 TIM17_DIER_fields
08007ba0 g     O .rodata	00000010 RTC_BKP22R_fields
080106f0 g     O .rodata	00000028 CAN_TDH2R_fields
0800de34 g     O .rodata	00000010 TIM1_RCR_fields
08004262 g     F .text	0000000e USBD_LL_ClearStallEP
08016e6c g     O .rodata	00000028 NVIC_IPR5_fields
08009940 g     O .rodata	00000060 Flash_OBR_fields
08004e60  w    F .text	00000002 EXTI15_10_IRQHandler
0800a304 g     O .rodata	00000020 CAN_TDT1R_fields
08004d38 g     F .text	000000d8 L3GD20_ReadXYZAngRate
0800e9f4 g     O .rodata	00000040 RTC_TR_fields
0800f51c g     O .rodata	00000028 NVIC_IPR17_fields
0800694c g     F .text	000000a4 __register_exitproc
080098d0 g     O .rodata	00000060 Flash_CR_fields
0800b504 g     O .rodata	00000060 SPI1_SR_fields
0800b1ec g     O .rodata	00000048 USB_FS_DADDR_fields
0800bbe8 g     O .rodata	00000018 EXTI_SWIER2_fields
08002018 g     F .text	0000002c HAL_PCD_SetAddress
0800d824 g     O .rodata	00000028 NVIC_IPR19_fields
0800c758 g     O .rodata	00000010 TIM6_SR_fields
0800838c g     O .rodata	00000108 CAN_F1R1_fields
08010888 g     O .rodata	00000060 DES_registers
0801139c g     O .rodata	00000010 TIM17_PSC_fields
080082ac g     O .rodata	00000028 SYSCFG_EXTICR2_fields
0800cc68 g     O .rodata	00000010 SPI1_CRCPR_fields
080049ca g     F .text	0000001e LSM303DLHC_AccFilterConfig
08001910 g     F .text	000002cc HAL_RCC_ClockConfig
08001d04 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
2000000c g     O .data	00000004 Commands
080128f8 g     O .rodata	00000018 ADC1_TR2_fields
20000e70 g     O .bss	00000028 __malloc_current_mallinfo
08004aec g     F .text	0000001e LSM303DLHC_AccFilterClickCmd
0800e454 g     O .rodata	00000010 RTC_TSSSR_fields
08000634 g     F .text	0000012c TaskInput
0800bf38 g     O .rodata	00000010 TIM6_CR2_fields
08010a88 g     O .rodata	00000058 RCC_CR_fields
0800dc84 g     O .rodata	000000e8 CAN_FM1R_fields
0800e80c g     O .rodata	00000010 TIM1_CCR6_fields
0800f47c g     O .rodata	000000a0 USART1_CR2_fields
080105b0 g     O .rodata	00000068 TIM1_BDTR_fields
080050dc g     F .text	00000044 strcasecmp
080080dc g     O .rodata	00000010 IWDG_WINR_fields
0800dd6c g     O .rodata	00000050 ADC1_SMPR1_fields
08004778 g     F .text	00000048 GYRO_IO_Read
08000214 g     F .text	00000004 my_Init
0800b5a4 g     O .rodata	00000020 I2C1_OAR2_fields
08012640 g     O .rodata	00000108 CAN_F26R1_fields
080052ac g     F .text	00000128 _strtoul_r
0800ee34 g     O .rodata	00000010 CRC_POL_fields
08016aa8 g     O .rodata	00000010 DMA1_CMAR4_fields
08004e60  w    F .text	00000002 TIM7_IRQHandler
08004c04 g     F .text	0000005c L3GD20_INT1InterruptConfig
080041a2 g     F .text	00000002 HAL_PCD_SuspendCallback
08010728 g     O .rodata	00000010 DMA1_CPAR3_fields
0800c538 g     O .rodata	00000010 RTC_BKP14R_fields
08003ee0 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
080008e4 g     F .text	00000006 _close_r
080077f0 g     O .rodata	00000010 SPI1_DR_fields
08008e50 g     O .rodata	00000020 RCC_CFGR2_fields
0800897c g     O .rodata	00000018 TIM15_DCR_fields
08008a8c g     O .rodata	00000020 Flash_ACR_fields
08016bc0 g     O .rodata	00000010 CRC_IDR_fields
200001a4 g     O .data	0000002c Lsm303dlhcDrv
0800b950 g     O .rodata	00000010 DMA1_CPAR5_fields
08012168 g     O .rodata	00000108 CAN_F18R2_fields
08010568 g     O .rodata	00000048 IWDG_registers
08005238 g     F .text	00000010 strtok
08017cc8 g     O .parsetable	0000000c CmdGyroE
08009470 g     O .rodata	00000010 IWDG_PR_fields
0800eb94 g     O .rodata	00000028 NVIC_IPR11_fields
0800de44 g     O .rodata	00000058 COMP_COMP7_CSR_fields
080081f4 g     O .rodata	00000028 CAN_RF1R_fields
080009d0 g     F .text	0000007c TerminalInit
08006888 g     F .text	000000c4 __swsetup_r
0800aa30 g     O .rodata	00000010 TIM8_ARR_fields
08004e60  w    F .text	00000002 EXTI9_5_IRQHandler
08003876 g     F .text	00000006 HAL_SPI_GetState
0800a69c g     O .rodata	00000010 ADC1_DR_fields
08004e60  w    F .text	00000002 RTC_WKUP_IRQHandler
08016a70 g     O .rodata	00000018 USART1_BRR_fields
08012340 g     O .rodata	00000058 TIM15_CCMR1_Output_fields
2000062c g     O .data	00000408 __malloc_av_
0800f1ec g     O .rodata	00000090 SYSCFG_CFGR1_fields
08000aa2 g     F .text	00000010 TerminalReadNonBlock
08012f98 g     O .rodata	00000020 CAN_TDT0R_fields
0800085c g     F .text	00000054 CmdDump
0800675c g     F .text	00000022 __sread
0800d88c g     O .rodata	00000030 TIM16_CCMR1_Output_fields
08010c90 g     O .rodata	00000020 WWDG_CFR_fields
0801154c g     O .rodata	000002a0 Peripherals
08011df8 g     O .rodata	00000088 GPIOB_ODR_fields
08001cdc  w    F .text	0000000c HAL_GetTick
0800ee54 g     O .rodata	00000058 USB_FS_USB_EP5R_fields
0800be30 g     O .rodata	00000108 CAN_F11R1_fields
08006310 g     F .text	00000002 __malloc_lock
08010718 g     O .rodata	00000010 NVIC_ISPR0_fields
08009150 g     O .rodata	00000060 ADC1_ISR_fields
08009758 g     O .rodata	00000050 FPU_FPCCR_fields
08012cf8 g     O .rodata	00000018 TSC_ICR_fields
08004a06 g     F .text	000000e6 LSM303DLHC_AccReadXYZ
08009de4 g     O .rodata	00000010 NVIC_IABR2_fields
08005560 g     F .text	0000002c _fflush_r
08000ab2 g     F .text	00000012 TerminalReadAnyNonBlock
08004358 g     F .text	0000001c USBD_VCP_ProductStrDescriptor
08013318 g     O .rodata	00000088 GPIOA_PUPDR_fields
08004e60  w    F .text	00000002 SPI2_IRQHandler
080111d4 g     O .rodata	00000010 RTC_BKP21R_fields
08017111 g     O .rodata	00000012 hUSBDDeviceDesc
08007b70 g     O .rodata	00000030 RTC_TSDR_fields
08000c54 g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
08010d40 g     O .rodata	00000050 RCC_CFGR3_fields
08004ec0 g     F .text	0000009a memset
08004e60  w    F .text	00000002 MemManage_Handler
08000464 g     F .text	0000008c main
08010738 g     O .rodata	00000108 TSC_IOSCR_fields
0800767c g     O .rodata	00000174 DMA1_registers
080046b8 g     F .text	00000014 BSP_PB_GetState
0800ebdc g     O .rodata	00000028 SYSCFG_EXTICR3_fields
20000e64 g     O .bss	00000004 __malloc_max_total_mem
0800b564 g     O .rodata	00000010 ADC1_JDR3_fields
0800eb84 g     O .rodata	00000010 SPI1_TXCRCR_fields
080035dc g     F .text	0000029a HAL_SPI_TransmitReceive
20000178 g     O .data	00000004 SpixTimeout
08017c8c g       *ABS*	00000000 _siccmram
08016c80 g     O .rodata	00000058 COMP_COMP3_CSR_fields
0800c820 g     O .rodata	00000028 NVIC_IPR9_fields
0800caac g     O .rodata	0000003c DBGMCU_registers
0801114c g     O .rodata	00000028 NVIC_IPR16_fields
0800b838 g     O .rodata	00000108 CAN_F2R2_fields
08004e60  w    F .text	00000002 SVC_Handler
080067d8 g     F .text	00000008 __sclose
08004e60  w    F .text	00000002 DMA2_Channel5_IRQHandler
0800a1ac g     O .rodata	000000e8 DMA1_IFCR_fields
08008fe0 g     O .rodata	00000088 TSC_IOGCSR_fields
08000be4 g     F .text	00000070 TerminalInputBufferWrite
08012f50 g     O .rodata	00000010 DMA1_CPAR1_fields
0800aec8 g     O .rodata	00000018 DES_UID0_fields
08005c90 g     F .text	00000524 _malloc_r
0800e9ac g     O .rodata	00000048 GPIOB_AFRL_fields
08008bd0 g     O .rodata	00000060 ADC1_IER_fields
08009550 g     O .rodata	00000010 DAC_DHR8R1_fields
08010154 g     O .rodata	00000038 TIM1_CCMR1_Input_fields
08008d48 g     O .rodata	00000108 TSC_IOASCR_fields
0800a674 g     O .rodata	00000028 NVIC_IPR20_fields
08003a24 g     F .text	0000003e USBD_LL_Reset
0800fb74 g     O .rodata	00000020 CAN_RDT1R_fields
0800cd98 g     O .rodata	00000088 GPIOA_BRR_fields
08011444 g     O .rodata	00000108 CAN_F20R2_fields
0800de1c g     O .rodata	00000018 TSC_ISR_fields
00000000  w      *UND*	00000000 __libc_fini
080042c0 g     F .text	0000000c USBD_LL_GetRxDataSize
08004e60  w    F .text	00000002 DMA1_Channel5_IRQHandler
0800497c g     F .text	00000020 LSM303DLHC_AccInit
08004e60  w    F .text	00000002 USB_LP_IRQHandler
20001448 g     O .bss	00000800 UserRxBuffer
0800eb3c g     O .rodata	00000048 SPI1_I2SCFGR_fields
080170c0 g     O .rodata	00000004 USBD_LangIDDesc
08009368 g     O .rodata	00000108 CAN_F15R2_fields
08004e60  w    F .text	00000002 EXTI4_IRQHandler
08010c28 g     O .rodata	00000058 USB_FS_USB_EP2R_fields
20000184 g     O .data	00000020 LED_PORT
08007f90 g     O .rodata	00000010 TIM8_CCR6_fields
08004b28 g     F .text	00000046 LSM303DLHC_AccClickITEnable
0800393c g     F .text	00000060 USBD_LL_DataOutStage
0800c228 g     O .rodata	00000010 RTC_BKP4R_fields
080056c8 g     F .text	0000009c _malloc_trim_r
08011c98 g     O .rodata	00000010 TSC_IOG7CR_fields
0800821c g     O .rodata	00000010 RTC_BKP16R_fields
0800da54 g     O .rodata	00000030 DBGMCU_CR_fields
0800e434 g     O .rodata	00000020 CAN_RDT0R_fields
080099a0 g     O .rodata	00000010 ADC1_AWD2CR_fields
08012748 g     O .rodata	00000010 DMA1_CMAR5_fields
0800c050 g     O .rodata	00000028 CAN_RDL0R_fields
08013408 g     O .rodata	00000010 DMA1_CPAR4_fields
08010f90 g     O .rodata	0000006c TIM6_registers
080003b0 g     F .text	00000028 CmdAccel
0800e124 g     O .rodata	00000010 RTC_BKP11R_fields
08003394 g     F .text	00000006 HAL_I2C_GetState
080012d4 g     F .text	00000068 SystemInit
0800f404 g     O .rodata	00000050 TIM16_BDTR_fields
0800db6c g     O .rodata	00000078 RTC_ALRMBR_fields
0800e5f4 g     O .rodata	00000018 TIM2_DCR_fields
080133b0 g     O .rodata	00000058 ADC1_CR_fields
08006b60 g     F .text	00000000 _fini
080004f4 g     F .text	0000001c CmdW
0800200c g     F .text	0000000c HAL_PCD_Start
08004e60  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
0800cae8 g     O .rodata	00000028 EXTI_EMR2_fields
0800499c g     F .text	00000012 LSM303DLHC_AccReadID
080090b8 g     O .rodata	00000010 RTC_WUTR_fields
0800ebcc g     O .rodata	00000010 DMA1_CPAR6_fields
080125d8 g     O .rodata	00000010 CRC_INIT_fields
08007ef0 g     O .rodata	00000090 RTC_ISR_fields
08008b88 g     O .rodata	00000018 TIM1_DCR_fields
080085f4 g     O .rodata	00000040 PWR_CR_fields
0800aef0 g     O .rodata	00000038 TIM2_EGR_fields
08005400 g     F .text	0000000c atexit
08012758 g     O .rodata	00000088 OPAMP_OPAMP1_CR_fields
080099b0 g     O .rodata	00000054 FPU_registers
08008c40 g     O .rodata	00000108 EXTI_IMR1_fields
08000bac g     F .text	00000038 _write_r
08009668 g     O .rodata	00000018 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
08012bb0 g     O .rodata	00000030 ADC1_SQR3_fields
08004e60  w    F .text	00000002 DMA1_Channel3_IRQHandler
08013148 g     O .rodata	00000088 DBGMCU_APB1FZ_fields
0800e844 g     O .rodata	00000068 SPI1_CR2_fields
08012c18 g     O .rodata	00000018 ADC1_CALFACT_fields
0801138c g     O .rodata	00000010 RTC_BKP28R_fields
08001c82  w    F .text	00000024 HAL_InitTick
08009840 g     O .rodata	00000028 TIM1_CCR5_fields
08004296 g     F .text	0000000e USBD_LL_SetUSBAddress
08012410 g     O .rodata	00000028 NVIC_IPR12_fields
08017124 g     O .rodata	00000010 LED_PIN
20000628 g     O .data	00000004 _impure_ptr
0800e044 g     O .rodata	00000020 CAN_TDT2R_fields
080108e8 g     O .rodata	00000010 ADC1_JDR4_fields
08010840 g     O .rodata	00000048 TIM15_CR2_fields
0800540c g     F .text	00000154 __sflush_r
0800858c g     O .rodata	00000068 RCC_CFGR_fields
08001ccc  w    F .text	00000010 HAL_IncTick
08008fb0 g     O .rodata	00000030 TIM17_EGR_fields
08004246 g     F .text	0000000e USBD_LL_CloseEP
08004e60  w    F .text	00000002 ADC4_IRQHandler
08010618 g     O .rodata	000000a8 RTC_CR_fields
08003e10 g     F .text	00000012 USBD_CtlContinueSendData
08011e90 g     O .rodata	000000e8 DMA1_ISR_fields
08009c7c g     O .rodata	00000108 CAN_F6R1_fields
08004bbc g     F .text	0000001c L3GD20_ReadID
08004e60  w    F .text	00000002 WWDG_IRQHandler
080030d6  w    F .text	00000002 HAL_I2C_MspInit
08007c28 g     O .rodata	00000108 EXTI_EMR1_fields
0800c450 g     O .rodata	00000028 NVIC_IPR6_fields
08013418 g     O .rodata	00000018 TIM2_CCR3_fields
08010cd8 g     O .rodata	00000068 DMA1_CCR6_fields
0800d944 g     O .rodata	00000088 GPIOA_MODER_fields
08010da0 g     O .rodata	00000088 OPAMP_OPAMP2_CR_fields
0800f16c g     O .rodata	00000080 TIM1_CR2_fields
0800b3cc g     O .rodata	00000018 RTC_PRER_fields
080042a4 g     F .text	0000000e USBD_LL_Transmit
08004e60  w    F .text	00000002 TIM2_IRQHandler
08000210 g     F .text	00000004 my_Loop
08012598 g     O .rodata	00000028 TIM16_CCER_fields
08001f72 g     F .text	0000009a HAL_PCD_Init
200000e4 g     O .data	00000043 USBD_CDC_CfgHSDesc
0800d65c g     O .rodata	00000018 DES_UID1_fields
08017cbc g     O .parsetable	0000000c CmdDecodeE
0800a444 g     O .rodata	00000108 CAN_F26R2_fields
20000000 g       .data	00000000 myTickCount
0800eca4 g     O .rodata	00000108 CAN_F6R2_fields
0800a6ac g     O .rodata	00000108 CAN_F16R1_fields
08007f80 g     O .rodata	00000010 RTC_BKP27R_fields
0800e10c g     O .rodata	00000018 EXTI_RTSR2_fields
08012d20 g     O .rodata	00000030 TIM16_CR2_fields
08009ac4 g     O .rodata	00000078 RTC_ALRMAR_fields
08011014 g     O .rodata	00000010 TIM1_ARR_fields
08003dba g     F .text	0000003a USBD_GetString
08004628 g     F .text	0000001c BSP_LED_Toggle
08009e84 g     O .rodata	00000108 CAN_F22R2_fields
08007a68 g     O .rodata	00000108 CAN_F24R1_fields
08004150 g     F .text	0000000e HAL_PCD_SetupStageCallback
08016ab8 g     O .rodata	00000108 CAN_F5R1_fields
08004e60  w    F .text	00000002 COMP7_IRQHandler
20007fff g       *ABS*	00000000 _estack
08000530 g     F .text	00000104 parse
0800f870 g     O .rodata	00000010 RTC_BKP2R_fields
08004e60  w    F .text	00000002 COMP1_2_3_IRQHandler
0800ea34 g     O .rodata	00000108 CAN_F17R1_fields
08004e60  w    F .text	00000002 EXTI1_IRQHandler
08009868 g     O .rodata	00000068 TIM8_BDTR_fields
0800f0c4 g     O .rodata	00000058 USB_FS_USB_EP1R_fields
08007800 g     O .rodata	000000b8 ADC1_2_CSR_fields
0800ef84 g     O .rodata	00000010 FPU_FPCAR_fields
20000a3c g       .data	00000000 _edata
0800d398 g     O .rodata	00000144 TIM8_registers
0800b584 g     O .rodata	00000010 RTC_BKP30R_fields
0800edac g     O .rodata	00000020 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
0800e4ac g     O .rodata	00000040 TIM16_CR1_fields
08016d14 g     O .rodata	00000108 CAN_F17R2_fields
08009da4 g     O .rodata	00000040 TIM15_CR1_fields
08000e30 g     F .text	000001e4 CmdDecode
0800e064 g     O .rodata	00000010 TIM15_RCR_fields
0800b978 g     O .rodata	00000088 GPIOB_IDR_fields
080079a8 g     O .rodata	00000058 TIM1_CCMR3_Output_fields
0800db5c g     O .rodata	00000010 TIM8_DMAR_fields
08008af4 g     O .rodata	0000006c Flash_registers
0800cc78 g     O .rodata	00000018 TIM16_DCR_fields
08016a28 g     O .rodata	00000048 RCC_APB2RSTR_fields
08000760 g     F .text	00000028 fetch_uint32_arg
08010ffc g     O .rodata	00000018 RTC_ALRMBSSR_fields
08010e38 g     O .rodata	00000048 SYSCFG_RCR_fields
08004e60  w    F .text	00000002 USART2_IRQHandler
08012920 g     O .rodata	00000040 TIM17_CR1_fields
0800f584 g     O .rodata	000001d4 NVIC_registers
08004e60  w    F .text	00000002 COMP4_5_6_IRQHandler
08006780 g     F .text	00000038 __swrite
0800133c g     F .text	000005d4 HAL_RCC_OscConfig
20000a34 g     O .data	00000004 __malloc_trim_threshold
0800dfdc g     O .rodata	00000010 TIM17_CCR1_fields
0800ab88 g     O .rodata	00000030 I2C1_TIMINGR_fields
08011434 g     O .rodata	00000010 USB_FS_BTABLE_fields
0800c7f8 g     O .rodata	00000028 CAN_TDH1R_fields
0800e634 g     O .rodata	000000b0 I2C1_CR1_fields
08000000 g     O .isr_vector	00000000 g_pfnVectors
08003df4 g     F .text	0000001c USBD_CtlSendData
08011864 g     O .rodata	00000108 CAN_F15R1_fields
08010b80 g     O .rodata	00000018 ADC1_2_CDR_fields
08005c2c g     F .text	00000052 _fwalk_reent
0800bc28 g     O .rodata	00000010 TIM6_PSC_fields
080103d0 g     O .rodata	00000010 RTC_BKP15R_fields
0800aa0c g     O .rodata	00000024 PWR_registers
0801183c g     O .rodata	00000028 Flash_SR_fields
08012f88 g     O .rodata	00000010 ADC1_JDR2_fields
0800d794 g     O .rodata	00000010 RTC_BKP20R_fields
200001fc g     O .data	00000004 __ctype_ptr__
0800bbd8 g     O .rodata	00000010 DMA1_CNDTR6_fields
080080ec g     O .rodata	00000108 CAN_F19R2_fields
08004e60  w    F .text	00000002 I2C2_ER_IRQHandler
0800cc90 g     O .rodata	00000048 ADC1_2_CCR_fields
08004e60  w    F .text	00000002 DMA1_Channel2_IRQHandler
08008028 g     O .rodata	000000b4 DAC_registers
080130c0 g     O .rodata	00000088 GPIOA_OSPEEDR_fields
080169f0 g     O .rodata	00000038 TIM8_CCMR2_Input_fields
08005698 g     F .text	00000002 __sfp_lock_release
08007fa0 g     O .rodata	00000050 TIM17_BDTR_fields
0800f55c g     O .rodata	00000028 CAN_RDH1R_fields
0800e934 g     O .rodata	00000068 TIM2_CCER_fields
080125c0 g     O .rodata	00000018 DAC_DHR8RD_fields
08000788 g     F .text	00000020 fetch_string_arg
08004588 g     F .text	00000068 BSP_LED_Init
0800cf38 g     O .rodata	00000088 GPIOB_MODER_fields
08017cb0 g     O .parsetable	0000000c CmdDumpE
080170b0 g     O .rodata	00000010 PLLMULFactorTable
0800af28 g     O .rodata	000000a0 USART1_CR3_fields
08000cdc g     F .text	00000040 DecodeField
08012110 g     O .rodata	00000028 CAN_RI0R_fields
08004e60  w    F .text	00000002 TIM8_BRK_IRQHandler
080097a8 g     O .rodata	00000028 DBGMCU_APB2FZ_fields
08008e70 g     O .rodata	00000010 TIM1_PSC_fields
08000da4 g     F .text	00000044 DecodePrintPeripherals
0800ccd8 g     O .rodata	00000040 TIM15_CCER_fields
08017134 g     O .rodata	00000101 _ctype_
0800f27c g     O .rodata	00000010 DMA1_CMAR7_fields
0800ba20 g     O .rodata	00000028 CAN_RI1R_fields
08012a30 g     O .rodata	00000030 SYSCFG_CFGR2_fields
0800c768 g     O .rodata	00000090 RCC_CIR_fields
08017cec g     O .parsetable	0000000c CmdStatsE
08004e60  w    F .text	00000002 FLASH_IRQHandler
0800ca9c g     O .rodata	00000010 TIM15_DMAR_fields
08012a60 g     O .rodata	00000018 EXTI_FTSR2_fields
0800cb60 g     O .rodata	00000108 CAN_F10R2_fields
0800ab60 g     O .rodata	00000028 NVIC_IPR3_fields
08012c08 g     O .rodata	00000010 DMA1_CNDTR1_fields
08009490 g     O .rodata	00000030 I2C1_TIMEOUTR_fields
08008a04 g     O .rodata	00000050 TIM15_BDTR_fields
080042e4 g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
200012d8 g     O .bss	00000100 USBD_StrDesc
08000ac4 g     F .text	000000e8 TerminalOutputBufferWrite
08004e60  w    F .text	00000002 BusFault_Handler
08004e60  w    F .text	00000002 USART1_IRQHandler
0800cd18 g     O .rodata	00000058 COMP_COMP1_CSR_fields
08016e1c g     O .rodata	00000050 TIM8_EGR_fields
08006a74 g     F .text	000000e0 __smakebuf_r
0800d604 g     O .rodata	00000048 TIM15_SR_fields
080051dc g     F .text	0000005c strlen
0800ab18 g     O .rodata	00000048 RCC_APB2ENR_fields
08004e60  w    F .text	00000002 SPI3_IRQHandler
20001c48 g     O .bss	0000003c TimHandle
0800eeac g     O .rodata	00000068 DMA1_CCR3_fields
0800a3f4 g     O .rodata	00000050 TIM1_CR1_fields
08011b14 g     O .rodata	00000020 IWDG_SR_fields
080129b0 g     O .rodata	00000058 USB_FS_USB_EP6R_fields
0800fb94 g     O .rodata	000000d8 TIM16_registers
08002e46  w    F .text	00000002 HAL_PCDEx_SetConnectionState
0800c9d0 g     O .rodata	000000cc TIM17_registers
08003198 g     F .text	000000f8 HAL_I2C_Mem_Write
080075dc g     O .rodata	000000a0 TIM1_CCER_fields
0800e18c g     O .rodata	00000108 CAN_F3R2_fields
08009a04 g     O .rodata	00000088 DAC_CR_fields
08004e60  w    F .text	00000002 I2C1_ER_IRQHandler
08009610 g     O .rodata	00000058 USB_FS_USB_EP7R_fields
0800d200 g     O .rodata	00000090 I2C1_ISR_fields
08007bb0 g     O .rodata	00000068 TIM1_CCMR2_Output_fields
08009090 g     O .rodata	00000028 NVIC_IPR8_fields
080170a0 g     O .rodata	00000010 PredivFactorTable
08012a78 g     O .rodata	00000010 TSC_IOG3CR_fields
080042b2 g     F .text	0000000e USBD_LL_PrepareReceive
0800b5c4 g     O .rodata	00000010 DMA1_CNDTR3_fields
08004bd8 g     F .text	0000002c L3GD20_RebootCmd
0800875c g     O .rodata	00000108 CAN_F27R1_fields
0800da84 g     O .rodata	00000018 TSC_IER_fields
0800c8e8 g     O .rodata	000000e8 CAN_FFA1R_fields
0800b3b4 g     O .rodata	00000018 TIM8_CNT_fields
08012910 g     O .rodata	00000010 ADC1_AWD3CR_fields
00000000  w      *UND*	00000000 _Jv_RegisterClasses
08012be0 g     O .rodata	00000010 RTC_BKP25R_fields
0800dec4 g     O .rodata	00000108 TSC_IOCCR_fields
0800ec04 g     O .rodata	00000088 OPAMP_OPAMP3_CR_fields
08004052 g     F .text	0000000c USBD_CDC_SetRxBuffer
08016918 g     O .rodata	000000d8 EXTI_SWIER1_fields
08007ee0 g     O .rodata	00000010 TIM16_ARR_fields
0800d77c g     O .rodata	00000018 DBGMCU_IDCODE_fields
0800f900 g     O .rodata	00000028 EXTI_IMR2_fields
08010d90 g     O .rodata	00000010 TIM6_EGR_fields
0800f2e4 g     O .rodata	00000010 SPI1_RXCRCR_fields
08016c70 g     O .rodata	00000010 I2C1_PECR_fields
0800252c g     F .text	000000f4 HAL_PCD_EP_Receive
080167b8 g     O .rodata	00000020 ADC1_OFR3_fields
0800a324 g     O .rodata	00000060 COMP_COMP6_CSR_fields
0800e3d4 g     O .rodata	00000010 RTC_BKP1R_fields
08010a20 g     O .rodata	00000068 TIM8_CCMR1_Output_fields
080104b0 g     O .rodata	00000090 GPIOB_registers
08000d1c g     F .text	0000004c DecodeRegister
0800cb10 g     O .rodata	00000050 TIM8_SMCR_fields
08000c60 g     F .text	00000040 DecodeReadRegister
00000000  w      *UND*	00000000 __register_frame_info
080082d4 g     O .rodata	00000058 CAN_MCR_fields
0800837c g     O .rodata	00000010 DAC_DOR1_fields
08000a4c g     F .text	0000004c TerminalRead
0800b49c g     O .rodata	00000068 TSC_CR_fields
08009480 g     O .rodata	00000010 TIM2_DMAR_fields
08007ff0 g     O .rodata	00000038 TIM8_CCMR1_Input_fields
08004b0a g     F .text	0000001e LSM303DLHC_AccIT1Enable
08008874 g     O .rodata	00000108 CAN_F12R1_fields
08004e60  w    F .text	00000002 USBWakeUp_IRQHandler
08016bd0 g     O .rodata	00000010 TIM16_PSC_fields
08010b60 g     O .rodata	00000010 USART1_RDR_fields
0800f2a4 g     O .rodata	00000040 RCC_BDCR_fields
080111e4 g     O .rodata	00000018 TIM17_DCR_fields
080133a0 g     O .rodata	00000010 NVIC_ISPR1_fields
08008c30 g     O .rodata	00000010 NVIC_ICPR2_fields
08017c8c g     O .parsetable	0000000c CmdAccelE
08012a88 g     O .rodata	00000108 CAN_F21R2_fields
080122a0 g     O .rodata	00000010 DES_UID2_fields
08004042 g     F .text	00000010 USBD_CDC_SetTxBuffer
08009680 g     O .rodata	00000060 SYSCFG_registers
0800cfc0 g     O .rodata	00000088 OPAMP_OPAMP4_CR_fields
08004e60  w    F .text	00000002 DMA2_Channel3_IRQHandler
0800d4dc g     O .rodata	000000d8 EXTI_FTSR1_fields
080043ac g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
0800ce30 g     O .rodata	00000108 CAN_F7R1_fields
080038e2 g     F .text	0000005a USBD_LL_SetupStage
08000458 g     F .text	0000000a Error_Handler
08011aec g     O .rodata	00000018 WWDG_CR_fields
08004e60  w    F .text	00000002 EXTI2_TSC_IRQHandler
08009600 g     O .rodata	00000010 NVIC_STIR_fields
08004e60  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
08010458 g     O .rodata	00000058 TIM8_CCMR3_Output_fields



Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000a3c 	.word	0x20000a3c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006b54 	.word	0x08006b54

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08006b54 	.word	0x08006b54
 80001d8:	20000a40 	.word	0x20000a40
 80001dc:	20000a3c 	.word	0x20000a3c
 80001e0:	00000000 	.word	0x00000000

080001e4 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e4:	b500      	push	{lr}
    push {r1}
 80001e6:	b402      	push	{r1}
    push {r0-r7}
 80001e8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r0, =0
 80001ea:	480b      	ldr	r0, [pc, #44]	; (8000218 <my_Init+0x4>)
    bl   BSP_LED_Toggle           @@ call BSP function
 80001ec:	f004 fa1c 	bl	8004628 <BSP_LED_Toggle>
    pop  {r0-r7}
 80001f0:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001f2:	490a      	ldr	r1, [pc, #40]	; (800021c <my_Init+0x8>)
    ldr  r0, [r1]
 80001f4:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f6:	bc02      	pop	{r1}
    pop  {pc}
 80001f8:	bd00      	pop	{pc}
 80001fa:	bf00      	nop

080001fc <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001fc:	b500      	push	{lr}
    push {r0-r1}
 80001fe:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 8000200:	4906      	ldr	r1, [pc, #24]	; (800021c <my_Init+0x8>)
    ldr  r0, [r1]
 8000202:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 8000204:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000208:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 800020a:	bc03      	pop	{r0, r1}
    pop  {pc}
 800020c:	bd00      	pop	{pc}
 800020e:	bf00      	nop

08000210 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000210:	b500      	push	{lr}
    pop  {pc}
 8000212:	bd00      	pop	{pc}

08000214 <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 8000214:	b500      	push	{lr}
    pop  {pc}
 8000216:	bd00      	pop	{pc}
@@   r0: x
mytest:
    push {lr}
    push {r1}
    push {r0-r7}
    ldr  r0, =0
 8000218:	00000000 	.word	0x00000000
    bl   BSP_LED_Toggle           @@ call BSP function
    pop  {r0-r7}
    ldr  r1, =myTickCount
 800021c:	20000000 	.word	0x20000000

08000220 <memcpy>:
 8000220:	4684      	mov	ip, r0
 8000222:	ea41 0300 	orr.w	r3, r1, r0
 8000226:	f013 0303 	ands.w	r3, r3, #3
 800022a:	d16d      	bne.n	8000308 <memcpy+0xe8>
 800022c:	3a40      	subs	r2, #64	; 0x40
 800022e:	d341      	bcc.n	80002b4 <memcpy+0x94>
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	f851 3b04 	ldr.w	r3, [r1], #4
 8000244:	f840 3b04 	str.w	r3, [r0], #4
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	f851 3b04 	ldr.w	r3, [r1], #4
 8000254:	f840 3b04 	str.w	r3, [r0], #4
 8000258:	f851 3b04 	ldr.w	r3, [r1], #4
 800025c:	f840 3b04 	str.w	r3, [r0], #4
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	f851 3b04 	ldr.w	r3, [r1], #4
 8000294:	f840 3b04 	str.w	r3, [r0], #4
 8000298:	f851 3b04 	ldr.w	r3, [r1], #4
 800029c:	f840 3b04 	str.w	r3, [r0], #4
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	3a40      	subs	r2, #64	; 0x40
 80002b2:	d2bd      	bcs.n	8000230 <memcpy+0x10>
 80002b4:	3230      	adds	r2, #48	; 0x30
 80002b6:	d311      	bcc.n	80002dc <memcpy+0xbc>
 80002b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002bc:	f840 3b04 	str.w	r3, [r0], #4
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002cc:	f840 3b04 	str.w	r3, [r0], #4
 80002d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d4:	f840 3b04 	str.w	r3, [r0], #4
 80002d8:	3a10      	subs	r2, #16
 80002da:	d2ed      	bcs.n	80002b8 <memcpy+0x98>
 80002dc:	320c      	adds	r2, #12
 80002de:	d305      	bcc.n	80002ec <memcpy+0xcc>
 80002e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e4:	f840 3b04 	str.w	r3, [r0], #4
 80002e8:	3a04      	subs	r2, #4
 80002ea:	d2f9      	bcs.n	80002e0 <memcpy+0xc0>
 80002ec:	3204      	adds	r2, #4
 80002ee:	d008      	beq.n	8000302 <memcpy+0xe2>
 80002f0:	07d2      	lsls	r2, r2, #31
 80002f2:	bf1c      	itt	ne
 80002f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002f8:	f800 3b01 	strbne.w	r3, [r0], #1
 80002fc:	d301      	bcc.n	8000302 <memcpy+0xe2>
 80002fe:	880b      	ldrh	r3, [r1, #0]
 8000300:	8003      	strh	r3, [r0, #0]
 8000302:	4660      	mov	r0, ip
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	2a08      	cmp	r2, #8
 800030a:	d313      	bcc.n	8000334 <memcpy+0x114>
 800030c:	078b      	lsls	r3, r1, #30
 800030e:	d08d      	beq.n	800022c <memcpy+0xc>
 8000310:	f010 0303 	ands.w	r3, r0, #3
 8000314:	d08a      	beq.n	800022c <memcpy+0xc>
 8000316:	f1c3 0304 	rsb	r3, r3, #4
 800031a:	1ad2      	subs	r2, r2, r3
 800031c:	07db      	lsls	r3, r3, #31
 800031e:	bf1c      	itt	ne
 8000320:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000324:	f800 3b01 	strbne.w	r3, [r0], #1
 8000328:	d380      	bcc.n	800022c <memcpy+0xc>
 800032a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800032e:	f820 3b02 	strh.w	r3, [r0], #2
 8000332:	e77b      	b.n	800022c <memcpy+0xc>
 8000334:	3a04      	subs	r2, #4
 8000336:	d3d9      	bcc.n	80002ec <memcpy+0xcc>
 8000338:	3a01      	subs	r2, #1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
 8000342:	d2f9      	bcs.n	8000338 <memcpy+0x118>
 8000344:	780b      	ldrb	r3, [r1, #0]
 8000346:	7003      	strb	r3, [r0, #0]
 8000348:	784b      	ldrb	r3, [r1, #1]
 800034a:	7043      	strb	r3, [r0, #1]
 800034c:	788b      	ldrb	r3, [r1, #2]
 800034e:	7083      	strb	r3, [r0, #2]
 8000350:	4660      	mov	r0, ip
 8000352:	4770      	bx	lr

08000354 <CmdLED>:
{
    HAL_IncTick();
}

void CmdLED(int mode)
{
 8000354:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 8000356:	b9f8      	cbnz	r0, 8000398 <CmdLED+0x44>
    return;
  }

  rc = fetch_uint32_arg(&led);
 8000358:	4668      	mov	r0, sp
 800035a:	f000 fa01 	bl	8000760 <fetch_uint32_arg>
  if(rc) {
 800035e:	b108      	cbz	r0, 8000364 <CmdLED+0x10>
    printf("Missing LED index\n");
 8000360:	480f      	ldr	r0, [pc, #60]	; (80003a0 <CmdLED+0x4c>)
 8000362:	e004      	b.n	800036e <CmdLED+0x1a>
    return;
  }
    
  rc = fetch_uint32_arg(&val);
 8000364:	a801      	add	r0, sp, #4
 8000366:	f000 f9fb 	bl	8000760 <fetch_uint32_arg>
  if(rc) {
 800036a:	b118      	cbz	r0, 8000374 <CmdLED+0x20>
    printf("Missing state value, 0 for Off, 1 for On\n");
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <CmdLED+0x50>)
 800036e:	f004 fe31 	bl	8004fd4 <puts>
    return;
 8000372:	e011      	b.n	8000398 <CmdLED+0x44>
  }
  
  if((led < 3) || (led > 10)) {
 8000374:	9900      	ldr	r1, [sp, #0]
 8000376:	1ecb      	subs	r3, r1, #3
 8000378:	2b07      	cmp	r3, #7
 800037a:	d903      	bls.n	8000384 <CmdLED+0x30>
    printf("Led index of %u is out of the range (3..10)\n",
 800037c:	480a      	ldr	r0, [pc, #40]	; (80003a8 <CmdLED+0x54>)
 800037e:	f000 ff83 	bl	8001288 <printf>
	   (unsigned int)led);
    return;
 8000382:	e009      	b.n	8000398 <CmdLED+0x44>
 8000384:	4a09      	ldr	r2, [pc, #36]	; (80003ac <CmdLED+0x58>)
  }

  led -= 3;
  if(val) {
 8000386:	9901      	ldr	r1, [sp, #4]
    printf("Led index of %u is out of the range (3..10)\n",
	   (unsigned int)led);
    return;
  }

  led -= 3;
 8000388:	9300      	str	r3, [sp, #0]
  if(val) {
    BSP_LED_On(LEDs[led]);
 800038a:	5cd0      	ldrb	r0, [r2, r3]
	   (unsigned int)led);
    return;
  }

  led -= 3;
  if(val) {
 800038c:	b111      	cbz	r1, 8000394 <CmdLED+0x40>
    BSP_LED_On(LEDs[led]);
 800038e:	f004 f92f 	bl	80045f0 <BSP_LED_On>
 8000392:	e001      	b.n	8000398 <CmdLED+0x44>
  } else {
    BSP_LED_Off(LEDs[led]);
 8000394:	f004 f93a 	bl	800460c <BSP_LED_Off>
  }

} 
 8000398:	b003      	add	sp, #12
 800039a:	f85d fb04 	ldr.w	pc, [sp], #4
 800039e:	bf00      	nop
 80003a0:	08006b6c 	.word	0x08006b6c
 80003a4:	08006b7e 	.word	0x08006b7e
 80003a8:	08006ba7 	.word	0x08006ba7
 80003ac:	08006d3e 	.word	0x08006d3e

080003b0 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 80003b0:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80003b2:	b958      	cbnz	r0, 80003cc <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 80003b4:	4668      	mov	r0, sp
 80003b6:	f004 faaf 	bl	8004918 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <CmdAccel+0x24>)
 80003bc:	f9bd 1000 	ldrsh.w	r1, [sp]
 80003c0:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80003c4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80003c8:	f000 ff5e 	bl	8001288 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 80003cc:	b003      	add	sp, #12
 80003ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80003d2:	bf00      	nop
 80003d4:	08006bd4 	.word	0x08006bd4

080003d8 <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 80003d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80003da:	b9f8      	cbnz	r0, 800041c <CmdGyro+0x44>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 80003dc:	a801      	add	r0, sp, #4
 80003de:	f004 fac5 	bl	800496c <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 80003e2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8000424 <CmdGyro+0x4c>
 80003e6:	eddd 6a01 	vldr	s13, [sp, #4]
	 (int)(xyz[1]*256),
 80003ea:	ed9d 7a02 	vldr	s14, [sp, #8]
	 (int)(xyz[2]*256));
 80003ee:	eddd 7a03 	vldr	s15, [sp, #12]
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 80003f2:	480d      	ldr	r0, [pc, #52]	; (8000428 <CmdGyro+0x50>)
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 80003f4:	ee66 6a86 	vmul.f32	s13, s13, s12
	 (int)(xyz[1]*256),
 80003f8:	ee27 7a06 	vmul.f32	s14, s14, s12
	 (int)(xyz[2]*256));
 80003fc:	ee67 7a86 	vmul.f32	s15, s15, s12
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 8000400:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8000404:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800040c:	ee16 1a90 	vmov	r1, s13
 8000410:	ee17 2a10 	vmov	r2, s14
 8000414:	ee17 3a90 	vmov	r3, s15
 8000418:	f000 ff36 	bl	8001288 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 800041c:	b005      	add	sp, #20
 800041e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000422:	bf00      	nop
 8000424:	43800000 	.word	0x43800000
 8000428:	08006c07 	.word	0x08006c07

0800042c <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 800042c:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 800042e:	b958      	cbnz	r0, 8000448 <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 8000430:	f004 f942 	bl	80046b8 <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <CmdButton+0x20>)
 8000436:	4906      	ldr	r1, [pc, #24]	; (8000450 <CmdButton+0x24>)
 8000438:	2800      	cmp	r0, #0
 800043a:	bf18      	it	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <CmdButton+0x28>)
	 button ? "Pressed" : "Released");

  return;
}
 8000440:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
  
  printf("Button is currently: %s\n",
 8000444:	f000 bf20 	b.w	8001288 <printf>
 8000448:	bd08      	pop	{r3, pc}
 800044a:	bf00      	nop
 800044c:	08006c36 	.word	0x08006c36
 8000450:	08006c3e 	.word	0x08006c3e
 8000454:	08006c47 	.word	0x08006c47

08000458 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 800045a:	2003      	movs	r0, #3
 800045c:	f004 f8c8 	bl	80045f0 <BSP_LED_On>
  /* Infinite loop */
  while(1)
  {
  }
 8000460:	e7fe      	b.n	8000460 <Error_Handler+0x8>
	...

08000464 <main>:

/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);

int main(int argc, char **argv)
{
 8000464:	b510      	push	{r4, lr}
 8000466:	b090      	sub	sp, #64	; 0x40
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000468:	2301      	movs	r3, #1
 800046a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800046c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000476:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000478:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800047a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800047c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000480:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000482:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8000484:	f000 ff5a 	bl	800133c <HAL_RCC_OscConfig>
 8000488:	bb10      	cbnz	r0, 80004d0 <main+0x6c>
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800048a:	230f      	movs	r3, #15
 800048c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8000490:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000494:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8000496:	4621      	mov	r1, r4
 8000498:	a801      	add	r0, sp, #4
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 800049c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 800049e:	f001 fa37 	bl	8001910 <HAL_RCC_ClockConfig>
 80004a2:	4604      	mov	r4, r0
 80004a4:	b9a0      	cbnz	r0, 80004d0 <main+0x6c>
  uint32_t i;
  uint8_t accelRc, gyroRc;
  /* Configure the system clock */
  SystemClock_Config();

  HAL_Init();
 80004a6:	f001 fbff 	bl	8001ca8 <HAL_Init>

  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
 80004aa:	f000 fa91 	bl	80009d0 <TerminalInit>
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
    BSP_LED_Init(LEDs[i]);
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <main+0x80>)
 80004b0:	5d18      	ldrb	r0, [r3, r4]
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 80004b2:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 80004b4:	f004 f868 	bl	8004588 <BSP_LED_Init>
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 80004b8:	2c08      	cmp	r4, #8
 80004ba:	d1f8      	bne.n	80004ae <main+0x4a>
    BSP_LED_Init(LEDs[i]);
  }

  /* Initialize the pushbutton */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80004bc:	2000      	movs	r0, #0
 80004be:	4601      	mov	r1, r0
 80004c0:	f004 f8c0 	bl	8004644 <BSP_PB_Init>

  /* Initialize the Accelerometer */
  accelRc = BSP_ACCELERO_Init();
 80004c4:	f004 fa10 	bl	80048e8 <BSP_ACCELERO_Init>
  if(accelRc != ACCELERO_OK) {
 80004c8:	b120      	cbz	r0, 80004d4 <main+0x70>
    printf("Failed to initialize acceleromter\n");
 80004ca:	4807      	ldr	r0, [pc, #28]	; (80004e8 <main+0x84>)
 80004cc:	f004 fd82 	bl	8004fd4 <puts>
    Error_Handler();
 80004d0:	f7ff ffc2 	bl	8000458 <Error_Handler>
  }

  /* Initialize the Gyroscope */
  gyroRc = BSP_GYRO_Init();
 80004d4:	f004 fa28 	bl	8004928 <BSP_GYRO_Init>
  if(gyroRc != GYRO_OK) {
 80004d8:	b108      	cbz	r0, 80004de <main+0x7a>
    printf("Failed to initialize Gyroscope\n");
 80004da:	4804      	ldr	r0, [pc, #16]	; (80004ec <main+0x88>)
 80004dc:	e7f6      	b.n	80004cc <main+0x68>
    Error_Handler();
  }

  while(1) {
    TaskInput();
 80004de:	f000 f8a9 	bl	8000634 <TaskInput>
  }
 80004e2:	e7fc      	b.n	80004de <main+0x7a>
 80004e4:	08006d3e 	.word	0x08006d3e
 80004e8:	08006c60 	.word	0x08006c60
 80004ec:	08006c82 	.word	0x08006c82

080004f0 <SysTick_Handler>:
  }
}

void SysTick_Handler(void)
{
    HAL_IncTick();
 80004f0:	f001 bbec 	b.w	8001ccc <HAL_IncTick>

080004f4 <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 80004f4:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 80004f6:	b940      	cbnz	r0, 800050a <CmdW+0x16>

  fetch_uint32_arg(&addr);
 80004f8:	4668      	mov	r0, sp
 80004fa:	f000 f931 	bl	8000760 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 80004fe:	a801      	add	r0, sp, #4
 8000500:	f000 f92e 	bl	8000760 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 8000504:	9b00      	ldr	r3, [sp, #0]
 8000506:	9a01      	ldr	r2, [sp, #4]
 8000508:	601a      	str	r2, [r3, #0]
}
 800050a:	b003      	add	sp, #12
 800050c:	f85d fb04 	ldr.w	pc, [sp], #4

08000510 <CmdR>:
#include "common.h"



void CmdR(int mode)
{
 8000510:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr;

  if(mode != CMD_INTERACTIVE) return;
 8000512:	b938      	cbnz	r0, 8000524 <CmdR+0x14>

  fetch_uint32_arg(&addr);
 8000514:	a801      	add	r0, sp, #4
 8000516:	f000 f923 	bl	8000760 <fetch_uint32_arg>

  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <CmdR+0x1c>)
 800051e:	680a      	ldr	r2, [r1, #0]
 8000520:	f000 feb2 	bl	8001288 <printf>
	 (unsigned int)(*((uint32_t *)addr)));
}
 8000524:	b003      	add	sp, #12
 8000526:	f85d fb04 	ldr.w	pc, [sp], #4
 800052a:	bf00      	nop
 800052c:	08006d46 	.word	0x08006d46

08000530 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 8000530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000534:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 8000536:	b908      	cbnz	r0, 800053c <parse+0xc>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 8000538:	4833      	ldr	r0, [pc, #204]	; (8000608 <parse+0xd8>)
 800053a:	e020      	b.n	800057e <parse+0x4e>
    return -1;
  }

  if(len==0) {
 800053c:	b909      	cbnz	r1, 8000542 <parse+0x12>
    printf("len == 0 in %s\n",__FUNCTION__);
 800053e:	4833      	ldr	r0, [pc, #204]	; (800060c <parse+0xdc>)
 8000540:	e01d      	b.n	800057e <parse+0x4e>
    return -1;
  }

  if(table == NULL) {
 8000542:	b122      	cbz	r2, 800054e <parse+0x1e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8000544:	4b32      	ldr	r3, [pc, #200]	; (8000610 <parse+0xe0>)
 8000546:	1e4c      	subs	r4, r1, #1
 8000548:	681e      	ldr	r6, [r3, #0]
 800054a:	4603      	mov	r3, r0
 800054c:	e00a      	b.n	8000564 <parse+0x34>
    printf("len == 0 in %s\n",__FUNCTION__);
    return -1;
  }

  if(table == NULL) {
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 800054e:	4831      	ldr	r0, [pc, #196]	; (8000614 <parse+0xe4>)
 8000550:	e015      	b.n	800057e <parse+0x4e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8000552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000556:	2a00      	cmp	r2, #0
 8000558:	d04d      	beq.n	80005f6 <parse+0xc6>
 800055a:	4432      	add	r2, r6
 800055c:	3c01      	subs	r4, #1
 800055e:	7852      	ldrb	r2, [r2, #1]
 8000560:	0712      	lsls	r2, r2, #28
 8000562:	d54b      	bpl.n	80005fc <parse+0xcc>
 8000564:	1c67      	adds	r7, r4, #1
 8000566:	4618      	mov	r0, r3
 8000568:	4621      	mov	r1, r4
 800056a:	d1f2      	bne.n	8000552 <parse+0x22>
  if((i==0) || (*buf==0)) {
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d047      	beq.n	8000602 <parse+0xd2>
       __FUNCTION__);
#endif
    return -1;
  }
	
  p = strtok(buf,SEPS);
 8000572:	4929      	ldr	r1, [pc, #164]	; (8000618 <parse+0xe8>)
 8000574:	f004 fe60 	bl	8005238 <strtok>
  if(p==NULL) {
 8000578:	4606      	mov	r6, r0
 800057a:	b910      	cbnz	r0, 8000582 <parse+0x52>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 800057c:	4827      	ldr	r0, [pc, #156]	; (800061c <parse+0xec>)
 800057e:	4928      	ldr	r1, [pc, #160]	; (8000620 <parse+0xf0>)
 8000580:	e037      	b.n	80005f2 <parse+0xc2>
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 8000582:	4928      	ldr	r1, [pc, #160]	; (8000624 <parse+0xf4>)
 8000584:	f004 fdaa 	bl	80050dc <strcasecmp>
 8000588:	4604      	mov	r4, r0
 800058a:	b9a0      	cbnz	r0, 80005b6 <parse+0x86>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 800058c:	4922      	ldr	r1, [pc, #136]	; (8000618 <parse+0xe8>)
 800058e:	f004 fe53 	bl	8005238 <strtok>
    if(p == NULL) {
 8000592:	4606      	mov	r6, r0
 8000594:	b990      	cbnz	r0, 80005bc <parse+0x8c>
 8000596:	350c      	adds	r5, #12
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
 8000598:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 800059c:	b389      	cbz	r1, 8000602 <parse+0xd2>
	if(t->help != NULL) {
 800059e:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80005a2:	b11a      	cbz	r2, 80005ac <parse+0x7c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 80005a4:	4820      	ldr	r0, [pc, #128]	; (8000628 <parse+0xf8>)
 80005a6:	f000 fe6f 	bl	8001288 <printf>
 80005aa:	e7f4      	b.n	8000596 <parse+0x66>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 80005ac:	f855 3c08 	ldr.w	r3, [r5, #-8]
 80005b0:	2001      	movs	r0, #1
 80005b2:	4798      	blx	r3
 80005b4:	e7ef      	b.n	8000596 <parse+0x66>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 80005b6:	f04f 0800 	mov.w	r8, #0
 80005ba:	e009      	b.n	80005d0 <parse+0xa0>
      }
      return 0;
    } else {
      /* The user has asked for long help, call the function
       * for help */
      arg = CMD_LONG_HELP;
 80005bc:	f04f 0802 	mov.w	r8, #2
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 80005c0:	e006      	b.n	80005d0 <parse+0xa0>
    if(strcasecmp(p,t->cmdname) == 0) {
 80005c2:	4630      	mov	r0, r6
 80005c4:	4639      	mov	r1, r7
 80005c6:	f004 fd89 	bl	80050dc <strcasecmp>
 80005ca:	4604      	mov	r4, r0
 80005cc:	b120      	cbz	r0, 80005d8 <parse+0xa8>
      arg = CMD_LONG_HELP;
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 80005ce:	350c      	adds	r5, #12
 80005d0:	682f      	ldr	r7, [r5, #0]
 80005d2:	2f00      	cmp	r7, #0
 80005d4:	d1f5      	bne.n	80005c2 <parse+0x92>
 80005d6:	e00a      	b.n	80005ee <parse+0xbe>
    if(strcasecmp(p,t->cmdname) == 0) {
      /* Got a match, call the function */
      if(arg == CMD_LONG_HELP) {	
 80005d8:	f1b8 0f00 	cmp.w	r8, #0
 80005dc:	d003      	beq.n	80005e6 <parse+0xb6>
	printf("%s:\n",t->cmdname);
 80005de:	4813      	ldr	r0, [pc, #76]	; (800062c <parse+0xfc>)
 80005e0:	4639      	mov	r1, r7
 80005e2:	f000 fe51 	bl	8001288 <printf>
      }
      t->func(arg);
 80005e6:	686b      	ldr	r3, [r5, #4]
 80005e8:	4640      	mov	r0, r8
 80005ea:	4798      	blx	r3
      return 0;
 80005ec:	e009      	b.n	8000602 <parse+0xd2>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 80005ee:	4810      	ldr	r0, [pc, #64]	; (8000630 <parse+0x100>)
 80005f0:	4631      	mov	r1, r6
 80005f2:	f000 fe49 	bl	8001288 <printf>
  if((i==0) || (*buf==0)) {
#if 0
    printf("End of buffer reached while discarding whitespace in %s()\n",
       __FUNCTION__);
#endif
    return -1;
 80005f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80005fa:	e002      	b.n	8000602 <parse+0xd2>


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
  if((i==0) || (*buf==0)) {
 80005fc:	2900      	cmp	r1, #0
 80005fe:	d1b8      	bne.n	8000572 <parse+0x42>
 8000600:	e7f9      	b.n	80005f6 <parse+0xc6>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
  return -1;
}
 8000602:	4620      	mov	r0, r4
 8000604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000608:	08006d91 	.word	0x08006d91
 800060c:	08006db2 	.word	0x08006db2
 8000610:	200001fc 	.word	0x200001fc
 8000614:	08006dc2 	.word	0x08006dc2
 8000618:	08006de5 	.word	0x08006de5
 800061c:	08006dec 	.word	0x08006dec
 8000620:	08006e75 	.word	0x08006e75
 8000624:	08006e1c 	.word	0x08006e1c
 8000628:	08006e21 	.word	0x08006e21
 800062c:	08006e2d 	.word	0x08006e2d
 8000630:	08006e32 	.word	0x08006e32

08000634 <TaskInput>:
char input[BUFFER_LEN];
char input_b[BUFFER_LEN];

/* Task to handle input */
void TaskInput(void)
{
 8000634:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static unsigned int saved = 0;
  static char *buf = input;
  static uint32_t printPrompt = 1;

  /* Do we have to print the prompt? */
  if(printPrompt) {
 8000636:	4d3f      	ldr	r5, [pc, #252]	; (8000734 <TaskInput+0x100>)
 8000638:	682b      	ldr	r3, [r5, #0]
 800063a:	b123      	cbz	r3, 8000646 <TaskInput+0x12>
    printf("ARMON>");
 800063c:	483e      	ldr	r0, [pc, #248]	; (8000738 <TaskInput+0x104>)
 800063e:	f000 fe23 	bl	8001288 <printf>
    printPrompt = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	602b      	str	r3, [r5, #0]
  }

  /* Get the next character */
  rc = TerminalReadAnyNonBlock(&c);
 8000646:	f10d 0007 	add.w	r0, sp, #7
 800064a:	f000 fa32 	bl	8000ab2 <TerminalReadAnyNonBlock>
  if(rc) {
 800064e:	2800      	cmp	r0, #0
 8000650:	d16e      	bne.n	8000730 <TaskInput+0xfc>
  }

  /* We have a character to process */
  /* printf("Got:'%c' %d\n",c,c); */
  /* Check for simple line control characters */
  if(((c == 010) || (c == 0x7f)) && count) {
 8000652:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000656:	2b08      	cmp	r3, #8
 8000658:	d001      	beq.n	800065e <TaskInput+0x2a>
 800065a:	2b7f      	cmp	r3, #127	; 0x7f
 800065c:	d10d      	bne.n	800067a <TaskInput+0x46>
 800065e:	4c37      	ldr	r4, [pc, #220]	; (800073c <TaskInput+0x108>)
 8000660:	6822      	ldr	r2, [r4, #0]
 8000662:	b152      	cbz	r2, 800067a <TaskInput+0x46>
    /* User pressed backspace */
    printf("\010 \010"); /* Obliterate character */
 8000664:	4836      	ldr	r0, [pc, #216]	; (8000740 <TaskInput+0x10c>)
 8000666:	f000 fe0f 	bl	8001288 <printf>
    buf--;     /* Then remove it from the buffer */
 800066a:	4a36      	ldr	r2, [pc, #216]	; (8000744 <TaskInput+0x110>)
 800066c:	6813      	ldr	r3, [r2, #0]
 800066e:	3b01      	subs	r3, #1
 8000670:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8000672:	6823      	ldr	r3, [r4, #0]
 8000674:	3b01      	subs	r3, #1
 8000676:	6023      	str	r3, [r4, #0]
 8000678:	e05a      	b.n	8000730 <TaskInput+0xfc>
  } else if(c == '!') { /* '!' repeats the last command */
 800067a:	2b21      	cmp	r3, #33	; 0x21
 800067c:	d115      	bne.n	80006aa <TaskInput+0x76>
    if(saved) {  /* But only if we have something saved */
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <TaskInput+0x114>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d054      	beq.n	8000730 <TaskInput+0xfc>
      strcpy(input,input_b);  /* Restore the command */
 8000686:	4c31      	ldr	r4, [pc, #196]	; (800074c <TaskInput+0x118>)
 8000688:	4931      	ldr	r1, [pc, #196]	; (8000750 <TaskInput+0x11c>)
 800068a:	4620      	mov	r0, r4
 800068c:	f004 fd48 	bl	8005120 <strcpy>
      printf("%s",input);
 8000690:	4621      	mov	r1, r4
 8000692:	4830      	ldr	r0, [pc, #192]	; (8000754 <TaskInput+0x120>)
 8000694:	f000 fdf8 	bl	8001288 <printf>
      count = strlen(input);
 8000698:	4620      	mov	r0, r4
 800069a:	f004 fd9f 	bl	80051dc <strlen>
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <TaskInput+0x108>)
 80006a0:	6018      	str	r0, [r3, #0]
      buf = input+count;
 80006a2:	4b28      	ldr	r3, [pc, #160]	; (8000744 <TaskInput+0x110>)
 80006a4:	4404      	add	r4, r0
 80006a6:	601c      	str	r4, [r3, #0]
      goto parseme;
 80006a8:	e025      	b.n	80006f6 <TaskInput+0xc2>
    }
  } else if(isprint((unsigned int)c)) {
 80006aa:	4a2b      	ldr	r2, [pc, #172]	; (8000758 <TaskInput+0x124>)
 80006ac:	6812      	ldr	r2, [r2, #0]
 80006ae:	441a      	add	r2, r3
 80006b0:	7852      	ldrb	r2, [r2, #1]
 80006b2:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 80006b6:	d012      	beq.n	80006de <TaskInput+0xaa>
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
 80006b8:	4920      	ldr	r1, [pc, #128]	; (800073c <TaskInput+0x108>)
 80006ba:	680a      	ldr	r2, [r1, #0]
 80006bc:	2a4f      	cmp	r2, #79	; 0x4f
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 80006be:	bf9f      	itttt	ls
 80006c0:	4c20      	ldrls	r4, [pc, #128]	; (8000744 <TaskInput+0x110>)
 80006c2:	6820      	ldrls	r0, [r4, #0]
 80006c4:	7003      	strbls	r3, [r0, #0]
 80006c6:	1c45      	addls	r5, r0, #1
      count++;
 80006c8:	bf97      	itett	ls
 80006ca:	3201      	addls	r2, #1
    }
  } else if(isprint((unsigned int)c)) {
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
 80006cc:	2007      	movhi	r0, #7
      return;
    } else {
      *buf++ = c;
      count++;
      /* Echo it back to the user */
      printf("%c",c);
 80006ce:	f89d 0007 	ldrbls.w	r0, [sp, #7]
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 80006d2:	6025      	strls	r5, [r4, #0]
      count++;
 80006d4:	bf98      	it	ls
 80006d6:	600a      	strls	r2, [r1, #0]
      /* Echo it back to the user */
      printf("%c",c);
 80006d8:	f004 fc40 	bl	8004f5c <putchar>
 80006dc:	e028      	b.n	8000730 <TaskInput+0xfc>
    }
  } else if(c == '\r') {
 80006de:	2b0d      	cmp	r3, #13
 80006e0:	d126      	bne.n	8000730 <TaskInput+0xfc>
    /* NULL Terminate anything we have received */
    *buf = '\0';
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <TaskInput+0x110>)
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 80006e4:	481a      	ldr	r0, [pc, #104]	; (8000750 <TaskInput+0x11c>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 80006e6:	681b      	ldr	r3, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 80006e8:	4918      	ldr	r1, [pc, #96]	; (800074c <TaskInput+0x118>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 80006ea:	701a      	strb	r2, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 80006ec:	f004 fd18 	bl	8005120 <strcpy>
    saved = 1;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <TaskInput+0x114>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
  parseme:
    /* The user pressed enter, parse the command */
    printf("\n");
 80006f6:	200a      	movs	r0, #10
 80006f8:	4c12      	ldr	r4, [pc, #72]	; (8000744 <TaskInput+0x110>)
 80006fa:	f004 fc2f 	bl	8004f5c <putchar>
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <TaskInput+0x108>)
 8000700:	6820      	ldr	r0, [r4, #0]
 8000702:	681e      	ldr	r6, [r3, #0]
 8000704:	4602      	mov	r2, r0
 8000706:	1a31      	subs	r1, r6, r0
 8000708:	4411      	add	r1, r2
 800070a:	294f      	cmp	r1, #79	; 0x4f
 800070c:	f04f 0100 	mov.w	r1, #0
 8000710:	d802      	bhi.n	8000718 <TaskInput+0xe4>
 8000712:	f802 1b01 	strb.w	r1, [r2], #1
 8000716:	e7f6      	b.n	8000706 <TaskInput+0xd2>
    count = 0;
 8000718:	6019      	str	r1, [r3, #0]
    parse(input, sizeof(input), Commands);
 800071a:	4e0c      	ldr	r6, [pc, #48]	; (800074c <TaskInput+0x118>)
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <TaskInput+0x128>)
 800071e:	6022      	str	r2, [r4, #0]
 8000720:	4630      	mov	r0, r6
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	2150      	movs	r1, #80	; 0x50
 8000726:	f7ff ff03 	bl	8000530 <parse>
    buf = input;
    printPrompt = 1;
 800072a:	2301      	movs	r3, #1
    printf("\n");
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
    count = 0;
    parse(input, sizeof(input), Commands);
    buf = input;
 800072c:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 800072e:	602b      	str	r3, [r5, #0]
  }
}
 8000730:	b002      	add	sp, #8
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	20000008 	.word	0x20000008
 8000738:	08006e67 	.word	0x08006e67
 800073c:	20000a58 	.word	0x20000a58
 8000740:	08006e6e 	.word	0x08006e6e
 8000744:	20000004 	.word	0x20000004
 8000748:	20000a5c 	.word	0x20000a5c
 800074c:	20000ee8 	.word	0x20000ee8
 8000750:	20000e98 	.word	0x20000e98
 8000754:	08006e72 	.word	0x08006e72
 8000758:	200001fc 	.word	0x200001fc
 800075c:	2000000c 	.word	0x2000000c

08000760 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8000760:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8000762:	4908      	ldr	r1, [pc, #32]	; (8000784 <fetch_uint32_arg+0x24>)
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8000764:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 8000766:	2000      	movs	r0, #0
 8000768:	f004 fd66 	bl	8005238 <strtok>
  if(p == NULL) {
 800076c:	b130      	cbz	r0, 800077c <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 800076e:	2100      	movs	r1, #0
 8000770:	460a      	mov	r2, r1
 8000772:	f004 fe2f 	bl	80053d4 <strtoul>
 8000776:	6020      	str	r0, [r4, #0]
  return 0;
 8000778:	2000      	movs	r0, #0
 800077a:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 800077c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
  return 0;
}     
 8000780:	bd10      	pop	{r4, pc}
 8000782:	bf00      	nop
 8000784:	08006de5 	.word	0x08006de5

08000788 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8000788:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 800078a:	4906      	ldr	r1, [pc, #24]	; (80007a4 <fetch_string_arg+0x1c>)
  return 0;
}     

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 800078c:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 800078e:	2000      	movs	r0, #0
 8000790:	f004 fd52 	bl	8005238 <strtok>
  if(p == NULL) {
 8000794:	b110      	cbz	r0, 800079c <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 8000796:	6020      	str	r0, [r4, #0]
  return 0;
 8000798:	2000      	movs	r0, #0
 800079a:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 800079c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = p;
  return 0;
}
 80007a0:	bd10      	pop	{r4, pc}
 80007a2:	bf00      	nop
 80007a4:	08006de5 	.word	0x08006de5

080007a8 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 80007a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007ac:	4680      	mov	r8, r0
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	4692      	mov	sl, r2
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 80007b2:	460d      	mov	r5, r1
 80007b4:	2900      	cmp	r1, #0
 80007b6:	d044      	beq.n	8000842 <DumpBuffer+0x9a>
 80007b8:	ac03      	add	r4, sp, #12
 80007ba:	eb00 0901 	add.w	r9, r0, r1
 80007be:	4606      	mov	r6, r0
 80007c0:	4627      	mov	r7, r4
 80007c2:	ebc8 010a 	rsb	r1, r8, sl

  p = buffer;
  bufp = buf;
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
 80007c6:	454e      	cmp	r6, r9
 80007c8:	4431      	add	r1, r6
 80007ca:	ebc8 0306 	rsb	r3, r8, r6
 80007ce:	d025      	beq.n	800081c <DumpBuffer+0x74>
    if((i% BYTES_PER_LINE) == 0) {
 80007d0:	f013 0b0f 	ands.w	fp, r3, #15
 80007d4:	d103      	bne.n	80007de <DumpBuffer+0x36>
      printf("%08x:",(unsigned int)address);
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <DumpBuffer+0xa0>)
 80007d8:	f000 fd56 	bl	8001288 <printf>
      bufp = buf;
 80007dc:	463c      	mov	r4, r7
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <DumpBuffer+0xa4>)
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
      bufp = buf;
    }
    /* Read the value to print */
    c = *p++;
 80007e0:	f816 1b01 	ldrb.w	r1, [r6], #1
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 80007e4:	681b      	ldr	r3, [r3, #0]
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 80007e6:	481a      	ldr	r0, [pc, #104]	; (8000850 <DumpBuffer+0xa8>)
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 80007e8:	440b      	add	r3, r1
 80007ea:	785b      	ldrb	r3, [r3, #1]
 80007ec:	f013 0f97 	tst.w	r3, #151	; 0x97
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 80007f0:	bf08      	it	eq
 80007f2:	222e      	moveq	r2, #46	; 0x2e
 80007f4:	f104 0301 	add.w	r3, r4, #1
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
      *bufp++ = c; /* Stick in the character */
 80007f8:	bf14      	ite	ne
 80007fa:	7021      	strbne	r1, [r4, #0]
    } else {
      *bufp++ = '.';
 80007fc:	7022      	strbeq	r2, [r4, #0]
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	461c      	mov	r4, r3
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8000802:	f000 fd41 	bl	8001288 <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8000806:	f1bb 0f0f 	cmp.w	fp, #15
 800080a:	9b01      	ldr	r3, [sp, #4]
 800080c:	d1d9      	bne.n	80007c2 <DumpBuffer+0x1a>
      *bufp = '\0';  /* NULL terminate buffer */
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 8000812:	4639      	mov	r1, r7
 8000814:	480f      	ldr	r0, [pc, #60]	; (8000854 <DumpBuffer+0xac>)
 8000816:	f000 fd37 	bl	8001288 <printf>
 800081a:	e7d2      	b.n	80007c2 <DumpBuffer+0x1a>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 800081c:	2300      	movs	r3, #0
  if(count % BYTES_PER_LINE) {
 800081e:	f015 050f 	ands.w	r5, r5, #15
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8000822:	7023      	strb	r3, [r4, #0]
  if(count % BYTES_PER_LINE) {
 8000824:	d00d      	beq.n	8000842 <DumpBuffer+0x9a>
 8000826:	461c      	mov	r4, r3
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8000828:	f1c5 0310 	rsb	r3, r5, #16
 800082c:	429c      	cmp	r4, r3
 800082e:	d204      	bcs.n	800083a <DumpBuffer+0x92>
      printf("   ");
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <DumpBuffer+0xb0>)
 8000832:	f000 fd29 	bl	8001288 <printf>
  }

  /* dump out to EOL */
  *bufp='\0';
  if(count % BYTES_PER_LINE) {
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8000836:	3401      	adds	r4, #1
 8000838:	e7f6      	b.n	8000828 <DumpBuffer+0x80>
      printf("   ");
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 800083a:	4806      	ldr	r0, [pc, #24]	; (8000854 <DumpBuffer+0xac>)
 800083c:	4639      	mov	r1, r7
 800083e:	f000 fd23 	bl	8001288 <printf>
  }



}
 8000842:	b009      	add	sp, #36	; 0x24
 8000844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000848:	08006e7b 	.word	0x08006e7b
 800084c:	200001fc 	.word	0x200001fc
 8000850:	08006e81 	.word	0x08006e81
 8000854:	08006e87 	.word	0x08006e87
 8000858:	08006e8d 	.word	0x08006e8d

0800085c <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 800085c:	2801      	cmp	r0, #1


}

void CmdDump(int action)
{
 800085e:	b538      	push	{r3, r4, r5, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8000860:	d01d      	beq.n	800089e <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 8000862:	2802      	cmp	r0, #2
 8000864:	4c0e      	ldr	r4, [pc, #56]	; (80008a0 <CmdDump+0x44>)
 8000866:	4d0f      	ldr	r5, [pc, #60]	; (80008a4 <CmdDump+0x48>)
 8000868:	d109      	bne.n	800087e <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 800086a:	480f      	ldr	r0, [pc, #60]	; (80008a8 <CmdDump+0x4c>)
 800086c:	f004 fbb2 	bl	8004fd4 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8000870:	6821      	ldr	r1, [r4, #0]
 8000872:	682a      	ldr	r2, [r5, #0]
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 8000876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 800087a:	f000 bd05 	b.w	8001288 <printf>
	   (unsigned int)address, (unsigned int)count);
    return;
  }

  /* Fetch address, defaut to last address if missing */
  rc = fetch_uint32_arg(&address);
 800087e:	4620      	mov	r0, r4
 8000880:	f7ff ff6e 	bl	8000760 <fetch_uint32_arg>
  if(rc == 0) {
 8000884:	b910      	cbnz	r0, 800088c <CmdDump+0x30>
    /* Fetch count, default to last count if missing */
    fetch_uint32_arg(&count);
 8000886:	4628      	mov	r0, r5
 8000888:	f7ff ff6a 	bl	8000760 <fetch_uint32_arg>
  }

  DumpBuffer((uint8_t *)address, count, address);
 800088c:	6820      	ldr	r0, [r4, #0]
 800088e:	6829      	ldr	r1, [r5, #0]
 8000890:	4602      	mov	r2, r0
 8000892:	f7ff ff89 	bl	80007a8 <DumpBuffer>
  /* Update parameters for next time */
  address = address+count;
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	682a      	ldr	r2, [r5, #0]
 800089a:	4413      	add	r3, r2
 800089c:	6023      	str	r3, [r4, #0]
 800089e:	bd38      	pop	{r3, r4, r5, pc}
 80008a0:	20000a60 	.word	0x20000a60
 80008a4:	20000010 	.word	0x20000010
 80008a8:	08006e91 	.word	0x08006e91
 80008ac:	08007029 	.word	0x08007029

080008b0 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 80008b0:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <_sbrk_r+0x2c>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	b90a      	cbnz	r2, 80008bc <_sbrk_r+0xc>
                heap_end = &end;
 80008b8:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <_sbrk_r+0x30>)
 80008ba:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 80008bc:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 80008be:	466b      	mov	r3, sp
 80008c0:	4401      	add	r1, r0
 80008c2:	4299      	cmp	r1, r3
 80008c4:	d906      	bls.n	80008d4 <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 80008c6:	f004 facd 	bl	8004e64 <__errno>
 80008ca:	230c      	movs	r3, #12
 80008cc:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 80008ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008d2:	bd08      	pop	{r3, pc}
        }

        heap_end += incr;
 80008d4:	4b01      	ldr	r3, [pc, #4]	; (80008dc <_sbrk_r+0x2c>)
 80008d6:	6019      	str	r1, [r3, #0]

        return (caddr_t) prev_heap_end;
}
 80008d8:	bd08      	pop	{r3, pc}
 80008da:	bf00      	nop
 80008dc:	20000a64 	.word	0x20000a64
 80008e0:	20001c84 	.word	0x20001c84

080008e4 <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008e8:	4770      	bx	lr

080008ea <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 80008ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ee:	6053      	str	r3, [r2, #4]
        return 0;
}
 80008f0:	2000      	movs	r0, #0
 80008f2:	4770      	bx	lr

080008f4 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 80008f4:	2001      	movs	r0, #1
 80008f6:	4770      	bx	lr

080008f8 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 80008f8:	2000      	movs	r0, #0
 80008fa:	4770      	bx	lr

080008fc <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <USBD_CDC_DataIn+0x74>)
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80008fe:	b570      	push	{r4, r5, r6, lr}
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8000900:	681b      	ldr	r3, [r3, #0]
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8000902:	4604      	mov	r4, r0
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8000904:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <USBD_CDC_DataIn+0x78>)
 8000908:	429c      	cmp	r4, r3
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 800090a:	4606      	mov	r6, r0

  if(pdev == &hUSBDDevice) {
 800090c:	d12d      	bne.n	800096a <USBD_CDC_DataIn+0x6e>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <USBD_CDC_DataIn+0x7c>)
 8000910:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outSending;
 8000914:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
 8000918:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 800091a:	fa12 f181 	uxtah	r1, r2, r1
 800091e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000922:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
    TerminalState[index].outCount -= count;
 8000926:	f8b3 110a 	ldrh.w	r1, [r3, #266]	; 0x10a
 800092a:	1a8a      	subs	r2, r1, r2
 800092c:	b292      	uxth	r2, r2
 800092e:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 8000932:	2200      	movs	r2, #0
 8000934:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 8000938:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outCount;
 800093c:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8000940:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
    TerminalState[index].outCount -= count;
    TerminalState[index].outSending = 0;

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 8000942:	b289      	uxth	r1, r1
 8000944:	461c      	mov	r4, r3
    count = TerminalState[index].outCount;
    if(count != 0) {
 8000946:	b182      	cbz	r2, 800096a <USBD_CDC_DataIn+0x6e>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 8000948:	188b      	adds	r3, r1, r2
 800094a:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 800094c:	bf88      	it	hi
 800094e:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8000952:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8000954:	4421      	add	r1, r4
    if(count != 0) {
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
	count = TERMINALBUFFERSIZE - tail;
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8000956:	3186      	adds	r1, #134	; 0x86
 8000958:	462a      	mov	r2, r5
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <USBD_CDC_DataIn+0x78>)
 800095c:	f003 fb71 	bl	8004042 <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <USBD_CDC_DataIn+0x78>)
 8000962:	f003 fb7c 	bl	800405e <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 8000966:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 800096a:	4630      	mov	r0, r6
 800096c:	bd70      	pop	{r4, r5, r6, pc}
 800096e:	bf00      	nop
 8000970:	2000115c 	.word	0x2000115c
 8000974:	20000f38 	.word	0x20000f38
 8000978:	20000a68 	.word	0x20000a68

0800097c <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 800097c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8000980:	4604      	mov	r4, r0

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8000982:	b085      	sub	sp, #20
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8000984:	b9e8      	cbnz	r0, 80009c2 <CmdStats+0x46>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000986:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8000988:	480f      	ldr	r0, [pc, #60]	; (80009c8 <CmdStats+0x4c>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800098a:	4621      	mov	r1, r4
  if(mode != CMD_INTERACTIVE) return;

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 800098c:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 8000990:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
 8000994:	f8d0 9118 	ldr.w	r9, [r0, #280]	; 0x118
 8000998:	f8d0 811c 	ldr.w	r8, [r0, #284]	; 0x11c
 800099c:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80009a0:	2214      	movs	r2, #20
 80009a2:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80009a6:	f004 fa8b 	bl	8004ec0 <memset>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80009aa:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <CmdStats+0x50>)
 80009ae:	f8cd 9000 	str.w	r9, [sp]
 80009b2:	f8cd 8004 	str.w	r8, [sp, #4]
 80009b6:	9702      	str	r7, [sp, #8]
 80009b8:	4621      	mov	r1, r4
 80009ba:	4632      	mov	r2, r6
 80009bc:	462b      	mov	r3, r5
 80009be:	f000 fc63 	bl	8001288 <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 80009c2:	b005      	add	sp, #20
 80009c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009c8:	20000a68 	.word	0x20000a68
 80009cc:	08007077 	.word	0x08007077

080009d0 <TerminalInit>:
/* Private functions */
uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len);
uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len);

void TerminalInit(void)
{
 80009d0:	b510      	push	{r4, lr}
#ifdef USE_UART
  GPIO_InitTypeDef  GPIO_InitStruct;
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
 80009d2:	4c17      	ldr	r4, [pc, #92]	; (8000a30 <TerminalInit+0x60>)
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	2100      	movs	r1, #0
 80009d8:	6858      	ldr	r0, [r3, #4]
 80009da:	2202      	movs	r2, #2
 80009dc:	460b      	mov	r3, r1
 80009de:	f004 fb01 	bl	8004fe4 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	2100      	movs	r1, #0
 80009e6:	6898      	ldr	r0, [r3, #8]
 80009e8:	2202      	movs	r2, #2
 80009ea:	460b      	mov	r3, r1
 80009ec:	f004 fafa 	bl	8004fe4 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 80009f0:	6823      	ldr	r3, [r4, #0]
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 80009f2:	4c10      	ldr	r4, [pc, #64]	; (8000a34 <TerminalInit+0x64>)
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
  setvbuf(stdout, NULL, _IONBF, 0);
  setvbuf(stderr, NULL, _IONBF, 0);
 80009f4:	68d8      	ldr	r0, [r3, #12]
 80009f6:	2100      	movs	r1, #0
 80009f8:	460b      	mov	r3, r1
 80009fa:	2202      	movs	r2, #2
 80009fc:	f004 faf2 	bl	8004fe4 <setvbuf>
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8000a00:	4620      	mov	r0, r4
 8000a02:	490d      	ldr	r1, [pc, #52]	; (8000a38 <TerminalInit+0x68>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	f002 ff39 	bl	800387c <USBD_Init>
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
 8000a0a:	490c      	ldr	r1, [pc, #48]	; (8000a3c <TerminalInit+0x6c>)
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <TerminalInit+0x70>)
 8000a0e:	694a      	ldr	r2, [r1, #20]
 8000a10:	601a      	str	r2, [r3, #0]
  USBD_CDC.DataIn = USBD_CDC_DataIn;
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8000a12:	4620      	mov	r0, r4
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <TerminalInit+0x74>)
 8000a16:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8000a18:	f002 ff45 	bl	80038a6 <USBD_RegisterClass>
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	490a      	ldr	r1, [pc, #40]	; (8000a48 <TerminalInit+0x78>)
 8000a20:	f003 fb08 	bl	8004034 <USBD_CDC_RegisterInterface>
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8000a24:	4620      	mov	r0, r4
#endif

}
 8000a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8000a2a:	f002 bf43 	b.w	80038b4 <USBD_Start>
 8000a2e:	bf00      	nop
 8000a30:	20000628 	.word	0x20000628
 8000a34:	20000f38 	.word	0x20000f38
 8000a38:	20000128 	.word	0x20000128
 8000a3c:	2000005c 	.word	0x2000005c
 8000a40:	2000115c 	.word	0x2000115c
 8000a44:	080008fd 	.word	0x080008fd
 8000a48:	20000168 	.word	0x20000168

08000a4c <TerminalRead>:

/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(uint32_t index, uint8_t *ptr, uint32_t len)
{
 8000a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4e:	b672      	cpsid	i
 8000a50:	440a      	add	r2, r1
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 8000a52:	460e      	mov	r6, r1
 8000a54:	4f0f      	ldr	r7, [pc, #60]	; (8000a94 <TerminalRead+0x48>)
 8000a56:	f44f 7592 	mov.w	r5, #292	; 0x124
 8000a5a:	4345      	muls	r5, r0
 8000a5c:	197c      	adds	r4, r7, r5
 8000a5e:	3480      	adds	r4, #128	; 0x80
 8000a60:	88a3      	ldrh	r3, [r4, #4]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	ebc1 0e06 	rsb	lr, r1, r6
 8000a68:	b183      	cbz	r3, 8000a8c <TerminalRead+0x40>
 8000a6a:	4296      	cmp	r6, r2
 8000a6c:	d00e      	beq.n	8000a8c <TerminalRead+0x40>
    tail   = TerminalState[index].inTail;
 8000a6e:	8863      	ldrh	r3, [r4, #2]
 8000a70:	b29b      	uxth	r3, r3
    *ptr++ = TerminalState[index].inBuffer[tail];
 8000a72:	441d      	add	r5, r3
    TerminalState[index].inTail = TERMINALINCR(tail);
 8000a74:	3301      	adds	r3, #1
  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
    tail   = TerminalState[index].inTail;
    *ptr++ = TerminalState[index].inBuffer[tail];
 8000a76:	5d7d      	ldrb	r5, [r7, r5]
 8000a78:	f806 5b01 	strb.w	r5, [r6], #1
    TerminalState[index].inTail = TERMINALINCR(tail);
 8000a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a80:	8063      	strh	r3, [r4, #2]
    TerminalState[index].inCount--;
 8000a82:	88a3      	ldrh	r3, [r4, #4]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	80a3      	strh	r3, [r4, #4]
 8000a8a:	e7e3      	b.n	8000a54 <TerminalRead+0x8>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000a8c:	b662      	cpsie	i
  /* Critical section end */
  __enable_irq();

  return count;

}
 8000a8e:	4670      	mov	r0, lr
 8000a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000a68 	.word	0x20000a68

08000a98 <_read_r>:
}

int _read_r( void *r, int fd, char *ptr, int len )
{
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8000a98:	4611      	mov	r1, r2
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	f7ff bfd5 	b.w	8000a4c <TerminalRead>

08000aa2 <TerminalReadNonBlock>:

/* Attempt to read a single character from the Terminal buffer(s), return 1
 * if none are available. Return 0 if there is a character available.
 */
int TerminalReadNonBlock(uint32_t index, char *c)
{
 8000aa2:	b508      	push	{r3, lr}
  /* Check for a character to be ready */
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f7ff ffd1 	bl	8000a4c <TerminalRead>
    /* Nope, just return */
    return 1;
  }
  return 0;
}
 8000aaa:	fab0 f080 	clz	r0, r0
 8000aae:	0940      	lsrs	r0, r0, #5
 8000ab0:	bd08      	pop	{r3, pc}

08000ab2 <TerminalReadAnyNonBlock>:

/* Scan through all possible terminal input buffers and return if
 * there is a character available.
 */
int TerminalReadAnyNonBlock(char *c)
{
 8000ab2:	4601      	mov	r1, r0
 8000ab4:	b508      	push	{r3, lr}
  uint32_t i;
  int rc;

  for(i=0; i<INDEX_MAX; i++) {
    rc = TerminalReadNonBlock(i, c);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fff3 	bl	8000aa2 <TerminalReadNonBlock>
    if(rc==0) {
      return rc;
    }
  }
  return 1;
}
 8000abc:	3000      	adds	r0, #0
 8000abe:	bf18      	it	ne
 8000ac0:	2001      	movne	r0, #1
 8000ac2:	bd08      	pop	{r3, pc}

08000ac4 <TerminalOutputBufferWrite>:

/* Write a block to the given terminal buffer, assume interrupts can
 * be disabled.
 */
 uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac6:	4e37      	ldr	r6, [pc, #220]	; (8000ba4 <TerminalOutputBufferWrite+0xe0>)
 8000ac8:	f44f 7392 	mov.w	r3, #292	; 0x124
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8000acc:	2a7f      	cmp	r2, #127	; 0x7f
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8000ace:	fb03 6300 	mla	r3, r3, r0, r6
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8000ad2:	d906      	bls.n	8000ae2 <TerminalOutputBufferWrite+0x1e>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8000ad4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8000ad8:	3201      	adds	r2, #1
 8000ada:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 8000ade:	2001      	movs	r0, #1
 8000ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8000ae2:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8000ae6:	fa12 f484 	uxtah	r4, r2, r4
 8000aea:	2c7f      	cmp	r4, #127	; 0x7f
    /* Keep track of how many times we block */
    TerminalState[index].stats.writeBlocked++;
 8000aec:	bf82      	ittt	hi
 8000aee:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 8000af2:	3401      	addhi	r4, #1
 8000af4:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  }

  /* Block until there is room in the buffer */
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 8000af8:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000afc:	fb03 6300 	mla	r3, r3, r0, r6
 8000b00:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8000b04:	fa12 f484 	uxtah	r4, r2, r4
 8000b08:	2c7f      	cmp	r4, #127	; 0x7f
 8000b0a:	d8f5      	bhi.n	8000af8 <TerminalOutputBufferWrite+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i

  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
 8000b0e:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8000b12:	4414      	add	r4, r2
 8000b14:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
 8000b18:	440a      	add	r2, r1
  while((len != 0) 
 8000b1a:	4291      	cmp	r1, r2
 8000b1c:	d01c      	beq.n	8000b58 <TerminalOutputBufferWrite+0x94>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8000b1e:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000b22:	fb03 6300 	mla	r3, r3, r0, r6
 8000b26:	f503 7584 	add.w	r5, r3, #264	; 0x108
 8000b2a:	886c      	ldrh	r4, [r5, #2]
 8000b2c:	b2a4      	uxth	r4, r4
 8000b2e:	2c7f      	cmp	r4, #127	; 0x7f
 8000b30:	d812      	bhi.n	8000b58 <TerminalOutputBufferWrite+0x94>
    head = TerminalState[index].outHead;
 8000b32:	f8b3 4106 	ldrh.w	r4, [r3, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8000b36:	f811 eb01 	ldrb.w	lr, [r1], #1
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
 8000b3a:	b2a4      	uxth	r4, r4
 8000b3c:	f503 7780 	add.w	r7, r3, #256	; 0x100
    TerminalState[index].outBuffer[head] = *p++;
 8000b40:	4423      	add	r3, r4
    TerminalState[index].outHead = TERMINALINCR(head);
 8000b42:	3401      	adds	r4, #1
 8000b44:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8000b48:	80fc      	strh	r4, [r7, #6]
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
    TerminalState[index].outBuffer[head] = *p++;
 8000b4a:	f883 e086 	strb.w	lr, [r3, #134]	; 0x86
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
 8000b4e:	886b      	ldrh	r3, [r5, #2]
 8000b50:	3301      	adds	r3, #1
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	806b      	strh	r3, [r5, #2]
 8000b56:	e7e0      	b.n	8000b1a <TerminalOutputBufferWrite+0x56>
    len--;
  }
  
  /* Trigger output from this buffer */
  tail = TerminalState[index].outTail;
 8000b58:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000b5c:	fb03 6300 	mla	r3, r3, r0, r6
 8000b60:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8000b64:	b295      	uxth	r5, r2
  count = TerminalState[index].outCount;
 8000b66:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8000b6a:	b292      	uxth	r2, r2
  /* Only allow a transfer to the end of the buffer */
  if((count + tail) >= TERMINALBUFFERSIZE) {
 8000b6c:	1953      	adds	r3, r2, r5
 8000b6e:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 8000b70:	bf88      	it	hi
 8000b72:	f1c5 0280 	rsbhi	r2, r5, #128	; 0x80
  }
  switch(index) {
 8000b76:	b990      	cbnz	r0, 8000b9e <TerminalOutputBufferWrite+0xda>
    }
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 8000b78:	4f0b      	ldr	r7, [pc, #44]	; (8000ba8 <TerminalOutputBufferWrite+0xe4>)
 8000b7a:	f897 31fc 	ldrb.w	r3, [r7, #508]	; 0x1fc
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d10d      	bne.n	8000b9e <TerminalOutputBufferWrite+0xda>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8000b82:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8000b84:	1971      	adds	r1, r6, r5
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8000b86:	4638      	mov	r0, r7
 8000b88:	3186      	adds	r1, #134	; 0x86
 8000b8a:	4622      	mov	r2, r4
 8000b8c:	f003 fa59 	bl	8004042 <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 8000b90:	4638      	mov	r0, r7
 8000b92:	f003 fa64 	bl	800405e <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8000b96:	b910      	cbnz	r0, 8000b9e <TerminalOutputBufferWrite+0xda>
	/* CDC was not busy, and we are now sending */
	TerminalState[index].outSending = count;
 8000b98:	4b02      	ldr	r3, [pc, #8]	; (8000ba4 <TerminalOutputBufferWrite+0xe0>)
 8000b9a:	f8a3 410c 	strh.w	r4, [r3, #268]	; 0x10c
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b9e:	b662      	cpsie	i
 8000ba0:	2000      	movs	r0, #0
    

  /* Critical section end */
  __enable_irq();
  return 0;
}
 8000ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba4:	20000a68 	.word	0x20000a68
 8000ba8:	20000f38 	.word	0x20000f38

08000bac <_write_r>:
#endif

}

int _write_r(void *reent, int fd, char *ptr, size_t len)
{
 8000bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bae:	461d      	mov	r5, r3
 8000bb0:	4614      	mov	r4, r2
 8000bb2:	18d7      	adds	r7, r2, r3
  uint32_t count;
  /* Frob buffer to add appropriate carriage returns and newlines */
  count = len;
  while(count != 0) {
 8000bb4:	42bc      	cmp	r4, r7
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	d00f      	beq.n	8000bda <_write_r+0x2e>
    if(*ptr == '\n') {
 8000bba:	7833      	ldrb	r3, [r6, #0]
 8000bbc:	2b0a      	cmp	r3, #10
 8000bbe:	f104 0401 	add.w	r4, r4, #1
 8000bc2:	d104      	bne.n	8000bce <_write_r+0x22>
      /* XXX handle buffer overflow */
#ifdef USE_UART
      TerminalOutputBufferWrite(INDEX_UART,"\r",1);
#endif
#ifdef USE_USB
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	4906      	ldr	r1, [pc, #24]	; (8000be0 <_write_r+0x34>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f7ff ff7b 	bl	8000ac4 <TerminalOutputBufferWrite>
    }
#ifdef USE_UART
    TerminalOutputBufferWrite(INDEX_UART,ptr,1);
#endif
#ifdef USE_USB
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 8000bce:	4631      	mov	r1, r6
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff ff76 	bl	8000ac4 <TerminalOutputBufferWrite>
 8000bd8:	e7ec      	b.n	8000bb4 <_write_r+0x8>
    /* Transfer error in transmission process */
    Error_Handler();
  }
#endif
  return len;
}
 8000bda:	4628      	mov	r0, r5
 8000bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bde:	bf00      	nop
 8000be0:	08006dea 	.word	0x08006dea

08000be4 <TerminalInputBufferWrite>:
  __enable_irq();
  return 0;
}

uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8000be4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t head;

  /* Critical Section begin */
  //__disable_irq();
  /* Check that our block will fit, if not, return fail */
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8000be6:	4d1a      	ldr	r5, [pc, #104]	; (8000c50 <TerminalInputBufferWrite+0x6c>)
 8000be8:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000bec:	fb03 5300 	mla	r3, r3, r0, r5
 8000bf0:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 8000bf4:	fa12 f484 	uxtah	r4, r2, r4
 8000bf8:	2c7f      	cmp	r4, #127	; 0x7f
 8000bfa:	d906      	bls.n	8000c0a <TerminalInputBufferWrite+0x26>
    //__enable_irq();
    TerminalState[index].stats.receiveTooBig++;
 8000bfc:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8000c00:	3201      	adds	r2, #1
 8000c02:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    return 1;
 8000c06:	2001      	movs	r0, #1
 8000c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
 8000c0a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000c0e:	4414      	add	r4, r2
 8000c10:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
 8000c14:	440a      	add	r2, r1
  while(len != 0) {
 8000c16:	4291      	cmp	r1, r2
 8000c18:	d017      	beq.n	8000c4a <TerminalInputBufferWrite+0x66>
    head = TerminalState[index].inHead;
 8000c1a:	f44f 7492 	mov.w	r4, #292	; 0x124
 8000c1e:	4344      	muls	r4, r0
 8000c20:	192f      	adds	r7, r5, r4
    TerminalState[index].inBuffer[head] = *p++;
 8000c22:	f811 eb01 	ldrb.w	lr, [r1], #1
    return 1;
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
 8000c26:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000c2a:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 8000c2c:	441c      	add	r4, r3
    TerminalState[index].inHead = TERMINALINCR(head);
 8000c2e:	3301      	adds	r3, #1
 8000c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c34:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    TerminalState[index].inCount++;
 8000c38:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
    TerminalState[index].inBuffer[head] = *p++;
 8000c3c:	f805 e004 	strb.w	lr, [r5, r4]
    TerminalState[index].inHead = TERMINALINCR(head);
    TerminalState[index].inCount++;
 8000c40:	3301      	adds	r3, #1
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8000c48:	e7e5      	b.n	8000c16 <TerminalInputBufferWrite+0x32>
    len--;
  }
  
  /* Critical section end */
  //__enable_irq();
  return 0;
 8000c4a:	2000      	movs	r0, #0
}
 8000c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000a68 	.word	0x20000a68

08000c54 <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
#elif defined (USE_USB_INTERRUPT_REMAPPED)
void USB_LP_IRQHandler(void)
#endif
{
  HAL_PCD_IRQHandler(&hpcd);
 8000c54:	4801      	ldr	r0, [pc, #4]	; (8000c5c <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8000c56:	f001 bdac 	b.w	80027b2 <HAL_PCD_IRQHandler>
 8000c5a:	bf00      	nop
 8000c5c:	20001160 	.word	0x20001160

08000c60 <DecodeReadRegister>:
#include "decoder.h"


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8000c60:	b510      	push	{r4, lr}
 8000c62:	460b      	mov	r3, r1
  uint32_t address, val;

  if(p == NULL) return 0;
 8000c64:	4604      	mov	r4, r0
 8000c66:	b1b0      	cbz	r0, 8000c96 <DecodeReadRegister+0x36>
  if(r == NULL) return 0;
 8000c68:	b1b1      	cbz	r1, 8000c98 <DecodeReadRegister+0x38>
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000c6a:	8888      	ldrh	r0, [r1, #4]

  /* read register according to size */
  switch(r->size) {
 8000c6c:	7989      	ldrb	r1, [r1, #6]

  if(p == NULL) return 0;
  if(r == NULL) return 0;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000c6e:	6862      	ldr	r2, [r4, #4]

  /* read register according to size */
  switch(r->size) {
 8000c70:	2910      	cmp	r1, #16
 8000c72:	d005      	beq.n	8000c80 <DecodeReadRegister+0x20>
 8000c74:	2920      	cmp	r1, #32
 8000c76:	d005      	beq.n	8000c84 <DecodeReadRegister+0x24>
 8000c78:	2908      	cmp	r1, #8
 8000c7a:	d105      	bne.n	8000c88 <DecodeReadRegister+0x28>
  case 8:
    val = *(uint8_t *)address;
 8000c7c:	5c80      	ldrb	r0, [r0, r2]
    break;
 8000c7e:	bd10      	pop	{r4, pc}
  case 16:
    val = *(uint16_t *)address;
 8000c80:	5a80      	ldrh	r0, [r0, r2]
    break;  
 8000c82:	bd10      	pop	{r4, pc}
  case 32:
    val = *(uint32_t *)address;
 8000c84:	5880      	ldr	r0, [r0, r2]
    break;
 8000c86:	bd10      	pop	{r4, pc}
  default:
    printf("Invalid size 0x%x for register %s in periphral %s!\n",
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	4804      	ldr	r0, [pc, #16]	; (8000c9c <DecodeReadRegister+0x3c>)
 8000c8c:	6823      	ldr	r3, [r4, #0]
 8000c8e:	f000 fafb 	bl	8001288 <printf>
	   (unsigned int)r->size,
	   r->name,
	   p->name);
    return 0;
 8000c92:	2000      	movs	r0, #0
 8000c94:	bd10      	pop	{r4, pc}
 8000c96:	bd10      	pop	{r4, pc}
/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
  uint32_t address, val;

  if(p == NULL) return 0;
 8000c98:	4608      	mov	r0, r1
	   r->name,
	   p->name);
    return 0;
  }
  return val;
}
 8000c9a:	bd10      	pop	{r4, pc}
 8000c9c:	08007121 	.word	0x08007121

08000ca0 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8000ca0:	b538      	push	{r3, r4, r5, lr}
 8000ca2:	460b      	mov	r3, r1
  uint32_t address;

  if(p == NULL) return 1;
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	b1a8      	cbz	r0, 8000cd4 <DecodeWriteRegister+0x34>
  if(r == NULL) return 1;
 8000ca8:	b1a1      	cbz	r1, 8000cd4 <DecodeWriteRegister+0x34>
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000caa:	888d      	ldrh	r5, [r1, #4]

  /* read register according to size */
  switch(r->size) {
 8000cac:	7989      	ldrb	r1, [r1, #6]

  if(p == NULL) return 1;
  if(r == NULL) return 1;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000cae:	6840      	ldr	r0, [r0, #4]

  /* read register according to size */
  switch(r->size) {
 8000cb0:	2910      	cmp	r1, #16
 8000cb2:	d005      	beq.n	8000cc0 <DecodeWriteRegister+0x20>
 8000cb4:	2920      	cmp	r1, #32
 8000cb6:	d005      	beq.n	8000cc4 <DecodeWriteRegister+0x24>
 8000cb8:	2908      	cmp	r1, #8
 8000cba:	d106      	bne.n	8000cca <DecodeWriteRegister+0x2a>
  case 8:
    *(uint8_t *)address = val;
 8000cbc:	542a      	strb	r2, [r5, r0]
 8000cbe:	e002      	b.n	8000cc6 <DecodeWriteRegister+0x26>
    break;
  case 16:
    *(uint16_t *)address = val;
 8000cc0:	522a      	strh	r2, [r5, r0]
 8000cc2:	e000      	b.n	8000cc6 <DecodeWriteRegister+0x26>
    break;  
  case 32:
    *(uint32_t *)address = val;
 8000cc4:	502a      	str	r2, [r5, r0]
	   (unsigned int)r->size,
	   r->name,
	   p->name);
    return 1;
  }
  return 0;
 8000cc6:	2000      	movs	r0, #0
  case 16:
    *(uint16_t *)address = val;
    break;  
  case 32:
    *(uint32_t *)address = val;
    break;
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s in periphral %s!\n",
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <DecodeWriteRegister+0x38>)
 8000cce:	6823      	ldr	r3, [r4, #0]
 8000cd0:	f000 fada 	bl	8001288 <printf>
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
 8000cd4:	2001      	movs	r0, #1
	   r->name,
	   p->name);
    return 1;
  }
  return 0;
}
 8000cd6:	bd38      	pop	{r3, r4, r5, pc}
 8000cd8:	08007121 	.word	0x08007121

08000cdc <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8000cdc:	b530      	push	{r4, r5, lr}
 8000cde:	b085      	sub	sp, #20
  uint32_t v;
  if(f == NULL) return;
 8000ce0:	b198      	cbz	r0, 8000d0a <DecodeField+0x2e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8000ce2:	7944      	ldrb	r4, [r0, #5]
 8000ce4:	7905      	ldrb	r5, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <DecodeField+0x34>)
void DecodeField(const Field_t *f, uint32_t val)
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	40a2      	lsls	r2, r4
 8000cec:	40e9      	lsrs	r1, r5
 8000cee:	3a01      	subs	r2, #1
 8000cf0:	400a      	ands	r2, r1
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8000cf2:	6801      	ldr	r1, [r0, #0]
 8000cf4:	4807      	ldr	r0, [pc, #28]	; (8000d14 <DecodeField+0x38>)
 8000cf6:	9400      	str	r4, [sp, #0]
 8000cf8:	2c01      	cmp	r4, #1
 8000cfa:	bf98      	it	ls
 8000cfc:	4603      	movls	r3, r0
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	9502      	str	r5, [sp, #8]
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <DecodeField+0x3c>)
 8000d04:	4613      	mov	r3, r2
 8000d06:	f000 fabf 	bl	8001288 <printf>
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8000d0a:	b005      	add	sp, #20
 8000d0c:	bd30      	pop	{r4, r5, pc}
 8000d0e:	bf00      	nop
 8000d10:	08007155 	.word	0x08007155
 8000d14:	0800715b 	.word	0x0800715b
 8000d18:	08007161 	.word	0x08007161

08000d1c <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8000d1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d1e:	4616      	mov	r6, r2
 8000d20:	461d      	mov	r5, r3
  Field_t const *f;
  
  if(r == NULL) return;
 8000d22:	4604      	mov	r4, r0
 8000d24:	b1d8      	cbz	r0, 8000d5e <DecodeRegister+0x42>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8000d26:	7983      	ldrb	r3, [r0, #6]
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	8883      	ldrh	r3, [r0, #4]
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <DecodeRegister+0x48>)
	 r->name,
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8000d2e:	4419      	add	r1, r3
  Field_t const *f;
  
  if(r == NULL) return;

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8000d30:	9101      	str	r1, [sp, #4]
 8000d32:	6821      	ldr	r1, [r4, #0]
 8000d34:	4613      	mov	r3, r2
 8000d36:	f000 faa7 	bl	8001288 <printf>
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8000d3a:	68a4      	ldr	r4, [r4, #8]
 8000d3c:	b144      	cbz	r4, 8000d50 <DecodeRegister+0x34>
 8000d3e:	b175      	cbz	r5, 8000d5e <DecodeRegister+0x42>
    for(f = r->fields; f->name != NULL; f++) {
 8000d40:	6823      	ldr	r3, [r4, #0]
 8000d42:	b133      	cbz	r3, 8000d52 <DecodeRegister+0x36>
      DecodeField(f,val);
 8000d44:	4620      	mov	r0, r4
 8000d46:	4631      	mov	r1, r6
 8000d48:	f7ff ffc8 	bl	8000cdc <DecodeField>
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
    for(f = r->fields; f->name != NULL; f++) {
 8000d4c:	3408      	adds	r4, #8
 8000d4e:	e7f7      	b.n	8000d40 <DecodeRegister+0x24>
      DecodeField(f,val);
    }
  }
  if(decodeFields) {
 8000d50:	b12d      	cbz	r5, 8000d5e <DecodeRegister+0x42>
    printf("\n");
 8000d52:	200a      	movs	r0, #10
  }

}
 8000d54:	b002      	add	sp, #8
 8000d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    for(f = r->fields; f->name != NULL; f++) {
      DecodeField(f,val);
    }
  }
  if(decodeFields) {
    printf("\n");
 8000d5a:	f004 b8ff 	b.w	8004f5c <putchar>
  }

}
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd70      	pop	{r4, r5, r6, pc}
 8000d62:	bf00      	nop
 8000d64:	0800718a 	.word	0x0800718a

08000d68 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8000d68:	b570      	push	{r4, r5, r6, lr}
 8000d6a:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;

  if(p == NULL) return;
 8000d6c:	4605      	mov	r5, r0
 8000d6e:	b1a8      	cbz	r0, 8000d9c <DecodePeripheral+0x34>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <DecodePeripheral+0x38>)
 8000d72:	e895 0006 	ldmia.w	r5, {r1, r2}
 8000d76:	f000 fa87 	bl	8001288 <printf>
	 p->name,  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8000d7a:	68ac      	ldr	r4, [r5, #8]
 8000d7c:	b904      	cbnz	r4, 8000d80 <DecodePeripheral+0x18>
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
    for(r = p->registers; r->name != NULL; r++) {
 8000d80:	6823      	ldr	r3, [r4, #0]
 8000d82:	b15b      	cbz	r3, 8000d9c <DecodePeripheral+0x34>
      /* Read value */
      val = DecodeReadRegister(p,r);
 8000d84:	4621      	mov	r1, r4
 8000d86:	4628      	mov	r0, r5
 8000d88:	f7ff ff6a 	bl	8000c60 <DecodeReadRegister>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8000d8c:	6869      	ldr	r1, [r5, #4]

  /* Dump out registers */
  if(p->registers != NULL) {
    for(r = p->registers; r->name != NULL; r++) {
      /* Read value */
      val = DecodeReadRegister(p,r);
 8000d8e:	4602      	mov	r2, r0
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8000d90:	4633      	mov	r3, r6
 8000d92:	4620      	mov	r0, r4
 8000d94:	f7ff ffc2 	bl	8000d1c <DecodeRegister>
  printf("Peripheral %-13s: Base address: 0x%08x\n",
	 p->name,  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
    for(r = p->registers; r->name != NULL; r++) {
 8000d98:	340c      	adds	r4, #12
 8000d9a:	e7f1      	b.n	8000d80 <DecodePeripheral+0x18>
 8000d9c:	bd70      	pop	{r4, r5, r6, pc}
 8000d9e:	bf00      	nop
 8000da0:	080071c5 	.word	0x080071c5

08000da4 <DecodePrintPeripherals>:
  }
}

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8000da4:	b538      	push	{r3, r4, r5, lr}
 8000da6:	4605      	mov	r5, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8000da8:	2009      	movs	r0, #9
 8000daa:	f004 f8d7 	bl	8004f5c <putchar>

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
 8000dae:	2408      	movs	r4, #8
  printf("\t");
  for(; p->name != NULL; p++) {
 8000db0:	6829      	ldr	r1, [r5, #0]
 8000db2:	b189      	cbz	r1, 8000dd8 <DecodePrintPeripherals+0x34>
    col += printf("%s",p->name);
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <DecodePrintPeripherals+0x38>)
 8000db6:	f000 fa67 	bl	8001288 <printf>
    if((p+1)->name != NULL) {
 8000dba:	68eb      	ldr	r3, [r5, #12]
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
    col += printf("%s",p->name);
 8000dbc:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8000dbe:	b14b      	cbz	r3, 8000dd4 <DecodePrintPeripherals+0x30>
      col += printf(", ");
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <DecodePrintPeripherals+0x3c>)
 8000dc2:	f000 fa61 	bl	8001288 <printf>
 8000dc6:	4404      	add	r4, r0
      if(col > 70) {
 8000dc8:	2c46      	cmp	r4, #70	; 0x46
 8000dca:	d903      	bls.n	8000dd4 <DecodePrintPeripherals+0x30>
	col = 8;
	printf("\n\t");
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <DecodePrintPeripherals+0x40>)
 8000dce:	f000 fa5b 	bl	8001288 <printf>
  for(; p->name != NULL; p++) {
    col += printf("%s",p->name);
    if((p+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8000dd2:	2408      	movs	r4, #8
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
 8000dd4:	350c      	adds	r5, #12
 8000dd6:	e7eb      	b.n	8000db0 <DecodePrintPeripherals+0xc>
	col = 8;
	printf("\n\t");
      }
    }
  }
}
 8000dd8:	bd38      	pop	{r3, r4, r5, pc}
 8000dda:	bf00      	nop
 8000ddc:	08006e72 	.word	0x08006e72
 8000de0:	0800715e 	.word	0x0800715e
 8000de4:	080071ed 	.word	0x080071ed

08000de8 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r) {
 8000de8:	b538      	push	{r3, r4, r5, lr}
 8000dea:	4605      	mov	r5, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8000dec:	2009      	movs	r0, #9
 8000dee:	f004 f8b5 	bl	8004f5c <putchar>
  }
}

void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
 8000df2:	2408      	movs	r4, #8
  printf("\t");
  for(; r->name != NULL; r++) {
 8000df4:	6829      	ldr	r1, [r5, #0]
 8000df6:	b199      	cbz	r1, 8000e20 <DecodePrintRegisters+0x38>
    col += printf("%s",r->name);
 8000df8:	480a      	ldr	r0, [pc, #40]	; (8000e24 <DecodePrintRegisters+0x3c>)
 8000dfa:	f000 fa45 	bl	8001288 <printf>
    if((r+1)->name != NULL) {
 8000dfe:	68eb      	ldr	r3, [r5, #12]
void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
  printf("\t");
  for(; r->name != NULL; r++) {
    col += printf("%s",r->name);
 8000e00:	4420      	add	r0, r4
 8000e02:	b2c4      	uxtb	r4, r0
    if((r+1)->name != NULL) {
 8000e04:	b153      	cbz	r3, 8000e1c <DecodePrintRegisters+0x34>
      col += printf(", ");
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <DecodePrintRegisters+0x40>)
 8000e08:	f000 fa3e 	bl	8001288 <printf>
 8000e0c:	4420      	add	r0, r4
 8000e0e:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8000e10:	2c46      	cmp	r4, #70	; 0x46
 8000e12:	d903      	bls.n	8000e1c <DecodePrintRegisters+0x34>
	col = 8;
	printf("\n\t");
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <DecodePrintRegisters+0x44>)
 8000e16:	f000 fa37 	bl	8001288 <printf>
  for(; r->name != NULL; r++) {
    col += printf("%s",r->name);
    if((r+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8000e1a:	2408      	movs	r4, #8

void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
  printf("\t");
  for(; r->name != NULL; r++) {
 8000e1c:	350c      	adds	r5, #12
 8000e1e:	e7e9      	b.n	8000df4 <DecodePrintRegisters+0xc>
	col = 8;
	printf("\n\t");
      }
    }
  }
}
 8000e20:	bd38      	pop	{r3, r4, r5, pc}
 8000e22:	bf00      	nop
 8000e24:	08006e72 	.word	0x08006e72
 8000e28:	0800715e 	.word	0x0800715e
 8000e2c:	080071ed 	.word	0x080071ed

08000e30 <CmdDecode>:

void CmdDecode(int mode)
{
 8000e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t val,oval,t,m;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8000e34:	2802      	cmp	r0, #2
    }
  }
}

void CmdDecode(int mode)
{
 8000e36:	b086      	sub	sp, #24
  uint32_t val,oval,t,m;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8000e38:	d118      	bne.n	8000e6c <CmdDecode+0x3c>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8000e3a:	a805      	add	r0, sp, #20
 8000e3c:	f7ff fca4 	bl	8000788 <fetch_string_arg>
    if(rc) {
 8000e40:	b910      	cbnz	r0, 8000e48 <CmdDecode+0x18>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8000e42:	9e05      	ldr	r6, [sp, #20]
 8000e44:	4c65      	ldr	r4, [pc, #404]	; (8000fdc <CmdDecode+0x1ac>)
 8000e46:	e00d      	b.n	8000e64 <CmdDecode+0x34>
  if(mode == CMD_LONG_HELP) {
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
    if(rc) {
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8000e48:	4865      	ldr	r0, [pc, #404]	; (8000fe0 <CmdDecode+0x1b0>)
 8000e4a:	f004 f8c3 	bl	8004fd4 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8000e4e:	4863      	ldr	r0, [pc, #396]	; (8000fdc <CmdDecode+0x1ac>)
 8000e50:	f7ff ffa8 	bl	8000da4 <DecodePrintPeripherals>
      printf("\n\n"
 8000e54:	4863      	ldr	r0, [pc, #396]	; (8000fe4 <CmdDecode+0x1b4>)
 8000e56:	e036      	b.n	8000ec6 <CmdDecode+0x96>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8000e58:	4630      	mov	r0, r6
 8000e5a:	4629      	mov	r1, r5
 8000e5c:	f004 f93e 	bl	80050dc <strcasecmp>
 8000e60:	b308      	cbz	r0, 8000ea6 <CmdDecode+0x76>
	p++;
 8000e62:	340c      	adds	r4, #12
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8000e64:	6825      	ldr	r5, [r4, #0]
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d1f6      	bne.n	8000e58 <CmdDecode+0x28>
 8000e6a:	e014      	b.n	8000e96 <CmdDecode+0x66>
    }
    
    return;
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
 8000e6c:	a802      	add	r0, sp, #8
 8000e6e:	f7ff fc8b 	bl	8000788 <fetch_string_arg>
  if(rc) {
 8000e72:	b910      	cbnz	r0, 8000e7a <CmdDecode+0x4a>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8000e74:	9e02      	ldr	r6, [sp, #8]
 8000e76:	4c59      	ldr	r4, [pc, #356]	; (8000fdc <CmdDecode+0x1ac>)
 8000e78:	e009      	b.n	8000e8e <CmdDecode+0x5e>
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
  if(rc) {
    /* User did not specify a peripheral name */
    printf("Missing peripheral name, please chose one of:\n\n");
 8000e7a:	485b      	ldr	r0, [pc, #364]	; (8000fe8 <CmdDecode+0x1b8>)
 8000e7c:	f004 f8aa 	bl	8004fd4 <puts>
 8000e80:	e01d      	b.n	8000ebe <CmdDecode+0x8e>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8000e82:	4630      	mov	r0, r6
 8000e84:	f004 f92a 	bl	80050dc <strcasecmp>
 8000e88:	4605      	mov	r5, r0
 8000e8a:	b1f8      	cbz	r0, 8000ecc <CmdDecode+0x9c>
    p++;
 8000e8c:	340c      	adds	r4, #12
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8000e8e:	6821      	ldr	r1, [r4, #0]
 8000e90:	2900      	cmp	r1, #0
 8000e92:	d1f6      	bne.n	8000e82 <CmdDecode+0x52>
 8000e94:	e00f      	b.n	8000eb6 <CmdDecode+0x86>
	p++;
      }

      if(p->name == NULL) {
	/* No valid peripheral name found */
	printf("%s is not a valid peripheral name\n"
 8000e96:	4631      	mov	r1, r6
 8000e98:	4854      	ldr	r0, [pc, #336]	; (8000fec <CmdDecode+0x1bc>)
 8000e9a:	f000 f9f5 	bl	8001288 <printf>
	       "Valid peripherals are:\n"
	       "\n",
	       n);
      DecodePrintPeripherals(Peripherals);
 8000e9e:	484f      	ldr	r0, [pc, #316]	; (8000fdc <CmdDecode+0x1ac>)
 8000ea0:	f7ff ff80 	bl	8000da4 <DecodePrintPeripherals>
	return;
 8000ea4:	e097      	b.n	8000fd6 <CmdDecode+0x1a6>
      }
      printf("Valid registers for peripheral %s:\n"
 8000ea6:	4852      	ldr	r0, [pc, #328]	; (8000ff0 <CmdDecode+0x1c0>)
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	f000 f9ed 	bl	8001288 <printf>
	     "\n",
	     p->name);
      DecodePrintRegisters(p->registers);
 8000eae:	68a0      	ldr	r0, [r4, #8]
 8000eb0:	f7ff ff9a 	bl	8000de8 <DecodePrintRegisters>
 8000eb4:	e006      	b.n	8000ec4 <CmdDecode+0x94>
    p++;
  }

  if(p->name == NULL) {
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8000eb6:	484f      	ldr	r0, [pc, #316]	; (8000ff4 <CmdDecode+0x1c4>)
 8000eb8:	4631      	mov	r1, r6
 8000eba:	f000 f9e5 	bl	8001288 <printf>
	   pname);
    DecodePrintPeripherals(Peripherals);
 8000ebe:	4847      	ldr	r0, [pc, #284]	; (8000fdc <CmdDecode+0x1ac>)
 8000ec0:	f7ff ff70 	bl	8000da4 <DecodePrintPeripherals>
    printf("\n\n");
 8000ec4:	484c      	ldr	r0, [pc, #304]	; (8000ff8 <CmdDecode+0x1c8>)
 8000ec6:	f004 f885 	bl	8004fd4 <puts>
    return;
 8000eca:	e084      	b.n	8000fd6 <CmdDecode+0x1a6>
  }
  
  /* See if the user is specifying a register */
  rc = fetch_string_arg(&rname);
 8000ecc:	a803      	add	r0, sp, #12
 8000ece:	f7ff fc5b 	bl	8000788 <fetch_string_arg>
  if(rc) {
 8000ed2:	b110      	cbz	r0, 8000eda <CmdDecode+0xaa>
    /* No register name specified, dump whole peripheral */
    DecodePeripheral(p,0);
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	e00f      	b.n	8000efa <CmdDecode+0xca>
    return;
  }

  /* See if we can find the register in the list. */
  r = p->registers;
 8000eda:	68a5      	ldr	r5, [r4, #8]
  while((r->name != NULL) && strcasecmp(rname,r->name)) {
 8000edc:	9e03      	ldr	r6, [sp, #12]
 8000ede:	6829      	ldr	r1, [r5, #0]
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	b121      	cbz	r1, 8000eee <CmdDecode+0xbe>
 8000ee4:	f004 f8fa 	bl	80050dc <strcasecmp>
 8000ee8:	b150      	cbz	r0, 8000f00 <CmdDecode+0xd0>
    r++;
 8000eea:	350c      	adds	r5, #12
 8000eec:	e7f7      	b.n	8000ede <CmdDecode+0xae>
  }

  if(r->name == NULL) {
    /* if the user says 'full' do a full decode */
    if(strcasecmp(rname,"full") == 0) {
 8000eee:	4943      	ldr	r1, [pc, #268]	; (8000ffc <CmdDecode+0x1cc>)
 8000ef0:	f004 f8f4 	bl	80050dc <strcasecmp>
 8000ef4:	bb08      	cbnz	r0, 8000f3a <CmdDecode+0x10a>
      DecodePeripheral(p,1);
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	2101      	movs	r1, #1
 8000efa:	f7ff ff35 	bl	8000d68 <DecodePeripheral>
      return;
 8000efe:	e06a      	b.n	8000fd6 <CmdDecode+0x1a6>
    printf("\n\n");
    return;
  }    

  /* Check to see if there is a field name, or integer value to program */
  rc = fetch_string_arg(&fname);
 8000f00:	a804      	add	r0, sp, #16
 8000f02:	f7ff fc41 	bl	8000788 <fetch_string_arg>
  if(rc == 0) {
 8000f06:	b960      	cbnz	r0, 8000f22 <CmdDecode+0xf2>
    /* There was something... see if it matches a field name */
    f = r->fields;
 8000f08:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,f->name)) {
 8000f0a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8000f0e:	6837      	ldr	r7, [r6, #0]
 8000f10:	2f00      	cmp	r7, #0
 8000f12:	d043      	beq.n	8000f9c <CmdDecode+0x16c>
 8000f14:	4640      	mov	r0, r8
 8000f16:	4639      	mov	r1, r7
 8000f18:	f004 f8e0 	bl	80050dc <strcasecmp>
 8000f1c:	b198      	cbz	r0, 8000f46 <CmdDecode+0x116>
      f++;
 8000f1e:	3608      	adds	r6, #8
 8000f20:	e7f5      	b.n	8000f0e <CmdDecode+0xde>
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8000f22:	4629      	mov	r1, r5
 8000f24:	4620      	mov	r0, r4
 8000f26:	f7ff fe9b 	bl	8000c60 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8000f2a:	6861      	ldr	r1, [r4, #4]
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8000f2c:	9005      	str	r0, [sp, #20]
 8000f2e:	4602      	mov	r2, r0
  DecodeRegister(r,p->base, val,1);
 8000f30:	2301      	movs	r3, #1
 8000f32:	4628      	mov	r0, r5
 8000f34:	f7ff fef2 	bl	8000d1c <DecodeRegister>
 8000f38:	e04d      	b.n	8000fd6 <CmdDecode+0x1a6>
      DecodePeripheral(p,1);
      return;
    }

    /* No valid register name found */
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8000f3a:	4631      	mov	r1, r6
 8000f3c:	6822      	ldr	r2, [r4, #0]
 8000f3e:	4830      	ldr	r0, [pc, #192]	; (8001000 <CmdDecode+0x1d0>)
 8000f40:	f000 f9a2 	bl	8001288 <printf>
 8000f44:	e7b3      	b.n	8000eae <CmdDecode+0x7e>
    while((f->name != NULL) && strcasecmp(fname,f->name)) {
      f++;
    }
    if(f->name != NULL) {
      /* Matched a field name, look for the value */
      rc = fetch_uint32_arg(&val);
 8000f46:	a805      	add	r0, sp, #20
 8000f48:	f7ff fc0a 	bl	8000760 <fetch_uint32_arg>
      if(rc) {
 8000f4c:	b110      	cbz	r0, 8000f54 <CmdDecode+0x124>
	/* Unable to locate a value */
	printf("Missing Value to program into register %s\n",
 8000f4e:	482d      	ldr	r0, [pc, #180]	; (8001004 <CmdDecode+0x1d4>)
 8000f50:	6829      	ldr	r1, [r5, #0]
 8000f52:	e032      	b.n	8000fba <CmdDecode+0x18a>
	       r->name);
	return;
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
 8000f54:	4629      	mov	r1, r5
 8000f56:	4620      	mov	r0, r4
 8000f58:	f7ff fe82 	bl	8000c60 <DecodeReadRegister>
      /* Create mask */
      m = (1<<f->width)-1;
 8000f5c:	7972      	ldrb	r2, [r6, #5]

      oval = (t >> f->offset) & m; /* Save old value */
 8000f5e:	f896 e004 	ldrb.w	lr, [r6, #4]

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 8000f62:	9905      	ldr	r1, [sp, #20]
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	4093      	lsls	r3, r2

      oval = (t >> f->offset) & m; /* Save old value */
 8000f68:	fa20 f70e 	lsr.w	r7, r0, lr
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 8000f6c:	3b01      	subs	r3, #1

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 8000f6e:	fa03 f20e 	lsl.w	r2, r3, lr
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */
 8000f72:	401f      	ands	r7, r3

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 8000f74:	400b      	ands	r3, r1
 8000f76:	fa03 f30e 	lsl.w	r3, r3, lr
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 8000f7a:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
      DecodeWriteRegister(p,r,t);
 8000f7e:	4629      	mov	r1, r5
 8000f80:	431a      	orrs	r2, r3
 8000f82:	4620      	mov	r0, r4
 8000f84:	f7ff fe8c 	bl	8000ca0 <DecodeWriteRegister>
      printf("%s.%s.%s (%d) -> (%d)\n",
 8000f88:	9b05      	ldr	r3, [sp, #20]
 8000f8a:	9700      	str	r7, [sp, #0]
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	6821      	ldr	r1, [r4, #0]
 8000f90:	682a      	ldr	r2, [r5, #0]
 8000f92:	6833      	ldr	r3, [r6, #0]
 8000f94:	481c      	ldr	r0, [pc, #112]	; (8001008 <CmdDecode+0x1d8>)
 8000f96:	f000 f977 	bl	8001288 <printf>
	     p->name, r->name, f->name,
	     (unsigned)oval, (unsigned)val);
      return;
 8000f9a:	e01c      	b.n	8000fd6 <CmdDecode+0x1a6>

    }
    /* No matching register name, check if this is an integer */
    errno = 0;
 8000f9c:	f003 ff62 	bl	8004e64 <__errno>
    val = strtoul(fname,NULL,0);
 8000fa0:	4639      	mov	r1, r7
	     (unsigned)oval, (unsigned)val);
      return;

    }
    /* No matching register name, check if this is an integer */
    errno = 0;
 8000fa2:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8000fa4:	463a      	mov	r2, r7
 8000fa6:	9804      	ldr	r0, [sp, #16]
 8000fa8:	f004 fa14 	bl	80053d4 <strtoul>
 8000fac:	9005      	str	r0, [sp, #20]
    if(errno != 0) {
 8000fae:	f003 ff59 	bl	8004e64 <__errno>
 8000fb2:	6803      	ldr	r3, [r0, #0]
 8000fb4:	b123      	cbz	r3, 8000fc0 <CmdDecode+0x190>
      /* Unable to do conversion */
      printf("Invalid number '%s' entered.\n",
 8000fb6:	4815      	ldr	r0, [pc, #84]	; (800100c <CmdDecode+0x1dc>)
 8000fb8:	9904      	ldr	r1, [sp, #16]
 8000fba:	f000 f965 	bl	8001288 <printf>
	     fname);
      return;
 8000fbe:	e00a      	b.n	8000fd6 <CmdDecode+0x1a6>
    }
    /* Write to register */
    DecodeWriteRegister(p,r,val);
 8000fc0:	4629      	mov	r1, r5
 8000fc2:	9a05      	ldr	r2, [sp, #20]
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f7ff fe6b 	bl	8000ca0 <DecodeWriteRegister>
    printf("%s.%s = 0x%08x\n",
 8000fca:	4811      	ldr	r0, [pc, #68]	; (8001010 <CmdDecode+0x1e0>)
 8000fcc:	6821      	ldr	r1, [r4, #0]
 8000fce:	682a      	ldr	r2, [r5, #0]
 8000fd0:	9b05      	ldr	r3, [sp, #20]
 8000fd2:	f000 f959 	bl	8001288 <printf>
  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

}
 8000fd6:	b006      	add	sp, #24
 8000fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fdc:	0801154c 	.word	0x0801154c
 8000fe0:	080071f0 	.word	0x080071f0
 8000fe4:	080073df 	.word	0x080073df
 8000fe8:	08007434 	.word	0x08007434
 8000fec:	08007510 	.word	0x08007510
 8000ff0:	0800754b 	.word	0x0800754b
 8000ff4:	08007570 	.word	0x08007570
 8000ff8:	080075aa 	.word	0x080075aa
 8000ffc:	080075ac 	.word	0x080075ac
 8001000:	08007463 	.word	0x08007463
 8001004:	080074a0 	.word	0x080074a0
 8001008:	080074cb 	.word	0x080074cb
 800100c:	080074e2 	.word	0x080074e2
 8001010:	08007500 	.word	0x08007500

08001014 <printchar>:
#include "common.h"

int _write_r(void *reent, int fd, char *ptr, size_t len);

static void printchar(char **str, int c)
{
 8001014:	b507      	push	{r0, r1, r2, lr}
  char output = c;
 8001016:	b2cb      	uxtb	r3, r1
 8001018:	f88d 3007 	strb.w	r3, [sp, #7]
  if (str) {
 800101c:	4601      	mov	r1, r0
 800101e:	b128      	cbz	r0, 800102c <printchar+0x18>
    **str = c;
 8001020:	6802      	ldr	r2, [r0, #0]
 8001022:	7013      	strb	r3, [r2, #0]
    ++(*str);
 8001024:	6803      	ldr	r3, [r0, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	6003      	str	r3, [r0, #0]
 800102a:	e004      	b.n	8001036 <printchar+0x22>
  } else {
    _write_r(NULL, 0, &output, 1); 
 800102c:	f10d 0207 	add.w	r2, sp, #7
 8001030:	2301      	movs	r3, #1
 8001032:	f7ff fdbb 	bl	8000bac <_write_r>
  }
}
 8001036:	b003      	add	sp, #12
 8001038:	f85d fb04 	ldr.w	pc, [sp], #4

0800103c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 800103c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8001040:	1e14      	subs	r4, r2, #0

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8001042:	4680      	mov	r8, r0
 8001044:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8001046:	dd0f      	ble.n	8001068 <prints+0x2c>
 8001048:	460a      	mov	r2, r1
 800104a:	1b50      	subs	r0, r2, r5
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 800104c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001050:	2900      	cmp	r1, #0
 8001052:	d1fa      	bne.n	800104a <prints+0xe>
		if (len >= width) width = 0;
 8001054:	42a0      	cmp	r0, r4
		else width -= len;
 8001056:	bfb4      	ite	lt
 8001058:	1a24      	sublt	r4, r4, r0

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
 800105a:	460c      	movge	r4, r1
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
 800105c:	f013 0f02 	tst.w	r3, #2
 8001060:	bf0c      	ite	eq
 8001062:	2720      	moveq	r7, #32
 8001064:	2730      	movne	r7, #48	; 0x30
 8001066:	e000      	b.n	800106a <prints+0x2e>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8001068:	2720      	movs	r7, #32
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
 800106a:	07db      	lsls	r3, r3, #31
 800106c:	d40d      	bmi.n	800108a <prints+0x4e>
 800106e:	4626      	mov	r6, r4
		for ( ; width > 0; --width) {
 8001070:	2e00      	cmp	r6, #0
 8001072:	dd05      	ble.n	8001080 <prints+0x44>
			printchar (out, padchar);
 8001074:	4640      	mov	r0, r8
 8001076:	4639      	mov	r1, r7
 8001078:	f7ff ffcc 	bl	8001014 <printchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 800107c:	3e01      	subs	r6, #1
 800107e:	e7f7      	b.n	8001070 <prints+0x34>
 8001080:	ea24 7ae4 	bic.w	sl, r4, r4, asr #31
 8001084:	ebca 0404 	rsb	r4, sl, r4
 8001088:	e001      	b.n	800108e <prints+0x52>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 800108a:	f04f 0a00 	mov.w	sl, #0
 800108e:	46a9      	mov	r9, r5
 8001090:	ebc5 060a 	rsb	r6, r5, sl
 8001094:	444e      	add	r6, r9
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8001096:	f819 1b01 	ldrb.w	r1, [r9], #1
 800109a:	b119      	cbz	r1, 80010a4 <prints+0x68>
		printchar (out, *string);
 800109c:	4640      	mov	r0, r8
 800109e:	f7ff ffb9 	bl	8001014 <printchar>
 80010a2:	e7f5      	b.n	8001090 <prints+0x54>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 80010a4:	4625      	mov	r5, r4
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80010a6:	2d00      	cmp	r5, #0
 80010a8:	dd05      	ble.n	80010b6 <prints+0x7a>
		printchar (out, padchar);
 80010aa:	4640      	mov	r0, r8
 80010ac:	4639      	mov	r1, r7
 80010ae:	f7ff ffb1 	bl	8001014 <printchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80010b2:	3d01      	subs	r5, #1
 80010b4:	e7f7      	b.n	80010a6 <prints+0x6a>
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	bfac      	ite	ge
 80010ba:	1930      	addge	r0, r6, r4
 80010bc:	1c30      	addlt	r0, r6, #0
 80010be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080010c2 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80010c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010c6:	b085      	sub	sp, #20
 80010c8:	4607      	mov	r7, r0
 80010ca:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80010ce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 80010d0:	460d      	mov	r5, r1

	if (i == 0) {
 80010d2:	b951      	cbnz	r1, 80010ea <printi+0x28>
		print_buf[0] = '0';
 80010d4:	2330      	movs	r3, #48	; 0x30
 80010d6:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
 80010da:	f88d 1005 	strb.w	r1, [sp, #5]
		return prints (out, print_buf, width, pad);
 80010de:	464a      	mov	r2, r9
 80010e0:	a901      	add	r1, sp, #4
 80010e2:	4633      	mov	r3, r6
 80010e4:	f7ff ffaa 	bl	800103c <prints>
 80010e8:	e03b      	b.n	8001162 <printi+0xa0>
	}

	if (sg && b == 10 && i < 0) {
 80010ea:	b133      	cbz	r3, 80010fa <printi+0x38>
 80010ec:	2a0a      	cmp	r2, #10
 80010ee:	d104      	bne.n	80010fa <printi+0x38>
 80010f0:	2900      	cmp	r1, #0
 80010f2:	da02      	bge.n	80010fa <printi+0x38>
		neg = 1;
		u = -i;
 80010f4:	424d      	negs	r5, r1
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 80010f6:	2001      	movs	r0, #1
 80010f8:	e000      	b.n	80010fc <printi+0x3a>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80010fa:	2000      	movs	r0, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 80010fc:	f10d 0810 	add.w	r8, sp, #16
 8001100:	2100      	movs	r1, #0
 8001102:	f808 1d01 	strb.w	r1, [r8, #-1]!

	while (u) {
 8001106:	b175      	cbz	r5, 8001126 <printi+0x64>
		t = u % b;
 8001108:	fbb5 f1f2 	udiv	r1, r5, r2
 800110c:	fb02 5511 	mls	r5, r2, r1, r5
		if( t >= 10 )
 8001110:	2d09      	cmp	r5, #9
			t += letbase - '0' - 10;
 8001112:	bfc2      	ittt	gt
 8001114:	9b0e      	ldrgt	r3, [sp, #56]	; 0x38
 8001116:	f1a3 043a 	subgt.w	r4, r3, #58	; 0x3a
 800111a:	192d      	addgt	r5, r5, r4
		*--s = t + '0';
 800111c:	3530      	adds	r5, #48	; 0x30
 800111e:	f808 5d01 	strb.w	r5, [r8, #-1]!
		u /= b;
 8001122:	460d      	mov	r5, r1
 8001124:	e7ef      	b.n	8001106 <printi+0x44>
 8001126:	4643      	mov	r3, r8
	}

	if (neg) {
 8001128:	b198      	cbz	r0, 8001152 <printi+0x90>
		if( width && (pad & PAD_ZERO) ) {
 800112a:	f1b9 0f00 	cmp.w	r9, #0
 800112e:	d009      	beq.n	8001144 <printi+0x82>
 8001130:	07b2      	lsls	r2, r6, #30
 8001132:	d507      	bpl.n	8001144 <printi+0x82>
			printchar (out, '-');
 8001134:	4638      	mov	r0, r7
 8001136:	212d      	movs	r1, #45	; 0x2d
 8001138:	f7ff ff6c 	bl	8001014 <printchar>
			++pc;
			--width;
 800113c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 8001140:	2401      	movs	r4, #1
			--width;
 8001142:	e007      	b.n	8001154 <printi+0x92>
		}
		else {
			*--s = '-';
 8001144:	222d      	movs	r2, #45	; 0x2d
 8001146:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800114a:	f803 2c01 	strb.w	r2, [r3, #-1]

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 800114e:	2400      	movs	r4, #0
 8001150:	e000      	b.n	8001154 <printi+0x92>
 8001152:	4604      	mov	r4, r0
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 8001154:	4638      	mov	r0, r7
 8001156:	4641      	mov	r1, r8
 8001158:	464a      	mov	r2, r9
 800115a:	4633      	mov	r3, r6
 800115c:	f7ff ff6e 	bl	800103c <prints>
 8001160:	4420      	add	r0, r4
}
 8001162:	b005      	add	sp, #20
 8001164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001168 <print>:

static int print(char **out, const char *format, va_list args )
{
 8001168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	4606      	mov	r6, r0
 800116e:	460d      	mov	r5, r1
 8001170:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
 8001172:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8001174:	782b      	ldrb	r3, [r5, #0]
 8001176:	b123      	cbz	r3, 8001182 <print+0x1a>
		if (*format == '%') {
 8001178:	2b25      	cmp	r3, #37	; 0x25
 800117a:	d179      	bne.n	8001270 <print+0x108>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
 800117c:	786b      	ldrb	r3, [r5, #1]
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 800117e:	1c6a      	adds	r2, r5, #1
			width = pad = 0;
			if (*format == '\0') break;
 8001180:	b92b      	cbnz	r3, 800118e <print+0x26>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 8001182:	2e00      	cmp	r6, #0
 8001184:	d07b      	beq.n	800127e <print+0x116>
 8001186:	6833      	ldr	r3, [r6, #0]
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e077      	b.n	800127e <print+0x116>
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
 800118e:	2b25      	cmp	r3, #37	; 0x25
 8001190:	d06d      	beq.n	800126e <print+0x106>
			if (*format == '-') {
 8001192:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
 8001194:	bf06      	itte	eq
 8001196:	1caa      	addeq	r2, r5, #2
				pad = PAD_RIGHT;
 8001198:	2301      	moveq	r3, #1
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 800119a:	2300      	movne	r3, #0
 800119c:	4610      	mov	r0, r2
 800119e:	3201      	adds	r2, #1
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 80011a0:	7801      	ldrb	r1, [r0, #0]
 80011a2:	2930      	cmp	r1, #48	; 0x30
 80011a4:	d102      	bne.n	80011ac <print+0x44>
				++format;
				pad |= PAD_ZERO;
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	e7f7      	b.n	800119c <print+0x34>
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 80011ac:	2200      	movs	r2, #0
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80011ae:	7801      	ldrb	r1, [r0, #0]
 80011b0:	f1a1 0730 	sub.w	r7, r1, #48	; 0x30
 80011b4:	fa5f fe87 	uxtb.w	lr, r7
 80011b8:	f1be 0f09 	cmp.w	lr, #9
 80011bc:	4605      	mov	r5, r0
 80011be:	f100 0001 	add.w	r0, r0, #1
 80011c2:	d803      	bhi.n	80011cc <print+0x64>
				width *= 10;
				width += *format - '0';
 80011c4:	210a      	movs	r1, #10
 80011c6:	fb01 7202 	mla	r2, r1, r2, r7
 80011ca:	e7f0      	b.n	80011ae <print+0x46>
			}
			if( *format == 's' ) {
 80011cc:	2973      	cmp	r1, #115	; 0x73
 80011ce:	d109      	bne.n	80011e4 <print+0x7c>
				register char *s = (char *)va_arg( args, int );
 80011d0:	9905      	ldr	r1, [sp, #20]
				pc += prints (out, s?s:"(null)", width, pad);
 80011d2:	4f2c      	ldr	r7, [pc, #176]	; (8001284 <print+0x11c>)
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = (char *)va_arg( args, int );
 80011d4:	1d08      	adds	r0, r1, #4
 80011d6:	6809      	ldr	r1, [r1, #0]
 80011d8:	9005      	str	r0, [sp, #20]
				pc += prints (out, s?s:"(null)", width, pad);
 80011da:	2900      	cmp	r1, #0
 80011dc:	bf08      	it	eq
 80011de:	4639      	moveq	r1, r7
 80011e0:	4630      	mov	r0, r6
 80011e2:	e041      	b.n	8001268 <print+0x100>
				continue;
			}
			if( *format == 'd' ) {
 80011e4:	2964      	cmp	r1, #100	; 0x64
 80011e6:	d10e      	bne.n	8001206 <print+0x9e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 80011e8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80011ec:	9905      	ldr	r1, [sp, #20]
 80011ee:	2361      	movs	r3, #97	; 0x61
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	1d08      	adds	r0, r1, #4
 80011f4:	6809      	ldr	r1, [r1, #0]
 80011f6:	9005      	str	r0, [sp, #20]
 80011f8:	220a      	movs	r2, #10
 80011fa:	4630      	mov	r0, r6
 80011fc:	2301      	movs	r3, #1
 80011fe:	f7ff ff60 	bl	80010c2 <printi>
 8001202:	4404      	add	r4, r0
				continue;
 8001204:	e039      	b.n	800127a <print+0x112>
			}
			if( *format == 'x' ) {
 8001206:	2978      	cmp	r1, #120	; 0x78
 8001208:	d106      	bne.n	8001218 <print+0xb0>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 800120a:	9905      	ldr	r1, [sp, #20]
 800120c:	1d08      	adds	r0, r1, #4
 800120e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001212:	9005      	str	r0, [sp, #20]
 8001214:	2361      	movs	r3, #97	; 0x61
 8001216:	e007      	b.n	8001228 <print+0xc0>
				continue;
			}
			if( *format == 'X' ) {
 8001218:	2958      	cmp	r1, #88	; 0x58
 800121a:	d10a      	bne.n	8001232 <print+0xca>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 800121c:	9905      	ldr	r1, [sp, #20]
 800121e:	1d08      	adds	r0, r1, #4
 8001220:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001224:	9005      	str	r0, [sp, #20]
 8001226:	2341      	movs	r3, #65	; 0x41
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	4630      	mov	r0, r6
 800122c:	6809      	ldr	r1, [r1, #0]
 800122e:	2210      	movs	r2, #16
 8001230:	e00b      	b.n	800124a <print+0xe2>
				continue;
			}
			if( *format == 'u' ) {
 8001232:	2975      	cmp	r1, #117	; 0x75
 8001234:	d10b      	bne.n	800124e <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8001236:	e88d 000c 	stmia.w	sp, {r2, r3}
 800123a:	9905      	ldr	r1, [sp, #20]
 800123c:	2361      	movs	r3, #97	; 0x61
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	1d08      	adds	r0, r1, #4
 8001242:	6809      	ldr	r1, [r1, #0]
 8001244:	9005      	str	r0, [sp, #20]
 8001246:	220a      	movs	r2, #10
 8001248:	4630      	mov	r0, r6
 800124a:	2300      	movs	r3, #0
 800124c:	e7d7      	b.n	80011fe <print+0x96>
				continue;
			}
			if( *format == 'c' ) {
 800124e:	2963      	cmp	r1, #99	; 0x63
 8001250:	d113      	bne.n	800127a <print+0x112>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8001252:	9905      	ldr	r1, [sp, #20]
 8001254:	1d08      	adds	r0, r1, #4
 8001256:	6809      	ldr	r1, [r1, #0]
 8001258:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
 800125c:	2100      	movs	r1, #0
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 800125e:	9005      	str	r0, [sp, #20]
				scr[1] = '\0';
 8001260:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
 8001264:	4630      	mov	r0, r6
 8001266:	a907      	add	r1, sp, #28
 8001268:	f7ff fee8 	bl	800103c <prints>
 800126c:	e7c9      	b.n	8001202 <print+0x9a>
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 800126e:	4615      	mov	r5, r2
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
 8001270:	4630      	mov	r0, r6
 8001272:	7829      	ldrb	r1, [r5, #0]
 8001274:	f7ff fece 	bl	8001014 <printchar>
			++pc;
 8001278:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 800127a:	3501      	adds	r5, #1
 800127c:	e77a      	b.n	8001174 <print+0xc>
		}
	}
	if (out) **out = '\0';
	va_end( args );
	return pc;
}
 800127e:	4620      	mov	r0, r4
 8001280:	b009      	add	sp, #36	; 0x24
 8001282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001284:	0801702c 	.word	0x0801702c

08001288 <printf>:

int printf(const char *format, ...)
{
 8001288:	b40f      	push	{r0, r1, r2, r3}
 800128a:	b507      	push	{r0, r1, r2, lr}
 800128c:	aa04      	add	r2, sp, #16
        va_list args;
        
        va_start( args, format );
        return print( 0, format, args );
 800128e:	2000      	movs	r0, #0
	va_end( args );
	return pc;
}

int printf(const char *format, ...)
{
 8001290:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
 8001294:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
 8001296:	f7ff ff67 	bl	8001168 <print>
}
 800129a:	b003      	add	sp, #12
 800129c:	f85d eb04 	ldr.w	lr, [sp], #4
 80012a0:	b004      	add	sp, #16
 80012a2:	4770      	bx	lr

080012a4 <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 80012a4:	2801      	cmp	r0, #1
#include "common.h"

int mytest( int x );

void CmdTest(int action)
{
 80012a6:	b508      	push	{r3, lr}

  if(action==CMD_SHORT_HELP) return;
 80012a8:	d00f      	beq.n	80012ca <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 80012aa:	2802      	cmp	r0, #2
 80012ac:	d104      	bne.n	80012b8 <CmdTest+0x14>
    printf("testasm\n\n"
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <CmdTest+0x28>)
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 80012b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
  if(action==CMD_LONG_HELP) {
    printf("testasm\n\n"
 80012b4:	f003 be8e 	b.w	8004fd4 <puts>
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 80012b8:	204d      	movs	r0, #77	; 0x4d
 80012ba:	f7fe ff93 	bl	80001e4 <mytest>
}
 80012be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 80012c2:	4601      	mov	r1, r0
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <CmdTest+0x2c>)
 80012c6:	f7ff bfdf 	b.w	8001288 <printf>
 80012ca:	bd08      	pop	{r3, pc}
 80012cc:	08017033 	.word	0x08017033
 80012d0:	0801706c 	.word	0x0801706c

080012d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d4:	4915      	ldr	r1, [pc, #84]	; (800132c <SystemInit+0x58>)
 80012d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80012da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <SystemInit+0x5c>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80012ec:	6858      	ldr	r0, [r3, #4]
 80012ee:	4a11      	ldr	r2, [pc, #68]	; (8001334 <SystemInit+0x60>)
 80012f0:	4002      	ands	r2, r0
 80012f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80012fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012fe:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001306:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800130e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001312:	f022 020f 	bic.w	r2, r2, #15
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001318:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800131a:	4a07      	ldr	r2, [pc, #28]	; (8001338 <SystemInit+0x64>)
 800131c:	4002      	ands	r2, r0
 800131e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001324:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001328:	608b      	str	r3, [r1, #8]
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00
 8001330:	40021000 	.word	0x40021000
 8001334:	f87fc00c 	.word	0xf87fc00c
 8001338:	ff00fccc 	.word	0xff00fccc

0800133c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133e:	6803      	ldr	r3, [r0, #0]
 8001340:	07db      	lsls	r3, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001342:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001344:	d404      	bmi.n	8001350 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	079f      	lsls	r7, r3, #30
 800134a:	f100 80c6 	bmi.w	80014da <HAL_RCC_OscConfig+0x19e>
 800134e:	e157      	b.n	8001600 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001350:	4dc1      	ldr	r5, [pc, #772]	; (8001658 <HAL_RCC_OscConfig+0x31c>)
 8001352:	686b      	ldr	r3, [r5, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b04      	cmp	r3, #4
 800135a:	d007      	beq.n	800136c <HAL_RCC_OscConfig+0x30>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800135c:	686b      	ldr	r3, [r5, #4]
 800135e:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001362:	2b08      	cmp	r3, #8
 8001364:	d127      	bne.n	80013b6 <HAL_RCC_OscConfig+0x7a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001366:	686b      	ldr	r3, [r5, #4]
 8001368:	03de      	lsls	r6, r3, #15
 800136a:	d524      	bpl.n	80013b6 <HAL_RCC_OscConfig+0x7a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001370:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001374:	fab3 f383 	clz	r3, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 8001378:	f043 0320 	orr.w	r3, r3, #32
 800137c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_RCC_OscConfig+0x4c>
 8001384:	6829      	ldr	r1, [r5, #0]
 8001386:	e004      	b.n	8001392 <HAL_RCC_OscConfig+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800138c:	fab2 f282 	clz	r2, r2
 8001390:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001392:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001396:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	2201      	movs	r2, #1
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	420b      	tst	r3, r1
 80013aa:	d0cc      	beq.n	8001346 <HAL_RCC_OscConfig+0xa>
 80013ac:	6863      	ldr	r3, [r4, #4]
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d0c9      	beq.n	8001346 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 80013b2:	2001      	movs	r0, #1
 80013b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80013b6:	4ea9      	ldr	r6, [pc, #676]	; (800165c <HAL_RCC_OscConfig+0x320>)
 80013b8:	2300      	movs	r3, #0
 80013ba:	7033      	strb	r3, [r6, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 80013bc:	f000 fc8e 	bl	8001cdc <HAL_GetTick>
 80013c0:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013c6:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80013ca:	fab3 f383 	clz	r3, r3
      
      /* Wait till HSE is bypassed or disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	f043 0320 	orr.w	r3, r3, #32
 80013d2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_RCC_OscConfig+0xa2>
 80013da:	6829      	ldr	r1, [r5, #0]
 80013dc:	e004      	b.n	80013e8 <HAL_RCC_OscConfig+0xac>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	fab2 f282 	clz	r2, r2
 80013e6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ec:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80013f0:	fab3 f383 	clz	r3, r3
 80013f4:	2201      	movs	r2, #1
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	420b      	tst	r3, r1
 8001400:	d008      	beq.n	8001414 <HAL_RCC_OscConfig+0xd8>
      {
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8001402:	f000 fc6b 	bl	8001cdc <HAL_GetTick>
 8001406:	f241 3388 	movw	r3, #5000	; 0x1388
 800140a:	1bc0      	subs	r0, r0, r7
 800140c:	4298      	cmp	r0, r3
 800140e:	d9d8      	bls.n	80013c2 <HAL_RCC_OscConfig+0x86>
        {
          return HAL_TIMEOUT;
 8001410:	2003      	movs	r0, #3
 8001412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
      }

      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001414:	7923      	ldrb	r3, [r4, #4]
 8001416:	7033      	strb	r3, [r6, #0]

      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001418:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800141a:	f023 020f 	bic.w	r2, r3, #15
 800141e:	68a3      	ldr	r3, [r4, #8]
 8001420:	4313      	orrs	r3, r2
 8001422:	62eb      	str	r3, [r5, #44]	; 0x2c

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8001424:	6863      	ldr	r3, [r4, #4]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d12b      	bne.n	8001482 <HAL_RCC_OscConfig+0x146>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 800142a:	f000 fc57 	bl	8001cdc <HAL_GetTick>
 800142e:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001430:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001434:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001438:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143c:	f043 0320 	orr.w	r3, r3, #32
 8001440:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <HAL_RCC_OscConfig+0x110>
 8001448:	6829      	ldr	r1, [r5, #0]
 800144a:	e004      	b.n	8001456 <HAL_RCC_OscConfig+0x11a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001450:	fab2 f282 	clz	r2, r2
 8001454:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800145a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	2201      	movs	r2, #1
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	420b      	tst	r3, r1
 800146e:	f47f af6a 	bne.w	8001346 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8001472:	f000 fc33 	bl	8001cdc <HAL_GetTick>
 8001476:	f241 3388 	movw	r3, #5000	; 0x1388
 800147a:	1b80      	subs	r0, r0, r6
 800147c:	4298      	cmp	r0, r3
 800147e:	d9d7      	bls.n	8001430 <HAL_RCC_OscConfig+0xf4>
 8001480:	e7c6      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
        }
      }
      else
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8001482:	f000 fc2b 	bl	8001cdc <HAL_GetTick>
 8001486:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800148c:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001490:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
 80014a0:	6829      	ldr	r1, [r5, #0]
 80014a2:	e004      	b.n	80014ae <HAL_RCC_OscConfig+0x172>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	fab2 f282 	clz	r2, r2
 80014ac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	2201      	movs	r2, #1
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	420b      	tst	r3, r1
 80014c6:	f43f af3e 	beq.w	8001346 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80014ca:	f000 fc07 	bl	8001cdc <HAL_GetTick>
 80014ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80014d2:	1b80      	subs	r0, r0, r6
 80014d4:	4298      	cmp	r0, r3
 80014d6:	d9d7      	bls.n	8001488 <HAL_RCC_OscConfig+0x14c>
 80014d8:	e79a      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80014da:	4d5f      	ldr	r5, [pc, #380]	; (8001658 <HAL_RCC_OscConfig+0x31c>)
 80014dc:	686b      	ldr	r3, [r5, #4]
 80014de:	f013 0f0c 	tst.w	r3, #12
 80014e2:	d007      	beq.n	80014f4 <HAL_RCC_OscConfig+0x1b8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014e4:	686b      	ldr	r3, [r5, #4]
 80014e6:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d125      	bne.n	800153a <HAL_RCC_OscConfig+0x1fe>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014ee:	686b      	ldr	r3, [r5, #4]
 80014f0:	03d8      	lsls	r0, r3, #15
 80014f2:	d422      	bmi.n	800153a <HAL_RCC_OscConfig+0x1fe>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f4:	2202      	movs	r2, #2
 80014f6:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80014fa:	fab3 f383 	clz	r3, r3
    {
      /* When the HSI is used as system clock it is not allowed to be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	f043 0320 	orr.w	r3, r3, #32
 8001502:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_RCC_OscConfig+0x1d2>
 800150a:	6829      	ldr	r1, [r5, #0]
 800150c:	e004      	b.n	8001518 <HAL_RCC_OscConfig+0x1dc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001512:	fab2 f282 	clz	r2, r2
 8001516:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	2302      	movs	r3, #2
 800151a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	2201      	movs	r2, #1
 8001524:	f003 031f 	and.w	r3, r3, #31
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	420b      	tst	r3, r1
 800152e:	d030      	beq.n	8001592 <HAL_RCC_OscConfig+0x256>
 8001530:	6923      	ldr	r3, [r4, #16]
 8001532:	4293      	cmp	r3, r2
 8001534:	f47f af3d 	bne.w	80013b2 <HAL_RCC_OscConfig+0x76>
 8001538:	e02b      	b.n	8001592 <HAL_RCC_OscConfig+0x256>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153a:	6922      	ldr	r2, [r4, #16]
 800153c:	4b48      	ldr	r3, [pc, #288]	; (8001660 <HAL_RCC_OscConfig+0x324>)
 800153e:	b3ba      	cbz	r2, 80015b0 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001544:	f000 fbca 	bl	8001cdc <HAL_GetTick>
 8001548:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	2202      	movs	r2, #2
 800154c:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001550:	fab3 f383 	clz	r3, r3

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001554:	f043 0320 	orr.w	r3, r3, #32
 8001558:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_RCC_OscConfig+0x228>
 8001560:	6829      	ldr	r1, [r5, #0]
 8001562:	e004      	b.n	800156e <HAL_RCC_OscConfig+0x232>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001568:	fab2 f282 	clz	r2, r2
 800156c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	2302      	movs	r3, #2
 8001570:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001574:	fab3 f383 	clz	r3, r3
 8001578:	2201      	movs	r2, #1
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	420b      	tst	r3, r1
 8001584:	d105      	bne.n	8001592 <HAL_RCC_OscConfig+0x256>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8001586:	f000 fba9 	bl	8001cdc <HAL_GetTick>
 800158a:	1b80      	subs	r0, r0, r6
 800158c:	2864      	cmp	r0, #100	; 0x64
 800158e:	d9dc      	bls.n	800154a <HAL_RCC_OscConfig+0x20e>
 8001590:	e73e      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
          }      
        } 

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	23f8      	movs	r3, #248	; 0xf8
 8001596:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800159a:	fab3 f383 	clz	r3, r3
 800159e:	6961      	ldr	r1, [r4, #20]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4099      	lsls	r1, r3
 80015a4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80015a8:	ea41 0302 	orr.w	r3, r1, r2
 80015ac:	602b      	str	r3, [r5, #0]
 80015ae:	e027      	b.n	8001600 <HAL_RCC_OscConfig+0x2c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015b2:	f000 fb93 	bl	8001cdc <HAL_GetTick>
 80015b6:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	2202      	movs	r2, #2
 80015ba:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80015be:	fab3 f383 	clz	r3, r3
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	f043 0320 	orr.w	r3, r3, #32
 80015c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x296>
 80015ce:	6829      	ldr	r1, [r5, #0]
 80015d0:	e004      	b.n	80015dc <HAL_RCC_OscConfig+0x2a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	fab2 f282 	clz	r2, r2
 80015da:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	2302      	movs	r3, #2
 80015de:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	2201      	movs	r2, #1
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	420b      	tst	r3, r1
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_OscConfig+0x2c4>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 80015f4:	f000 fb72 	bl	8001cdc <HAL_GetTick>
 80015f8:	1b80      	subs	r0, r0, r6
 80015fa:	2864      	cmp	r0, #100	; 0x64
 80015fc:	d9dc      	bls.n	80015b8 <HAL_RCC_OscConfig+0x27c>
 80015fe:	e707      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	0719      	lsls	r1, r3, #28
 8001604:	d404      	bmi.n	8001610 <HAL_RCC_OscConfig+0x2d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	075a      	lsls	r2, r3, #29
 800160a:	f140 80a7 	bpl.w	800175c <HAL_RCC_OscConfig+0x420>
 800160e:	e04a      	b.n	80016a6 <HAL_RCC_OscConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001610:	69a2      	ldr	r2, [r4, #24]
 8001612:	4d11      	ldr	r5, [pc, #68]	; (8001658 <HAL_RCC_OscConfig+0x31c>)
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <HAL_RCC_OscConfig+0x328>)
 8001616:	b33a      	cbz	r2, 8001668 <HAL_RCC_OscConfig+0x32c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 800161c:	f000 fb5e 	bl	8001cdc <HAL_GetTick>
 8001620:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001622:	2302      	movs	r3, #2
 8001624:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001628:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001630:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001634:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	2201      	movs	r2, #1
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	420b      	tst	r3, r1
 800164a:	d1dc      	bne.n	8001606 <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f000 fb46 	bl	8001cdc <HAL_GetTick>
 8001650:	1b80      	subs	r0, r0, r6
 8001652:	2864      	cmp	r0, #100	; 0x64
 8001654:	d9e5      	bls.n	8001622 <HAL_RCC_OscConfig+0x2e6>
 8001656:	e6db      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
 8001658:	40021000 	.word	0x40021000
 800165c:	40021002 	.word	0x40021002
 8001660:	42420000 	.word	0x42420000
 8001664:	42420480 	.word	0x42420480
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001668:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 800166a:	f000 fb37 	bl	8001cdc <HAL_GetTick>
 800166e:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001670:	2302      	movs	r3, #2
 8001672:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001676:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800167e:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001682:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001688:	fab3 f383 	clz	r3, r3
 800168c:	2201      	movs	r2, #1
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	420b      	tst	r3, r1
 8001698:	d0b5      	beq.n	8001606 <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 800169a:	f000 fb1f 	bl	8001cdc <HAL_GetTick>
 800169e:	1b80      	subs	r0, r0, r6
 80016a0:	2864      	cmp	r0, #100	; 0x64
 80016a2:	d9e5      	bls.n	8001670 <HAL_RCC_OscConfig+0x334>
 80016a4:	e6b4      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 80016a6:	4d97      	ldr	r5, [pc, #604]	; (8001904 <HAL_RCC_OscConfig+0x5c8>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a8:	4a97      	ldr	r2, [pc, #604]	; (8001908 <HAL_RCC_OscConfig+0x5cc>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 80016aa:	69eb      	ldr	r3, [r5, #28]
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	61eb      	str	r3, [r5, #28]

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b2:	6813      	ldr	r3, [r2, #0]
 80016b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016ba:	f000 fb0f 	bl	8001cdc <HAL_GetTick>
 80016be:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80016c0:	4b91      	ldr	r3, [pc, #580]	; (8001908 <HAL_RCC_OscConfig+0x5cc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	05db      	lsls	r3, r3, #23
 80016c6:	d54d      	bpl.n	8001764 <HAL_RCC_OscConfig+0x428>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80016c8:	6a2b      	ldr	r3, [r5, #32]
 80016ca:	f023 0305 	bic.w	r3, r3, #5
 80016ce:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 80016d0:	f000 fb04 	bl	8001cdc <HAL_GetTick>
 80016d4:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	2302      	movs	r3, #2
 80016d8:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	fab2 f282 	clz	r2, r2
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016ec:	f3c2 1242 	ubfx	r2, r2, #5, #3
 80016f0:	429a      	cmp	r2, r3
 80016f2:	bf0c      	ite	eq
 80016f4:	6a29      	ldreq	r1, [r5, #32]
 80016f6:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	fab3 f383 	clz	r3, r3
 8001700:	2201      	movs	r2, #1
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	420b      	tst	r3, r1
 800170c:	d130      	bne.n	8001770 <HAL_RCC_OscConfig+0x434>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170e:	6a2b      	ldr	r3, [r5, #32]
 8001710:	68e2      	ldr	r2, [r4, #12]
 8001712:	f023 0305 	bic.w	r3, r3, #5
 8001716:	4313      	orrs	r3, r2
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001718:	2a01      	cmp	r2, #1
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171a:	622b      	str	r3, [r5, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800171c:	d138      	bne.n	8001790 <HAL_RCC_OscConfig+0x454>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800171e:	f000 fadd 	bl	8001cdc <HAL_GetTick>
 8001722:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	2302      	movs	r3, #2
 8001726:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800172a:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001732:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800173a:	f3c2 1242 	ubfx	r2, r2, #5, #3
 800173e:	429a      	cmp	r2, r3
 8001740:	bf0c      	ite	eq
 8001742:	6a29      	ldreq	r1, [r5, #32]
 8001744:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	2201      	movs	r2, #1
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	420b      	tst	r3, r1
 800175a:	d011      	beq.n	8001780 <HAL_RCC_OscConfig+0x444>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175c:	69e2      	ldr	r2, [r4, #28]
 800175e:	2a00      	cmp	r2, #0
 8001760:	d13d      	bne.n	80017de <HAL_RCC_OscConfig+0x4a2>
 8001762:	e08b      	b.n	800187c <HAL_RCC_OscConfig+0x540>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 8001764:	f000 faba 	bl	8001cdc <HAL_GetTick>
 8001768:	1b80      	subs	r0, r0, r6
 800176a:	2864      	cmp	r0, #100	; 0x64
 800176c:	d9a8      	bls.n	80016c0 <HAL_RCC_OscConfig+0x384>
 800176e:	e64f      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
    tickstart = HAL_GetTick();
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8001770:	f000 fab4 	bl	8001cdc <HAL_GetTick>
 8001774:	f241 3388 	movw	r3, #5000	; 0x1388
 8001778:	1b80      	subs	r0, r0, r6
 800177a:	4298      	cmp	r0, r3
 800177c:	d9ab      	bls.n	80016d6 <HAL_RCC_OscConfig+0x39a>
 800177e:	e647      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8001780:	f000 faac 	bl	8001cdc <HAL_GetTick>
 8001784:	f241 3388 	movw	r3, #5000	; 0x1388
 8001788:	1b80      	subs	r0, r0, r6
 800178a:	4298      	cmp	r0, r3
 800178c:	d9ca      	bls.n	8001724 <HAL_RCC_OscConfig+0x3e8>
 800178e:	e63f      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
      }
    }
    else
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001790:	f000 faa4 	bl	8001cdc <HAL_GetTick>
 8001794:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	2302      	movs	r3, #2
 8001798:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800179c:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017ac:	f3c2 1242 	ubfx	r2, r2, #5, #3
 80017b0:	429a      	cmp	r2, r3
 80017b2:	bf0c      	ite	eq
 80017b4:	6a29      	ldreq	r1, [r5, #32]
 80017b6:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	2201      	movs	r2, #1
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	420b      	tst	r3, r1
 80017cc:	d0c6      	beq.n	800175c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 80017ce:	f000 fa85 	bl	8001cdc <HAL_GetTick>
 80017d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80017d6:	1b80      	subs	r0, r0, r6
 80017d8:	4298      	cmp	r0, r3
 80017da:	d9dc      	bls.n	8001796 <HAL_RCC_OscConfig+0x45a>
 80017dc:	e618      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017de:	4d49      	ldr	r5, [pc, #292]	; (8001904 <HAL_RCC_OscConfig+0x5c8>)
 80017e0:	686b      	ldr	r3, [r5, #4]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	f43f ade3 	beq.w	80013b2 <HAL_RCC_OscConfig+0x76>
 80017ec:	4e47      	ldr	r6, [pc, #284]	; (800190c <HAL_RCC_OscConfig+0x5d0>)
 80017ee:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f0:	2a02      	cmp	r2, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f2:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f4:	d15c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x574>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017f6:	f000 fa71 	bl	8001cdc <HAL_GetTick>
 80017fa:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001800:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001804:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001808:	f043 0320 	orr.w	r3, r3, #32
 800180c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001810:	2b01      	cmp	r3, #1
 8001812:	d135      	bne.n	8001880 <HAL_RCC_OscConfig+0x544>
 8001814:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800181a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	2101      	movs	r1, #1
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	4213      	tst	r3, r2
 800182e:	d12d      	bne.n	800188c <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001830:	6a20      	ldr	r0, [r4, #32]
 8001832:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001834:	686b      	ldr	r3, [r5, #4]
 8001836:	4302      	orrs	r2, r0
 8001838:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800183c:	4313      	orrs	r3, r2
 800183e:	606b      	str	r3, [r5, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001840:	6031      	str	r1, [r6, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001842:	f000 fa4b 	bl	8001cdc <HAL_GetTick>
 8001846:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800184c:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001850:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001854:	f043 0320 	orr.w	r3, r3, #32
 8001858:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800185c:	2b01      	cmp	r3, #1
 800185e:	d11b      	bne.n	8001898 <HAL_RCC_OscConfig+0x55c>
 8001860:	6829      	ldr	r1, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001866:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	2201      	movs	r2, #1
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	420b      	tst	r3, r1
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0x568>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800187c:	2000      	movs	r0, #0
 800187e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001884:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001888:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800188a:	e7c4      	b.n	8001816 <HAL_RCC_OscConfig+0x4da>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f000 fa26 	bl	8001cdc <HAL_GetTick>
 8001890:	1bc0      	subs	r0, r0, r7
 8001892:	2864      	cmp	r0, #100	; 0x64
 8001894:	d9b2      	bls.n	80017fc <HAL_RCC_OscConfig+0x4c0>
 8001896:	e5bb      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800189c:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80018a2:	e7de      	b.n	8001862 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 80018a4:	f000 fa1a 	bl	8001cdc <HAL_GetTick>
 80018a8:	1b00      	subs	r0, r0, r4
 80018aa:	2864      	cmp	r0, #100	; 0x64
 80018ac:	d9cc      	bls.n	8001848 <HAL_RCC_OscConfig+0x50c>
 80018ae:	e5af      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        /* Get timeout */
        tickstart = HAL_GetTick();
 80018b0:	f000 fa14 	bl	8001cdc <HAL_GetTick>
 80018b4:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ba:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80018be:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c2:	f043 0320 	orr.w	r3, r3, #32
 80018c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x596>
 80018ce:	6829      	ldr	r1, [r5, #0]
 80018d0:	e004      	b.n	80018dc <HAL_RCC_OscConfig+0x5a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	fab2 f282 	clz	r2, r2
 80018da:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e0:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	2201      	movs	r2, #1
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	420b      	tst	r3, r1
 80018f4:	d0c2      	beq.n	800187c <HAL_RCC_OscConfig+0x540>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 80018f6:	f000 f9f1 	bl	8001cdc <HAL_GetTick>
 80018fa:	1b00      	subs	r0, r0, r4
 80018fc:	2864      	cmp	r0, #100	; 0x64
 80018fe:	d9da      	bls.n	80018b6 <HAL_RCC_OscConfig+0x57a>
 8001900:	e586      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	40007000 	.word	0x40007000
 800190c:	42420060 	.word	0x42420060

08001910 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001910:	4ab0      	ldr	r2, [pc, #704]	; (8001bd4 <HAL_RCC_ClockConfig+0x2c4>)
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001914:	6813      	ldr	r3, [r2, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	4299      	cmp	r1, r3
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	4604      	mov	r4, r0
 800191e:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001920:	f240 80a9 	bls.w	8001a76 <HAL_RCC_ClockConfig+0x166>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001924:	6813      	ldr	r3, [r2, #0]
 8001926:	f023 0307 	bic.w	r3, r3, #7
 800192a:	430b      	orrs	r3, r1
 800192c:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800192e:	6813      	ldr	r3, [r2, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	428b      	cmp	r3, r1
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 8001938:	2001      	movs	r0, #1
 800193a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193c:	6801      	ldr	r1, [r0, #0]
 800193e:	078f      	lsls	r7, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001940:	bf41      	itttt	mi
 8001942:	48a5      	ldrmi	r0, [pc, #660]	; (8001bd8 <HAL_RCC_ClockConfig+0x2c8>)
 8001944:	6843      	ldrmi	r3, [r0, #4]
 8001946:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 800194a:	68a3      	ldrmi	r3, [r4, #8]
 800194c:	bf44      	itt	mi
 800194e:	4313      	orrmi	r3, r2
 8001950:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001952:	07ce      	lsls	r6, r1, #31
 8001954:	d40b      	bmi.n	800196e <HAL_RCC_ClockConfig+0x5e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001956:	6821      	ldr	r1, [r4, #0]
 8001958:	074d      	lsls	r5, r1, #29
 800195a:	f140 812b 	bpl.w	8001bb4 <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195e:	489e      	ldr	r0, [pc, #632]	; (8001bd8 <HAL_RCC_ClockConfig+0x2c8>)
 8001960:	6843      	ldr	r3, [r0, #4]
 8001962:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001966:	68e3      	ldr	r3, [r4, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	6043      	str	r3, [r0, #4]
 800196c:	e122      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x2a4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196e:	6862      	ldr	r2, [r4, #4]
 8001970:	4d99      	ldr	r5, [pc, #612]	; (8001bd8 <HAL_RCC_ClockConfig+0x2c8>)
 8001972:	2a01      	cmp	r2, #1
 8001974:	d115      	bne.n	80019a2 <HAL_RCC_ClockConfig+0x92>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800197a:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800197e:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	f043 0320 	orr.w	r3, r3, #32
 8001986:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0x82>
 800198e:	6828      	ldr	r0, [r5, #0]
 8001990:	e004      	b.n	800199c <HAL_RCC_ClockConfig+0x8c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001996:	fab1 f181 	clz	r1, r1
 800199a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a0:	e02a      	b.n	80019f8 <HAL_RCC_ClockConfig+0xe8>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a2:	2a02      	cmp	r2, #2
 80019a4:	d115      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xc2>
 80019a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019aa:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	f043 0320 	orr.w	r3, r3, #32
 80019b6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xb2>
 80019be:	6828      	ldr	r0, [r5, #0]
 80019c0:	e004      	b.n	80019cc <HAL_RCC_ClockConfig+0xbc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	fab1 f181 	clz	r1, r1
 80019ca:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d0:	e012      	b.n	80019f8 <HAL_RCC_ClockConfig+0xe8>
 80019d2:	2102      	movs	r1, #2
 80019d4:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	f043 0320 	orr.w	r3, r3, #32
 80019e0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_ClockConfig+0xdc>
 80019e8:	6828      	ldr	r0, [r5, #0]
 80019ea:	e004      	b.n	80019f6 <HAL_RCC_ClockConfig+0xe6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	fab1 f181 	clz	r1, r1
 80019f4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	2302      	movs	r3, #2
 80019f8:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	2101      	movs	r1, #1
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	4203      	tst	r3, r0
 8001a0c:	d094      	beq.n	8001938 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a0e:	686b      	ldr	r3, [r5, #4]
 8001a10:	f023 0303 	bic.w	r3, r3, #3
 8001a14:	431a      	orrs	r2, r3
 8001a16:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 8001a18:	f000 f960 	bl	8001cdc <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1c:	6863      	ldr	r3, [r4, #4]
 8001a1e:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 8001a20:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a22:	d10d      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x130>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a24:	686b      	ldr	r3, [r5, #4]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d093      	beq.n	8001956 <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2e:	f000 f955 	bl	8001cdc <HAL_GetTick>
 8001a32:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a36:	1b80      	subs	r0, r0, r6
 8001a38:	4298      	cmp	r0, r3
 8001a3a:	d9f3      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x114>
          {
            return HAL_TIMEOUT;
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d113      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a44:	686b      	ldr	r3, [r5, #4]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d083      	beq.n	8001956 <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4e:	f000 f945 	bl	8001cdc <HAL_GetTick>
 8001a52:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a56:	1b80      	subs	r0, r0, r6
 8001a58:	4298      	cmp	r0, r3
 8001a5a:	d9f3      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x134>
 8001a5c:	e7ee      	b.n	8001a3c <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5e:	f000 f93d 	bl	8001cdc <HAL_GetTick>
 8001a62:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a66:	1b80      	subs	r0, r0, r6
 8001a68:	4298      	cmp	r0, r3
 8001a6a:	d8e7      	bhi.n	8001a3c <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a6c:	686b      	ldr	r3, [r5, #4]
 8001a6e:	f013 0f0c 	tst.w	r3, #12
 8001a72:	d1f4      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x14e>
 8001a74:	e76f      	b.n	8001956 <HAL_RCC_ClockConfig+0x46>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a76:	6801      	ldr	r1, [r0, #0]
 8001a78:	0788      	lsls	r0, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7a:	bf41      	itttt	mi
 8001a7c:	4856      	ldrmi	r0, [pc, #344]	; (8001bd8 <HAL_RCC_ClockConfig+0x2c8>)
 8001a7e:	6843      	ldrmi	r3, [r0, #4]
 8001a80:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 8001a84:	68a3      	ldrmi	r3, [r4, #8]
 8001a86:	bf44      	itt	mi
 8001a88:	4313      	orrmi	r3, r2
 8001a8a:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8c:	07ca      	lsls	r2, r1, #31
 8001a8e:	d40c      	bmi.n	8001aaa <HAL_RCC_ClockConfig+0x19a>
        }
      }
    }

    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a90:	4a50      	ldr	r2, [pc, #320]	; (8001bd4 <HAL_RCC_ClockConfig+0x2c4>)
 8001a92:	6813      	ldr	r3, [r2, #0]
 8001a94:	f023 0307 	bic.w	r3, r3, #7
 8001a98:	4333      	orrs	r3, r6
 8001a9a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a9c:	6813      	ldr	r3, [r2, #0]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	42b3      	cmp	r3, r6
 8001aa4:	f47f af48 	bne.w	8001938 <HAL_RCC_ClockConfig+0x28>
 8001aa8:	e755      	b.n	8001956 <HAL_RCC_ClockConfig+0x46>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	6862      	ldr	r2, [r4, #4]
 8001aac:	4d4a      	ldr	r5, [pc, #296]	; (8001bd8 <HAL_RCC_ClockConfig+0x2c8>)
 8001aae:	2a01      	cmp	r2, #1
 8001ab0:	d115      	bne.n	8001ade <HAL_RCC_ClockConfig+0x1ce>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001ab6:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	f043 0320 	orr.w	r3, r3, #32
 8001ac2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0x1be>
 8001aca:	6828      	ldr	r0, [r5, #0]
 8001acc:	e004      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1c8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	fab1 f181 	clz	r1, r1
 8001ad6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001adc:	e02a      	b.n	8001b34 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ade:	2a02      	cmp	r2, #2
 8001ae0:	d115      	bne.n	8001b0e <HAL_RCC_ClockConfig+0x1fe>
 8001ae2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ae6:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aee:	f043 0320 	orr.w	r3, r3, #32
 8001af2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_ClockConfig+0x1ee>
 8001afa:	6828      	ldr	r0, [r5, #0]
 8001afc:	e004      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1f8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	fab1 f181 	clz	r1, r1
 8001b06:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b0c:	e012      	b.n	8001b34 <HAL_RCC_ClockConfig+0x224>
 8001b0e:	2102      	movs	r1, #2
 8001b10:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	f043 0320 	orr.w	r3, r3, #32
 8001b1c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x218>
 8001b24:	6828      	ldr	r0, [r5, #0]
 8001b26:	e004      	b.n	8001b32 <HAL_RCC_ClockConfig+0x222>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	fab1 f181 	clz	r1, r1
 8001b30:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	2302      	movs	r3, #2
 8001b34:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	4203      	tst	r3, r0
 8001b48:	f43f aef6 	beq.w	8001938 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b4c:	686b      	ldr	r3, [r5, #4]
 8001b4e:	f023 0303 	bic.w	r3, r3, #3
 8001b52:	431a      	orrs	r2, r3
 8001b54:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 8001b56:	f000 f8c1 	bl	8001cdc <HAL_GetTick>

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	6863      	ldr	r3, [r4, #4]
 8001b5c:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 8001b5e:	4607      	mov	r7, r0

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x26c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b62:	686b      	ldr	r3, [r5, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d091      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6c:	f000 f8b6 	bl	8001cdc <HAL_GetTick>
 8001b70:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b74:	1bc0      	subs	r0, r0, r7
 8001b76:	4298      	cmp	r0, r3
 8001b78:	d9f3      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x252>
 8001b7a:	e75f      	b.n	8001a3c <HAL_RCC_ClockConfig+0x12c>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d114      	bne.n	8001baa <HAL_RCC_ClockConfig+0x29a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b80:	686b      	ldr	r3, [r5, #4]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d082      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8a:	f000 f8a7 	bl	8001cdc <HAL_GetTick>
 8001b8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b92:	1bc0      	subs	r0, r0, r7
 8001b94:	4298      	cmp	r0, r3
 8001b96:	d9f3      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x270>
 8001b98:	e750      	b.n	8001a3c <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9a:	f000 f89f 	bl	8001cdc <HAL_GetTick>
 8001b9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ba2:	1bc0      	subs	r0, r0, r7
 8001ba4:	4298      	cmp	r0, r3
 8001ba6:	f63f af49 	bhi.w	8001a3c <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001baa:	686b      	ldr	r3, [r5, #4]
 8001bac:	f013 0f0c 	tst.w	r3, #12
 8001bb0:	d1f3      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x28a>
 8001bb2:	e76d      	b.n	8001a90 <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb4:	070b      	lsls	r3, r1, #28
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bb6:	bf41      	itttt	mi
 8001bb8:	4a07      	ldrmi	r2, [pc, #28]	; (8001bd8 <HAL_RCC_ClockConfig+0x2c8>)
 8001bba:	6921      	ldrmi	r1, [r4, #16]
 8001bbc:	6853      	ldrmi	r3, [r2, #4]
 8001bbe:	f423 5360 	bicmi.w	r3, r3, #14336	; 0x3800
 8001bc2:	bf44      	itt	mi
 8001bc4:	ea43 03c1 	orrmi.w	r3, r3, r1, lsl #3
 8001bc8:	6053      	strmi	r3, [r2, #4]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bca:	200f      	movs	r0, #15
 8001bcc:	f000 f859 	bl	8001c82 <HAL_InitTick>

  return HAL_OK;
 8001bd0:	2000      	movs	r0, #0
}
 8001bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bd4:	40022000 	.word	0x40022000
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8001bdc:	4915      	ldr	r1, [pc, #84]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x58>)
  *
  * @param  None
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bde:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8001be0:	684c      	ldr	r4, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001be2:	f004 030c 	and.w	r3, r4, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d121      	bne.n	8001c2e <HAL_RCC_GetSysClockFreq+0x52>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001bee:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001bf6:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x5c>)
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001c02:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c04:	5cd2      	ldrb	r2, [r2, r3]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	230f      	movs	r3, #15
 8001c08:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	fab3 f383 	clz	r3, r3
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001c10:	f001 010f 	and.w	r1, r1, #15
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	fa21 f303 	lsr.w	r3, r1, r3
 8001c1a:	4908      	ldr	r1, [pc, #32]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x60>)
 8001c1c:	5cc8      	ldrb	r0, [r1, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001c1e:	03e3      	lsls	r3, r4, #15
      pllclk = (HSE_VALUE/prediv) * pllmul;
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8001c20:	bf52      	itee	pl
 8001c22:	4807      	ldrpl	r0, [pc, #28]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x64>)
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8001c24:	4b07      	ldrmi	r3, [pc, #28]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x68>)
 8001c26:	fbb3 f0f0 	udivmi	r0, r3, r0
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8001c2a:	4350      	muls	r0, r2
 8001c2c:	bd10      	pop	{r4, pc}

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x68>)
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 8001c30:	bd10      	pop	{r4, pc}
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	080170b0 	.word	0x080170b0
 8001c3c:	080170a0 	.word	0x080170a0
 8001c40:	003d0900 	.word	0x003d0900
 8001c44:	007a1200 	.word	0x007a1200

08001c48 <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c48:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001c4a:	f7ff ffc7 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001c50:	685a      	ldr	r2, [r3, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	23f0      	movs	r3, #240	; 0xf0
 8001c54:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x30>)
 8001c68:	5cd3      	ldrb	r3, [r2, r3]
 8001c6a:	40d8      	lsrs	r0, r3
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <HAL_RCC_GetHCLKFreq+0x34>)
 8001c6e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8001c70:	bd08      	pop	{r3, pc}
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08017090 	.word	0x08017090
 8001c7c:	20000014 	.word	0x20000014

08001c80 <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @param  None
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001c80:	4770      	bx	lr

08001c82 <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 8001c82:	b510      	push	{r4, lr}
 8001c84:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001c86:	f7ff ffdf 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c92:	f000 f885 	bl	8001da0 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f000 f843 	bl	8001d28 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	bd10      	pop	{r4, pc}
	...

08001ca8 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca8:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_Init+0x20>)
  * @note                  
  * @param  None
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001caa:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cac:	6813      	ldr	r3, [r2, #0]
 8001cae:	f043 0310 	orr.w	r3, r3, #16
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f000 f825 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cba:	200f      	movs	r0, #15
 8001cbc:	f7ff ffe1 	bl	8001c82 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	bd08      	pop	{r3, pc}
 8001cc8:	40022000 	.word	0x40022000

08001ccc <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001ccc:	4a02      	ldr	r2, [pc, #8]	; (8001cd8 <HAL_IncTick+0xc>)
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000b8c 	.word	0x20000b8c

08001cdc <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001cdc:	4b01      	ldr	r3, [pc, #4]	; (8001ce4 <HAL_GetTick+0x8>)
 8001cde:	6818      	ldr	r0, [r3, #0]
}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000b8c 	.word	0x20000b8c

08001ce8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001ce8:	b513      	push	{r0, r1, r4, lr}
 8001cea:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff fff6 	bl	8001cdc <HAL_GetTick>
 8001cf0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001cf2:	f7ff fff3 	bl	8001cdc <HAL_GetTick>
 8001cf6:	9b01      	ldr	r3, [sp, #4]
 8001cf8:	1b00      	subs	r0, r0, r4
 8001cfa:	4298      	cmp	r0, r3
 8001cfc:	d3f9      	bcc.n	8001cf2 <HAL_Delay+0xa>
  {
  }
}
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd10      	pop	{r4, pc}
	...

08001d04 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001d06:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8001d08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d0c:	041b      	lsls	r3, r3, #16
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8001d18:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8001d1c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001d20:	60d3      	str	r3, [r2, #12]
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_NVIC_SetPriority+0x58>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8001d32:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8001d36:	1d1c      	adds	r4, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8001d38:	2d04      	cmp	r5, #4
 8001d3a:	bf28      	it	cs
 8001d3c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8001d3e:	2c06      	cmp	r4, #6
 8001d40:	bf8c      	ite	hi
 8001d42:	3b03      	subhi	r3, #3
 8001d44:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8001d46:	2401      	movs	r4, #1
 8001d48:	fa04 f603 	lsl.w	r6, r4, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8001d4c:	40ac      	lsls	r4, r5
 8001d4e:	3c01      	subs	r4, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8001d50:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8001d52:	4021      	ands	r1, r4
 8001d54:	4099      	lsls	r1, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8001d56:	4032      	ands	r2, r6
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8001d58:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8001d5a:	ea42 0201 	orr.w	r2, r2, r1
 8001d5e:	ea4f 1202 	mov.w	r2, r2, lsl #4
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001d62:	bfaf      	iteee	ge
 8001d64:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001d68:	f000 000f 	andlt.w	r0, r0, #15
 8001d6c:	4b05      	ldrlt	r3, [pc, #20]	; (8001d84 <HAL_NVIC_SetPriority+0x5c>)
 8001d6e:	b2d2      	uxtblt	r2, r2
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001d70:	bfa5      	ittet	ge
 8001d72:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001d76:	b2d2      	uxtbge	r2, r2
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001d78:	541a      	strblt	r2, [r3, r0]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001d7a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001d7e:	bd70      	pop	{r4, r5, r6, pc}
 8001d80:	e000ed00 	.word	0xe000ed00
 8001d84:	e000ed14 	.word	0xe000ed14

08001d88 <HAL_NVIC_EnableIRQ>:
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001d88:	0941      	lsrs	r1, r0, #5
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f000 001f 	and.w	r0, r0, #31
 8001d90:	4a02      	ldr	r2, [pc, #8]	; (8001d9c <HAL_NVIC_EnableIRQ+0x14>)
 8001d92:	4083      	lsls	r3, r0
 8001d94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8001da0:	3801      	subs	r0, #1
 8001da2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8001da6:	bf3f      	itttt	cc
 8001da8:	4b06      	ldrcc	r3, [pc, #24]	; (8001dc4 <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001daa:	4a07      	ldrcc	r2, [pc, #28]	; (8001dc8 <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8001dac:	6058      	strcc	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001dae:	21f0      	movcc	r1, #240	; 0xf0
 8001db0:	bf3f      	itttt	cc
 8001db2:	f882 1023 	strbcc.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001db6:	2000      	movcc	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db8:	2207      	movcc	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001dba:	6098      	strcc	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbc:	bf34      	ite	cc
 8001dbe:	601a      	strcc	r2, [r3, #0]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8001dc0:	2001      	movcs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e010 	.word	0xe000e010
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd0:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001dd2:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd8:	ea02 0507 	and.w	r5, r2, r7
 
    if (iocurrent == ioposition)
 8001ddc:	4295      	cmp	r5, r2
 8001dde:	f040 80ac 	bne.w	8001f3a <HAL_GPIO_Init+0x16e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/ 
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001de2:	684c      	ldr	r4, [r1, #4]
 8001de4:	f024 0c10 	bic.w	ip, r4, #16
 8001de8:	f1bc 0f02 	cmp.w	ip, #2
 8001dec:	d114      	bne.n	8001e18 <HAL_GPIO_Init+0x4c>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001dee:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001df2:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001df6:	f003 0607 	and.w	r6, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001dfa:	f8de 2020 	ldr.w	r2, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dfe:	00b6      	lsls	r6, r6, #2
 8001e00:	f04f 080f 	mov.w	r8, #15
 8001e04:	fa08 f806 	lsl.w	r8, r8, r6
 8001e08:	ea22 0808 	bic.w	r8, r2, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e0c:	690a      	ldr	r2, [r1, #16]
 8001e0e:	40b2      	lsls	r2, r6
 8001e10:	ea48 0202 	orr.w	r2, r8, r2
        GPIOx->AFR[position >> 3] = temp;
 8001e14:	f8ce 2020 	str.w	r2, [lr, #32]
 8001e18:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e1c:	2203      	movs	r2, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e20:	fa02 f20e 	lsl.w	r2, r2, lr
 8001e24:	43d2      	mvns	r2, r2
 8001e26:	ea02 0806 	and.w	r8, r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e2a:	f004 0603 	and.w	r6, r4, #3
 8001e2e:	fa06 f60e 	lsl.w	r6, r6, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e32:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e36:	ea48 0606 	orr.w	r6, r8, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e3a:	f1bc 0f01 	cmp.w	ip, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8001e3e:	6006      	str	r6, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e40:	d811      	bhi.n	8001e66 <HAL_GPIO_Init+0x9a>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e42:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e44:	ea02 0c06 	and.w	ip, r2, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e48:	68ce      	ldr	r6, [r1, #12]
 8001e4a:	fa06 f60e 	lsl.w	r6, r6, lr
 8001e4e:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OSPEEDR = temp;
 8001e52:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e54:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e56:	ea26 0c05 	bic.w	ip, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e5a:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001e5e:	409e      	lsls	r6, r3
 8001e60:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OTYPER = temp;
 8001e64:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e66:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e68:	ea02 0c06 	and.w	ip, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e6c:	688a      	ldr	r2, [r1, #8]
 8001e6e:	fa02 f60e 	lsl.w	r6, r2, lr
 8001e72:	ea4c 0206 	orr.w	r2, ip, r6
      GPIOx->PUPDR = temp;
 8001e76:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001e78:	00e2      	lsls	r2, r4, #3
 8001e7a:	d55e      	bpl.n	8001f3a <HAL_GPIO_Init+0x16e>
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
 8001e7c:	4e32      	ldr	r6, [pc, #200]	; (8001f48 <HAL_GPIO_Init+0x17c>)
 8001e7e:	69b2      	ldr	r2, [r6, #24]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	61b2      	str	r2, [r6, #24]
 8001e86:	f023 0603 	bic.w	r6, r3, #3
 8001e8a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001e8e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e92:	f003 0c03 	and.w	ip, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001e96:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e9a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f20c 	lsl.w	r2, r2, ip
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8001ea4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ea8:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8001eac:	d015      	beq.n	8001eda <HAL_GPIO_Init+0x10e>
 8001eae:	4a27      	ldr	r2, [pc, #156]	; (8001f4c <HAL_GPIO_Init+0x180>)
 8001eb0:	4290      	cmp	r0, r2
 8001eb2:	d014      	beq.n	8001ede <HAL_GPIO_Init+0x112>
 8001eb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eb8:	4290      	cmp	r0, r2
 8001eba:	d012      	beq.n	8001ee2 <HAL_GPIO_Init+0x116>
 8001ebc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ec0:	4290      	cmp	r0, r2
 8001ec2:	d010      	beq.n	8001ee6 <HAL_GPIO_Init+0x11a>
 8001ec4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ec8:	4290      	cmp	r0, r2
 8001eca:	d00e      	beq.n	8001eea <HAL_GPIO_Init+0x11e>
 8001ecc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ed0:	4290      	cmp	r0, r2
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2205      	moveq	r2, #5
 8001ed6:	2206      	movne	r2, #6
 8001ed8:	e008      	b.n	8001eec <HAL_GPIO_Init+0x120>
 8001eda:	2200      	movs	r2, #0
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x120>
 8001ede:	2201      	movs	r2, #1
 8001ee0:	e004      	b.n	8001eec <HAL_GPIO_Init+0x120>
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	e002      	b.n	8001eec <HAL_GPIO_Init+0x120>
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x120>
 8001eea:	2204      	movs	r2, #4
 8001eec:	fa02 f20c 	lsl.w	r2, r2, ip
 8001ef0:	ea42 020e 	orr.w	r2, r2, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ef4:	60b2      	str	r2, [r6, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef6:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <HAL_GPIO_Init+0x184>)
 8001ef8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	ea6f 0e05 	mvn.w	lr, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001efe:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        {
          temp |= iocurrent;
 8001f02:	bf14      	ite	ne
 8001f04:	432e      	orrne	r6, r5
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001f06:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001f0a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001f0c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        { 
          temp |= iocurrent;
 8001f12:	bf14      	ite	ne
 8001f14:	432e      	orrne	r6, r5
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8001f16:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001f1a:	6056      	str	r6, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1c:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8001f22:	bf14      	ite	ne
 8001f24:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001f26:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001f2a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001f2c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f2e:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001f30:	bf54      	ite	pl
 8001f32:	ea0e 0506 	andpl.w	r5, lr, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001f36:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001f38:	60d5      	str	r5, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	f47f af49 	bne.w	8001dd4 <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  } 
}
 8001f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	48000400 	.word	0x48000400
 8001f50:	40010400 	.word	0x40010400

08001f54 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f54:	6903      	ldr	r3, [r0, #16]
 8001f56:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8001f58:	bf14      	ite	ne
 8001f5a:	2001      	movne	r0, #1
 8001f5c:	2000      	moveq	r0, #0
 8001f5e:	4770      	bx	lr

08001f60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f60:	b10a      	cbz	r2, 8001f66 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001f62:	8301      	strh	r1, [r0, #24]
 8001f64:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001f66:	8341      	strh	r1, [r0, #26]
 8001f68:	4770      	bx	lr

08001f6a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001f6a:	6943      	ldr	r3, [r0, #20]
 8001f6c:	4059      	eors	r1, r3
 8001f6e:	6141      	str	r1, [r0, #20]
 8001f70:	4770      	bx	lr

08001f72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001f72:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001f74:	4604      	mov	r4, r0
 8001f76:	2800      	cmp	r0, #0
 8001f78:	d046      	beq.n	8002008 <HAL_PCD_Init+0x96>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8001f80:	f002 f898 	bl	80040b4 <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8001f84:	6865      	ldr	r5, [r4, #4]
 8001f86:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	42a9      	cmp	r1, r5
 8001f8e:	f102 021c 	add.w	r2, r2, #28
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	d00e      	beq.n	8001fb6 <HAL_PCD_Init+0x44>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8001f98:	2001      	movs	r0, #1
   hpcd->IN_ep[i].num = i;
 8001f9a:	f802 1c1d 	strb.w	r1, [r2, #-29]

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8001f9e:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->IN_ep[i].num = i;
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8001fa2:	f802 3c1a 	strb.w	r3, [r2, #-26]
   hpcd->IN_ep[i].maxpacket =  0;
 8001fa6:	f842 3c11 	str.w	r3, [r2, #-17]
   hpcd->IN_ep[i].xfer_buff = 0;
 8001faa:	f842 3c0d 	str.w	r3, [r2, #-13]
   hpcd->IN_ep[i].xfer_len = 0;
 8001fae:	f842 3c09 	str.w	r3, [r2, #-9]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8001fb2:	4401      	add	r1, r0
 8001fb4:	e7ea      	b.n	8001f8c <HAL_PCD_Init+0x1a>
 8001fb6:	f104 02b5 	add.w	r2, r4, #181	; 0xb5
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8001fba:	42ab      	cmp	r3, r5
 8001fbc:	f102 021c 	add.w	r2, r2, #28
 8001fc0:	f04f 0000 	mov.w	r0, #0
 8001fc4:	d00d      	beq.n	8001fe2 <HAL_PCD_Init+0x70>
 {
   hpcd->OUT_ep[i].is_in = 0;
   hpcd->OUT_ep[i].num = i;
 8001fc6:	f802 3c1d 	strb.w	r3, [r2, #-29]
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0;
 8001fca:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].num = i;
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8001fce:	f802 0c1a 	strb.w	r0, [r2, #-26]
   hpcd->OUT_ep[i].maxpacket = 0;
 8001fd2:	f842 0c11 	str.w	r0, [r2, #-17]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001fd6:	f842 0c0d 	str.w	r0, [r2, #-13]
   hpcd->OUT_ep[i].xfer_len = 0;
 8001fda:	f842 0c09 	str.w	r0, [r2, #-9]
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8001fde:	3301      	adds	r3, #1
 8001fe0:	e7eb      	b.n	8001fba <HAL_PCD_Init+0x48>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8001fea:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8001fee:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8001ff2:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8001ff6:	f8a3 0050 	strh.w	r0, [r3, #80]	; 0x50
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8001ffa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 8001ffe:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;
 8002002:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141

 return HAL_OK;
 8002006:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8002008:	2001      	movs	r0, #1
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;

 return HAL_OK;
}
 800200a:	bd38      	pop	{r3, r4, r5, pc}

0800200c <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 800200c:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800200e:	2101      	movs	r1, #1
 8002010:	f000 ff19 	bl	8002e46 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8002014:	2000      	movs	r0, #0
 8002016:	bd08      	pop	{r3, pc}

08002018 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8002018:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800201c:	2b01      	cmp	r3, #1
 800201e:	d00f      	beq.n	8002040 <HAL_PCD_SetAddress+0x28>
 8002020:	2301      	movs	r3, #1
 8002022:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 8002026:	b921      	cbnz	r1, 8002032 <HAL_PCD_SetAddress+0x1a>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8002028:	6803      	ldr	r3, [r0, #0]
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8002030:	e001      	b.n	8002036 <HAL_PCD_SetAddress+0x1e>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8002032:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 8002036:	2300      	movs	r3, #0
 8002038:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 800203c:	4618      	mov	r0, r3
 800203e:	4770      	bx	lr
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8002040:	2002      	movs	r0, #2
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8002042:	4770      	bx	lr

08002044 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002044:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8002046:	b2cc      	uxtb	r4, r1
 8002048:	f014 0f80 	tst.w	r4, #128	; 0x80
 800204c:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8002050:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002054:	bf15      	itete	ne
 8002056:	fb05 0106 	mlane	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800205a:	fb05 0101 	mlaeq	r1, r5, r1, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800205e:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002060:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002062:	09e4      	lsrs	r4, r4, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8002064:	700e      	strb	r6, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002066:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8002068:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 800206a:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 800206e:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8002070:	2b01      	cmp	r3, #1
 8002072:	f000 8181 	beq.w	8002378 <HAL_PCD_EP_Open+0x334>
 8002076:	2301      	movs	r3, #1
 8002078:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 800207c:	78cc      	ldrb	r4, [r1, #3]
 800207e:	780a      	ldrb	r2, [r1, #0]
 8002080:	6803      	ldr	r3, [r0, #0]
 8002082:	2c03      	cmp	r4, #3
 8002084:	d82f      	bhi.n	80020e6 <HAL_PCD_EP_Open+0xa2>
 8002086:	e8df f004 	tbb	[pc, r4]
 800208a:	2202      	.short	0x2202
 800208c:	170d      	.short	0x170d
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 800208e:	b212      	sxth	r2, r2
 8002090:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002094:	b2a4      	uxth	r4, r4
 8002096:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 800209a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800209e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80020a2:	e01e      	b.n	80020e2 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 80020a4:	b212      	sxth	r2, r2
 80020a6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80020aa:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80020ae:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80020b2:	0424      	lsls	r4, r4, #16
 80020b4:	0c24      	lsrs	r4, r4, #16
 80020b6:	e014      	b.n	80020e2 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 80020b8:	b212      	sxth	r2, r2
 80020ba:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80020be:	b2a4      	uxth	r4, r4
 80020c0:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80020c4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80020c8:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
 80020cc:	e009      	b.n	80020e2 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 80020ce:	b212      	sxth	r2, r2
 80020d0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80020d4:	b2a4      	uxth	r4, r4
 80020d6:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80020da:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80020de:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80020e2:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 80020e6:	780a      	ldrb	r2, [r1, #0]
 80020e8:	b216      	sxth	r6, r2
 80020ea:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 80020ee:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 80020f2:	f024 02f0 	bic.w	r2, r4, #240	; 0xf0
 80020f6:	0512      	lsls	r2, r2, #20
 80020f8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80020fc:	0d12      	lsrs	r2, r2, #20
 80020fe:	432a      	orrs	r2, r5
 8002100:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002104:	7a8c      	ldrb	r4, [r1, #10]
 8002106:	780a      	ldrb	r2, [r1, #0]
 8002108:	2c00      	cmp	r4, #0
 800210a:	d175      	bne.n	80021f8 <HAL_PCD_EP_Open+0x1b4>
  {
    if (ep->is_in)
 800210c:	784d      	ldrb	r5, [r1, #1]
 800210e:	888c      	ldrh	r4, [r1, #4]
 8002110:	2608      	movs	r6, #8
 8002112:	b33d      	cbz	r5, 8002164 <HAL_PCD_EP_Open+0x120>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002114:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002118:	b2ad      	uxth	r5, r5
 800211a:	fb16 5202 	smlabb	r2, r6, r2, r5
 800211e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002122:	0864      	lsrs	r4, r4, #1
 8002124:	0064      	lsls	r4, r4, #1
 8002126:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800212a:	780c      	ldrb	r4, [r1, #0]
 800212c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002130:	0652      	lsls	r2, r2, #25
 8002132:	d50b      	bpl.n	800214c <HAL_PCD_EP_Open+0x108>
 8002134:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002138:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800213c:	0512      	lsls	r2, r2, #20
 800213e:	0d12      	lsrs	r2, r2, #20
 8002140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002144:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002148:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 800214c:	7809      	ldrb	r1, [r1, #0]
 800214e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002152:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800215a:	0412      	lsls	r2, r2, #16
 800215c:	0c12      	lsrs	r2, r2, #16
 800215e:	f082 0220 	eor.w	r2, r2, #32
 8002162:	e0fe      	b.n	8002362 <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002164:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8002168:	b2bf      	uxth	r7, r7
 800216a:	fb16 7202 	smlabb	r2, r6, r2, r7
 800216e:	3204      	adds	r2, #4
 8002170:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 8002174:	0864      	lsrs	r4, r4, #1
 8002176:	0064      	lsls	r4, r4, #1
 8002178:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 800217c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002180:	780c      	ldrb	r4, [r1, #0]
 8002182:	b292      	uxth	r2, r2
 8002184:	fb16 2204 	smlabb	r2, r6, r4, r2
 8002188:	68ce      	ldr	r6, [r1, #12]
 800218a:	2e3e      	cmp	r6, #62	; 0x3e
 800218c:	f102 0206 	add.w	r2, r2, #6
 8002190:	d90b      	bls.n	80021aa <HAL_PCD_EP_Open+0x166>
 8002192:	f3c6 144f 	ubfx	r4, r6, #5, #16
 8002196:	06f7      	lsls	r7, r6, #27
 8002198:	bf04      	itt	eq
 800219a:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 800219e:	b2a4      	uxtheq	r4, r4
 80021a0:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80021a4:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80021a8:	e006      	b.n	80021b8 <HAL_PCD_EP_Open+0x174>
 80021aa:	f3c6 044f 	ubfx	r4, r6, #1, #16
 80021ae:	07f6      	lsls	r6, r6, #31
 80021b0:	bf44      	itt	mi
 80021b2:	3401      	addmi	r4, #1
 80021b4:	b2a4      	uxthmi	r4, r4
 80021b6:	02a4      	lsls	r4, r4, #10
 80021b8:	b2a4      	uxth	r4, r4
 80021ba:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80021be:	780c      	ldrb	r4, [r1, #0]
 80021c0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80021c4:	0452      	lsls	r2, r2, #17
 80021c6:	d50b      	bpl.n	80021e0 <HAL_PCD_EP_Open+0x19c>
 80021c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80021cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021d0:	0512      	lsls	r2, r2, #20
 80021d2:	0d12      	lsrs	r2, r2, #20
 80021d4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80021d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021dc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80021e0:	7809      	ldrb	r1, [r1, #0]
 80021e2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80021e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021ee:	0412      	lsls	r2, r2, #16
 80021f0:	0c12      	lsrs	r2, r2, #16
 80021f2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80021f6:	e0b4      	b.n	8002362 <HAL_PCD_EP_Open+0x31e>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80021f8:	b212      	sxth	r2, r2
 80021fa:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 80021fe:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002202:	f424 74f8 	bic.w	r4, r4, #496	; 0x1f0
 8002206:	0524      	lsls	r4, r4, #20
 8002208:	0d24      	lsrs	r4, r4, #20
 800220a:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800220e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002212:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002216:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800221a:	780c      	ldrb	r4, [r1, #0]
 800221c:	2208      	movs	r2, #8
 800221e:	b2b6      	uxth	r6, r6
 8002220:	fb12 6604 	smlabb	r6, r2, r4, r6
 8002224:	88cc      	ldrh	r4, [r1, #6]
 8002226:	0864      	lsrs	r4, r4, #1
 8002228:	0064      	lsls	r4, r4, #1
 800222a:	f845 4016 	str.w	r4, [r5, r6, lsl #1]
 800222e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002232:	780e      	ldrb	r6, [r1, #0]
 8002234:	b2a4      	uxth	r4, r4
 8002236:	fb12 4206 	smlabb	r2, r2, r6, r4
 800223a:	890c      	ldrh	r4, [r1, #8]
 800223c:	3204      	adds	r2, #4
 800223e:	0864      	lsrs	r4, r4, #1
 8002240:	0064      	lsls	r4, r4, #1
 8002242:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8002246:	780c      	ldrb	r4, [r1, #0]
    
    if (ep->is_in==0)
 8002248:	784a      	ldrb	r2, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800224a:	b224      	sxth	r4, r4
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
    
    if (ep->is_in==0)
 800224c:	2a00      	cmp	r2, #0
 800224e:	d146      	bne.n	80022de <HAL_PCD_EP_Open+0x29a>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002250:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002254:	0457      	lsls	r7, r2, #17
 8002256:	d50b      	bpl.n	8002270 <HAL_PCD_EP_Open+0x22c>
 8002258:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800225c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002260:	0512      	lsls	r2, r2, #20
 8002262:	0d12      	lsrs	r2, r2, #20
 8002264:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002268:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800226c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002270:	780c      	ldrb	r4, [r1, #0]
 8002272:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002276:	0656      	lsls	r6, r2, #25
 8002278:	d50b      	bpl.n	8002292 <HAL_PCD_EP_Open+0x24e>
 800227a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800227e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002282:	0512      	lsls	r2, r2, #20
 8002284:	0d12      	lsrs	r2, r2, #20
 8002286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800228a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800228e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8002292:	780c      	ldrb	r4, [r1, #0]
 8002294:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002298:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800229c:	0512      	lsls	r2, r2, #20
 800229e:	0d12      	lsrs	r2, r2, #20
 80022a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022a4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80022a8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80022ac:	780c      	ldrb	r4, [r1, #0]
 80022ae:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022ba:	0412      	lsls	r2, r2, #16
 80022bc:	0c12      	lsrs	r2, r2, #16
 80022be:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80022c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022ca:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80022ce:	7809      	ldrb	r1, [r1, #0]
 80022d0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80022d4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80022d8:	0512      	lsls	r2, r2, #20
 80022da:	0d12      	lsrs	r2, r2, #20
 80022dc:	e041      	b.n	8002362 <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80022de:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022e2:	0455      	lsls	r5, r2, #17
 80022e4:	d50b      	bpl.n	80022fe <HAL_PCD_EP_Open+0x2ba>
 80022e6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80022ee:	0512      	lsls	r2, r2, #20
 80022f0:	0d12      	lsrs	r2, r2, #20
 80022f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80022f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022fa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80022fe:	780c      	ldrb	r4, [r1, #0]
 8002300:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002304:	0652      	lsls	r2, r2, #25
 8002306:	d50b      	bpl.n	8002320 <HAL_PCD_EP_Open+0x2dc>
 8002308:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800230c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002310:	0512      	lsls	r2, r2, #20
 8002312:	0d12      	lsrs	r2, r2, #20
 8002314:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002318:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800231c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8002320:	780c      	ldrb	r4, [r1, #0]
 8002322:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002326:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800232a:	0512      	lsls	r2, r2, #20
 800232c:	0d12      	lsrs	r2, r2, #20
 800232e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002332:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002336:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800233a:	780c      	ldrb	r4, [r1, #0]
 800233c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002340:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002344:	0512      	lsls	r2, r2, #20
 8002346:	0d12      	lsrs	r2, r2, #20
 8002348:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800234c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002350:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8002354:	7809      	ldrb	r1, [r1, #0]
 8002356:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800235a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800235e:	0492      	lsls	r2, r2, #18
 8002360:	0c92      	lsrs	r2, r2, #18
 8002362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002366:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800236a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800236e:	2300      	movs	r3, #0
 8002370:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 8002374:	4618      	mov	r0, r3
 8002376:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8002378:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 800237a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800237c <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800237c:	b2cb      	uxtb	r3, r1
 800237e:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8002382:	b530      	push	{r4, r5, lr}
 8002384:	f04f 021c 	mov.w	r2, #28
 8002388:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800238c:	bf15      	itete	ne
 800238e:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002392:	fb02 0101 	mlaeq	r1, r2, r1, r0
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002396:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002398:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800239a:	09db      	lsrs	r3, r3, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 800239c:	700c      	strb	r4, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800239e:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 80023a0:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	f000 80bf 	beq.w	8002528 <HAL_PCD_EP_Close+0x1ac>
 80023aa:	2301      	movs	r3, #1
 80023ac:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 80023b0:	780a      	ldrb	r2, [r1, #0]

  if (ep->doublebuffer == 0) 
 80023b2:	7a8d      	ldrb	r5, [r1, #10]
 80023b4:	784c      	ldrb	r4, [r1, #1]
 80023b6:	6803      	ldr	r3, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80023b8:	b212      	sxth	r2, r2
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 

  if (ep->doublebuffer == 0) 
 80023ba:	bb1d      	cbnz	r5, 8002404 <HAL_PCD_EP_Close+0x88>
  {
    if (ep->is_in)
 80023bc:	b184      	cbz	r4, 80023e0 <HAL_PCD_EP_Close+0x64>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80023be:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80023c2:	0664      	lsls	r4, r4, #25
 80023c4:	d55b      	bpl.n	800247e <HAL_PCD_EP_Close+0x102>
 80023c6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80023ca:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80023ce:	0524      	lsls	r4, r4, #20
 80023d0:	0d24      	lsrs	r4, r4, #20
 80023d2:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80023d6:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 80023da:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 80023de:	e04e      	b.n	800247e <HAL_PCD_EP_Close+0x102>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80023e0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80023e4:	0465      	lsls	r5, r4, #17
 80023e6:	f140 808d 	bpl.w	8002504 <HAL_PCD_EP_Close+0x188>
 80023ea:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80023ee:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80023f2:	0524      	lsls	r4, r4, #20
 80023f4:	0d24      	lsrs	r4, r4, #20
 80023f6:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80023fa:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80023fe:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8002402:	e07f      	b.n	8002504 <HAL_PCD_EP_Close+0x188>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8002404:	2c00      	cmp	r4, #0
 8002406:	d142      	bne.n	800248e <HAL_PCD_EP_Close+0x112>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002408:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800240c:	0464      	lsls	r4, r4, #17
 800240e:	d50b      	bpl.n	8002428 <HAL_PCD_EP_Close+0xac>
 8002410:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002414:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8002418:	0524      	lsls	r4, r4, #20
 800241a:	0d24      	lsrs	r4, r4, #20
 800241c:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8002420:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002424:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002428:	780c      	ldrb	r4, [r1, #0]
 800242a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800242e:	0655      	lsls	r5, r2, #25
 8002430:	d50b      	bpl.n	800244a <HAL_PCD_EP_Close+0xce>
 8002432:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002436:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800243a:	0512      	lsls	r2, r2, #20
 800243c:	0d12      	lsrs	r2, r2, #20
 800243e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002442:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002446:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800244a:	780c      	ldrb	r4, [r1, #0]
 800244c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002450:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002454:	0512      	lsls	r2, r2, #20
 8002456:	0d12      	lsrs	r2, r2, #20
 8002458:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800245c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002460:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8002464:	780c      	ldrb	r4, [r1, #0]
 8002466:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800246a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800246e:	0492      	lsls	r2, r2, #18
 8002470:	0c92      	lsrs	r2, r2, #18
 8002472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002476:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800247a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800247e:	7809      	ldrb	r1, [r1, #0]
 8002480:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002484:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002488:	0512      	lsls	r2, r2, #20
 800248a:	0d12      	lsrs	r2, r2, #20
 800248c:	e041      	b.n	8002512 <HAL_PCD_EP_Close+0x196>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800248e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002492:	0464      	lsls	r4, r4, #17
 8002494:	d50b      	bpl.n	80024ae <HAL_PCD_EP_Close+0x132>
 8002496:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800249a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800249e:	0524      	lsls	r4, r4, #20
 80024a0:	0d24      	lsrs	r4, r4, #20
 80024a2:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80024a6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80024aa:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80024ae:	780c      	ldrb	r4, [r1, #0]
 80024b0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80024b4:	0652      	lsls	r2, r2, #25
 80024b6:	d50b      	bpl.n	80024d0 <HAL_PCD_EP_Close+0x154>
 80024b8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80024bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80024c0:	0512      	lsls	r2, r2, #20
 80024c2:	0d12      	lsrs	r2, r2, #20
 80024c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024c8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80024cc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80024d0:	780c      	ldrb	r4, [r1, #0]
 80024d2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80024d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80024da:	0512      	lsls	r2, r2, #20
 80024dc:	0d12      	lsrs	r2, r2, #20
 80024de:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80024e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024e6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80024ea:	780c      	ldrb	r4, [r1, #0]
 80024ec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80024f0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80024f4:	0512      	lsls	r2, r2, #20
 80024f6:	0d12      	lsrs	r2, r2, #20
 80024f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002500:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8002504:	7809      	ldrb	r1, [r1, #0]
 8002506:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800250a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800250e:	0492      	lsls	r2, r2, #18
 8002510:	0c92      	lsrs	r2, r2, #18
 8002512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002516:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800251a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800251e:	2300      	movs	r3, #0
 8002520:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 8002524:	4618      	mov	r0, r3
 8002526:	bd30      	pop	{r4, r5, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 
 8002528:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 800252a:	bd30      	pop	{r4, r5, pc}

0800252c <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800252c:	b570      	push	{r4, r5, r6, lr}
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800252e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002532:	241c      	movs	r4, #28
 8002534:	fb04 0401 	mla	r4, r4, r1, r0
 8002538:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
 800253c:	606a      	str	r2, [r5, #4]
  ep->xfer_len = len;
  ep->xfer_count = 0;
 800253e:	2200      	movs	r2, #0
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 8002540:	60ab      	str	r3, [r5, #8]
  ep->xfer_count = 0;
 8002542:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 8002546:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 800254a:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 800254e:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8002552:	2b01      	cmp	r3, #1
 8002554:	d062      	beq.n	800261c <HAL_PCD_EP_Receive+0xf0>
 8002556:	2301      	movs	r3, #1
 8002558:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800255c:	68ab      	ldr	r3, [r5, #8]
 800255e:	f8d4 40c0 	ldr.w	r4, [r4, #192]	; 0xc0
 8002562:	42a3      	cmp	r3, r4
    ep->xfer_len-=len; 
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0;
 8002564:	bf98      	it	ls
 8002566:	60aa      	strls	r2, [r5, #8]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8002568:	f04f 021c 	mov.w	r2, #28
 800256c:	fb02 0201 	mla	r2, r2, r1, r0
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8002570:	bf84      	itt	hi
 8002572:	1b1b      	subhi	r3, r3, r4
 8002574:	60ab      	strhi	r3, [r5, #8]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8002576:	f892 50be 	ldrb.w	r5, [r2, #190]	; 0xbe
 800257a:	bf88      	it	hi
 800257c:	4623      	movhi	r3, r4
 800257e:	32b0      	adds	r2, #176	; 0xb0
 8002580:	6804      	ldr	r4, [r0, #0]
 8002582:	b10d      	cbz	r5, 8002588 <HAL_PCD_EP_Receive+0x5c>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002584:	7955      	ldrb	r5, [r2, #5]
 8002586:	bb15      	cbnz	r5, 80025ce <HAL_PCD_EP_Receive+0xa2>
 8002588:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 800258c:	7912      	ldrb	r2, [r2, #4]
 800258e:	b2ad      	uxth	r5, r5
 8002590:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8002594:	2b3e      	cmp	r3, #62	; 0x3e
 8002596:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 800259a:	f105 0506 	add.w	r5, r5, #6
 800259e:	d90b      	bls.n	80025b8 <HAL_PCD_EP_Receive+0x8c>
 80025a0:	f3c3 124f 	ubfx	r2, r3, #5, #16
 80025a4:	06db      	lsls	r3, r3, #27
 80025a6:	bf04      	itt	eq
 80025a8:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80025ac:	b292      	uxtheq	r2, r2
 80025ae:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80025b2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80025b6:	e006      	b.n	80025c6 <HAL_PCD_EP_Receive+0x9a>
 80025b8:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80025bc:	07db      	lsls	r3, r3, #31
 80025be:	bf44      	itt	mi
 80025c0:	3201      	addmi	r2, #1
 80025c2:	b292      	uxthmi	r2, r2
 80025c4:	0292      	lsls	r2, r2, #10
 80025c6:	b292      	uxth	r2, r2
 80025c8:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 80025cc:	e00c      	b.n	80025e8 <HAL_PCD_EP_Receive+0xbc>
 80025ce:	2d01      	cmp	r5, #1
 80025d0:	bf01      	itttt	eq
 80025d2:	f8b4 5050 	ldrheq.w	r5, [r4, #80]	; 0x50
 80025d6:	7912      	ldrbeq	r2, [r2, #4]
 80025d8:	b2ad      	uxtheq	r5, r5
 80025da:	eb05 02c2 	addeq.w	r2, r5, r2, lsl #3
 80025de:	bf04      	itt	eq
 80025e0:	eb04 0242 	addeq.w	r2, r4, r2, lsl #1
 80025e4:	f8c2 340c 	streq.w	r3, [r2, #1036]	; 0x40c
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80025e8:	231c      	movs	r3, #28
 80025ea:	fb03 0101 	mla	r1, r3, r1, r0
 80025ee:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 80025f2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80025f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fe:	041b      	lsls	r3, r3, #16
 8002600:	0c1b      	lsrs	r3, r3, #16
 8002602:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800260e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 8002612:	2300      	movs	r3, #0
 8002614:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8002618:	4618      	mov	r0, r3
 800261a:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
 800261c:	2002      	movs	r0, #2
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 800261e:	bd70      	pop	{r4, r5, r6, pc}

08002620 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8002620:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002624:	231c      	movs	r3, #28
 8002626:	fb03 0001 	mla	r0, r3, r1, r0
}
 800262a:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 800262e:	4770      	bx	lr

08002630 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002632:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002636:	211c      	movs	r1, #28
 8002638:	fb01 0106 	mla	r1, r1, r6, r0
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800263c:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800263e:	f101 0038 	add.w	r0, r1, #56	; 0x38
 8002642:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 8002644:	6043      	str	r3, [r0, #4]
  ep->xfer_count = 0;
 8002646:	2200      	movs	r2, #0
  ep->is_in = 1;
 8002648:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 800264a:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1;
 800264c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8002650:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 8002654:	f894 5140 	ldrb.w	r5, [r4, #320]	; 0x140
 8002658:	429d      	cmp	r5, r3
 800265a:	f000 80a8 	beq.w	80027ae <HAL_PCD_EP_Transmit+0x17e>
 800265e:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002662:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002664:	6845      	ldr	r5, [r0, #4]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8002666:	271c      	movs	r7, #28
 8002668:	fb07 4706 	mla	r7, r7, r6, r4
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800266c:	429d      	cmp	r5, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 800266e:	bf88      	it	hi
 8002670:	1aed      	subhi	r5, r5, r3
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8002672:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8002676:	bf86      	itte	hi
 8002678:	6045      	strhi	r5, [r0, #4]
 800267a:	461d      	movhi	r5, r3
  }
  else
  {  
    len=ep->xfer_len;
    ep->xfer_len =0;
 800267c:	6042      	strls	r2, [r0, #4]
 800267e:	b2ab      	uxth	r3, r5
 8002680:	f107 0228 	add.w	r2, r7, #40	; 0x28
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8002684:	b989      	cbnz	r1, 80026aa <HAL_PCD_EP_Transmit+0x7a>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8002686:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002688:	8892      	ldrh	r2, [r2, #4]
 800268a:	6820      	ldr	r0, [r4, #0]
 800268c:	f000 fbb3 	bl	8002df6 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8002690:	6821      	ldr	r1, [r4, #0]
 8002692:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002696:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800269a:	b292      	uxth	r2, r2
 800269c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80026a0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80026a4:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 80026a8:	e067      	b.n	800277a <HAL_PCD_EP_Transmit+0x14a>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026aa:	7852      	ldrb	r2, [r2, #1]
 80026ac:	6820      	ldr	r0, [r4, #0]
 80026ae:	bb1a      	cbnz	r2, 80026f8 <HAL_PCD_EP_Transmit+0xc8>
 80026b0:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80026b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80026b8:	b289      	uxth	r1, r1
 80026ba:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80026be:	2d3e      	cmp	r5, #62	; 0x3e
 80026c0:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 80026c4:	f101 0106 	add.w	r1, r1, #6
 80026c8:	d90b      	bls.n	80026e2 <HAL_PCD_EP_Transmit+0xb2>
 80026ca:	f3c5 124f 	ubfx	r2, r5, #5, #16
 80026ce:	06ed      	lsls	r5, r5, #27
 80026d0:	bf04      	itt	eq
 80026d2:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80026d6:	b292      	uxtheq	r2, r2
 80026d8:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80026dc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80026e0:	e006      	b.n	80026f0 <HAL_PCD_EP_Transmit+0xc0>
 80026e2:	f3c5 024f 	ubfx	r2, r5, #1, #16
 80026e6:	07ed      	lsls	r5, r5, #31
 80026e8:	bf44      	itt	mi
 80026ea:	3201      	addmi	r2, #1
 80026ec:	b292      	uxthmi	r2, r2
 80026ee:	0292      	lsls	r2, r2, #10
 80026f0:	b292      	uxth	r2, r2
 80026f2:	f847 2011 	str.w	r2, [r7, r1, lsl #1]
 80026f6:	e00d      	b.n	8002714 <HAL_PCD_EP_Transmit+0xe4>
 80026f8:	2a01      	cmp	r2, #1
 80026fa:	bf01      	itttt	eq
 80026fc:	f8b0 2050 	ldrheq.w	r2, [r0, #80]	; 0x50
 8002700:	f897 1028 	ldrbeq.w	r1, [r7, #40]	; 0x28
 8002704:	b292      	uxtheq	r2, r2
 8002706:	eb02 02c1 	addeq.w	r2, r2, r1, lsl #3
 800270a:	bf04      	itt	eq
 800270c:	eb00 0242 	addeq.w	r2, r0, r2, lsl #1
 8002710:	f8c2 540c 	streq.w	r5, [r2, #1036]	; 0x40c
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8002714:	251c      	movs	r5, #28
 8002716:	fb05 4206 	mla	r2, r5, r6, r4
 800271a:	f102 0128 	add.w	r1, r2, #40	; 0x28
 800271e:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 8002722:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8002726:	fb05 4506 	mla	r5, r5, r6, r4
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 800272a:	067f      	lsls	r7, r7, #25
    {
      pmabuffer = ep->pmaaddr1;
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 800272c:	bf54      	ite	pl
 800272e:	88ca      	ldrhpl	r2, [r1, #6]
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
    {
      pmabuffer = ep->pmaaddr1;
 8002730:	8e12      	ldrhmi	r2, [r2, #48]	; 0x30
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8002732:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8002734:	f000 fb5f 	bl	8002df6 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 8002738:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800273c:	6822      	ldr	r2, [r4, #0]
 800273e:	b963      	cbnz	r3, 800275a <HAL_PCD_EP_Transmit+0x12a>
 8002740:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002744:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800274c:	051b      	lsls	r3, r3, #20
 800274e:	0d1b      	lsrs	r3, r3, #20
 8002750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002754:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002758:	e00d      	b.n	8002776 <HAL_PCD_EP_Transmit+0x146>
 800275a:	2b01      	cmp	r3, #1
 800275c:	d10d      	bne.n	800277a <HAL_PCD_EP_Transmit+0x14a>
 800275e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002762:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800276a:	051b      	lsls	r3, r3, #20
 800276c:	0d1b      	lsrs	r3, r3, #20
 800276e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002776:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800277a:	231c      	movs	r3, #28
 800277c:	fb03 4606 	mla	r6, r3, r6, r4
 8002780:	6822      	ldr	r2, [r4, #0]
 8002782:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8002786:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800278a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800278e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002792:	041b      	lsls	r3, r3, #16
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800279a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 80027a2:	2000      	movs	r0, #0
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027a4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd);
 80027a8:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
 80027ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
 80027ae:	2002      	movs	r0, #2
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
  
  __HAL_UNLOCK(hpcd);
     
  return HAL_OK;
}
 80027b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080027b2 <HAL_PCD_IRQHandler>:
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80027b2:	6803      	ldr	r3, [r0, #0]
 80027b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027b8:	b21b      	sxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027be:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80027c0:	db11      	blt.n	80027e6 <HAL_PCD_IRQHandler+0x34>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80027c8:	0552      	lsls	r2, r2, #21
 80027ca:	f140 81e7 	bpl.w	8002b9c <HAL_PCD_IRQHandler+0x3ea>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027ce:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 80027d2:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80027d8:	f001 fcd6 	bl	8004188 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 80027dc:	4620      	mov	r0, r4
 80027de:	2100      	movs	r1, #0
 80027e0:	f7ff fc1a 	bl	8002018 <HAL_PCD_SetAddress>
 80027e4:	e1da      	b.n	8002b9c <HAL_PCD_IRQHandler+0x3ea>
{
  PCD_EPTypeDef *ep;
  uint16_t count=0;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80027ec:	6820      	ldr	r0, [r4, #0]
 80027ee:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	0419      	lsls	r1, r3, #16
 80027f6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80027fa:	d5e2      	bpl.n	80027c2 <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027fc:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (EPindex == 0)
 8002800:	f015 050f 	ands.w	r5, r5, #15
 8002804:	f040 80b7 	bne.w	8002976 <HAL_PCD_IRQHandler+0x1c4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8002808:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800280c:	8803      	ldrh	r3, [r0, #0]
    if (EPindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800280e:	f001 0110 	and.w	r1, r1, #16
 8002812:	b289      	uxth	r1, r1
 8002814:	bb59      	cbnz	r1, 800286e <HAL_PCD_IRQHandler+0xbc>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002816:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	041b      	lsls	r3, r3, #16
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002824:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002828:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800282c:	b29b      	uxth	r3, r3
 800282e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002832:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8002836:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002838:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 800283c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002840:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8002842:	4413      	add	r3, r2
 8002844:	63a3      	str	r3, [r4, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8002846:	4620      	mov	r0, r4
 8002848:	f001 fc92 	bl	8004170 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 800284c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0cb      	beq.n	80027ec <HAL_PCD_IRQHandler+0x3a>
 8002854:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002856:	2a00      	cmp	r2, #0
 8002858:	d1c8      	bne.n	80027ec <HAL_PCD_IRQHandler+0x3a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800285a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800285e:	6821      	ldr	r1, [r4, #0]
 8002860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002864:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8002868:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800286c:	e7be      	b.n	80027ec <HAL_PCD_IRQHandler+0x3a>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800286e:	b29b      	uxth	r3, r3
 8002870:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8002874:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002878:	051f      	lsls	r7, r3, #20
 800287a:	d51f      	bpl.n	80028bc <HAL_PCD_IRQHandler+0x10a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800287c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002880:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8002884:	b29b      	uxth	r3, r3
 8002886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800288a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800288e:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002892:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800289a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800289e:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 80028a2:	f000 fabf 	bl	8002e24 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80028a6:	6822      	ldr	r2, [r4, #0]
 80028a8:	8813      	ldrh	r3, [r2, #0]
 80028aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ae:	051b      	lsls	r3, r3, #20
 80028b0:	0d1b      	lsrs	r3, r3, #20
 80028b2:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80028b4:	4620      	mov	r0, r4
 80028b6:	f001 fc4b 	bl	8004150 <HAL_PCD_SetupStageCallback>
 80028ba:	e797      	b.n	80027ec <HAL_PCD_IRQHandler+0x3a>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 80028bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80028c0:	b21b      	sxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	da92      	bge.n	80027ec <HAL_PCD_IRQHandler+0x3a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028c6:	8803      	ldrh	r3, [r0, #0]
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	051b      	lsls	r3, r3, #20
 80028ce:	0d1b      	lsrs	r3, r3, #20
 80028d0:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028d2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80028d6:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 80028da:	b29b      	uxth	r3, r3
 80028dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80028e0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80028e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80028e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ec:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          
          if (ep->xfer_count != 0)
 80028f0:	b163      	cbz	r3, 800290c <HAL_PCD_IRQHandler+0x15a>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80028f2:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 80028f6:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80028fa:	f000 fa93 	bl	8002e24 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80028fe:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8002902:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8002906:	4413      	add	r3, r2
 8002908:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 800290c:	4620      	mov	r0, r4
 800290e:	2100      	movs	r1, #0
 8002910:	f001 fc25 	bl	800415e <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002914:	6822      	ldr	r2, [r4, #0]
 8002916:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 800291a:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800291e:	2d3e      	cmp	r5, #62	; 0x3e
 8002920:	b289      	uxth	r1, r1
 8002922:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8002926:	f101 0106 	add.w	r1, r1, #6
 800292a:	d90b      	bls.n	8002944 <HAL_PCD_IRQHandler+0x192>
 800292c:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8002930:	06ee      	lsls	r6, r5, #27
 8002932:	bf04      	itt	eq
 8002934:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8002938:	b29b      	uxtheq	r3, r3
 800293a:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 800293e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002942:	e006      	b.n	8002952 <HAL_PCD_IRQHandler+0x1a0>
 8002944:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002948:	07ed      	lsls	r5, r5, #31
 800294a:	bf44      	itt	mi
 800294c:	3301      	addmi	r3, #1
 800294e:	b29b      	uxthmi	r3, r3
 8002950:	029b      	lsls	r3, r3, #10
 8002952:	b29b      	uxth	r3, r3
 8002954:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002958:	8813      	ldrh	r3, [r2, #0]
 800295a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	041b      	lsls	r3, r3, #16
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800296a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002972:	8013      	strh	r3, [r2, #0]
 8002974:	e73a      	b.n	80027ec <HAL_PCD_IRQHandler+0x3a>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8002976:	b22f      	sxth	r7, r5
 8002978:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 800297c:	b29b      	uxth	r3, r3
 800297e:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8002982:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002986:	b21b      	sxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	f280 8084 	bge.w	8002a96 <HAL_PCD_IRQHandler+0x2e4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800298e:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8002992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002996:	051b      	lsls	r3, r3, #20
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8002998:	221c      	movs	r2, #28
 800299a:	fb02 4205 	mla	r2, r2, r5, r4
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800299e:	0d1b      	lsrs	r3, r3, #20
 80029a0:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 80029a4:	f102 0cb8 	add.w	ip, r2, #184	; 0xb8
 80029a8:	f89c 3006 	ldrb.w	r3, [ip, #6]
 80029ac:	f102 0eb0 	add.w	lr, r2, #176	; 0xb0
 80029b0:	b9b3      	cbnz	r3, 80029e0 <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029b2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80029b6:	f89e 1004 	ldrb.w	r1, [lr, #4]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80029c0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80029c4:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 80029c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 80029cc:	2e00      	cmp	r6, #0
 80029ce:	d040      	beq.n	8002a52 <HAL_PCD_IRQHandler+0x2a0>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80029d0:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 80029d4:	f8be 2008 	ldrh.w	r2, [lr, #8]
 80029d8:	4633      	mov	r3, r6
 80029da:	f000 fa23 	bl	8002e24 <PCD_ReadPMA>
 80029de:	e038      	b.n	8002a52 <HAL_PCD_IRQHandler+0x2a0>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80029e0:	f89e 6004 	ldrb.w	r6, [lr, #4]
 80029e4:	b233      	sxth	r3, r6
 80029e6:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029ea:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80029ee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029f2:	b289      	uxth	r1, r1
 80029f4:	f04f 0308 	mov.w	r3, #8
 80029f8:	fb13 1306 	smlabb	r3, r3, r6, r1
 80029fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8002a00:	d009      	beq.n	8002a16 <HAL_PCD_IRQHandler+0x264>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a02:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 8002a06:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8002a0a:	b186      	cbz	r6, 8002a2e <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a0c:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8002a10:	f8be 200a 	ldrh.w	r2, [lr, #10]
 8002a14:	e008      	b.n	8002a28 <HAL_PCD_IRQHandler+0x276>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a16:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8002a1a:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8002a1e:	b136      	cbz	r6, 8002a2e <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a20:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8002a24:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8002a28:	4633      	mov	r3, r6
 8002a2a:	f000 f9fb 	bl	8002e24 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8002a2e:	231c      	movs	r3, #28
 8002a30:	fb03 4305 	mla	r3, r3, r5, r4
 8002a34:	6822      	ldr	r2, [r4, #0]
 8002a36:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8002a3a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a42:	051b      	lsls	r3, r3, #20
 8002a44:	0d1b      	lsrs	r3, r3, #20
 8002a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a4e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8002a52:	211c      	movs	r1, #28
 8002a54:	fb01 4105 	mla	r1, r1, r5, r4
 8002a58:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 8002a5c:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8002a60:	4433      	add	r3, r6
 8002a62:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8002a66:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 8002a6a:	4432      	add	r2, r6
 8002a6c:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8002a70:	b11b      	cbz	r3, 8002a7a <HAL_PCD_IRQHandler+0x2c8>
 8002a72:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 8002a76:	4286      	cmp	r6, r0
 8002a78:	d208      	bcs.n	8002a8c <HAL_PCD_IRQHandler+0x2da>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a7a:	231c      	movs	r3, #28
 8002a7c:	fb03 4305 	mla	r3, r3, r5, r4
 8002a80:	4620      	mov	r0, r4
 8002a82:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8002a86:	f001 fb6a 	bl	800415e <HAL_PCD_DataOutStageCallback>
 8002a8a:	e004      	b.n	8002a96 <HAL_PCD_IRQHandler+0x2e4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 8002a92:	f7ff fd4b 	bl	800252c <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8002a96:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002a9a:	0618      	lsls	r0, r3, #24
 8002a9c:	f57f aea6 	bpl.w	80027ec <HAL_PCD_IRQHandler+0x3a>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8002aa0:	6820      	ldr	r0, [r4, #0]
 8002aa2:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8002aa6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	041b      	lsls	r3, r3, #16
 8002ab0:	0c1b      	lsrs	r3, r3, #16
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8002ab2:	221c      	movs	r2, #28
 8002ab4:	fb02 4205 	mla	r2, r2, r5, r4
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8002ab8:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8002abc:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8002ac0:	f102 0628 	add.w	r6, r2, #40	; 0x28
 8002ac4:	b9a3      	cbnz	r3, 8002af0 <HAL_PCD_IRQHandler+0x33e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ac6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002aca:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002ad4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002ad8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d03a      	beq.n	8002b5c <HAL_PCD_IRQHandler+0x3aa>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002ae6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002ae8:	88b2      	ldrh	r2, [r6, #4]
 8002aea:	f000 f984 	bl	8002df6 <PCD_WritePMA>
 8002aee:	e035      	b.n	8002b5c <HAL_PCD_IRQHandler+0x3aa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002af0:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 8002af4:	b23b      	sxth	r3, r7
 8002af6:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002afa:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002afe:	f013 0f40 	tst.w	r3, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b02:	b289      	uxth	r1, r1
 8002b04:	f04f 0308 	mov.w	r3, #8
 8002b08:	fb13 1307 	smlabb	r3, r3, r7, r1
 8002b0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002b10:	d008      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x372>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1a:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8002b1c:	b163      	cbz	r3, 8002b38 <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8002b1e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002b20:	88f2      	ldrh	r2, [r6, #6]
 8002b22:	e007      	b.n	8002b34 <HAL_PCD_IRQHandler+0x382>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b24:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8002b2e:	b11b      	cbz	r3, 8002b38 <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8002b30:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002b32:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8002b34:	f000 f95f 	bl	8002df6 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8002b38:	231c      	movs	r3, #28
 8002b3a:	fb03 4305 	mla	r3, r3, r5, r4
 8002b3e:	6822      	ldr	r2, [r4, #0]
 8002b40:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8002b44:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002b48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b4c:	051b      	lsls	r3, r3, #20
 8002b4e:	0d1b      	lsrs	r3, r3, #20
 8002b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b58:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b5c:	6821      	ldr	r1, [r4, #0]
 8002b5e:	231c      	movs	r3, #28
 8002b60:	fb03 4505 	mla	r5, r3, r5, r4
 8002b64:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002b68:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002b72:	eb01 0343 	add.w	r3, r1, r3, lsl #1
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b76:	4620      	mov	r0, r4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b78:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8002b7c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002b7e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b82:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002b86:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8002b88:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8002b8a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 8002b8c:	63aa      	str	r2, [r5, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8002b8e:	b913      	cbnz	r3, 8002b96 <HAL_PCD_IRQHandler+0x3e4>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b90:	f001 faee 	bl	8004170 <HAL_PCD_DataInStageCallback>
 8002b94:	e62a      	b.n	80027ec <HAL_PCD_IRQHandler+0x3a>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002b96:	f7ff fd4b 	bl	8002630 <HAL_PCD_EP_Transmit>
 8002b9a:	e627      	b.n	80027ec <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002ba2:	0452      	lsls	r2, r2, #17
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 8002ba4:	bf44      	itt	mi
 8002ba6:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 8002baa:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8002bae:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002bb2:	0497      	lsls	r7, r2, #18
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8002bb4:	bf44      	itt	mi
 8002bb6:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8002bba:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8002bbe:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002bc2:	04d6      	lsls	r6, r2, #19
 8002bc4:	d513      	bpl.n	8002bee <HAL_PCD_IRQHandler+0x43c>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8002bc6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002bca:	f022 0204 	bic.w	r2, r2, #4
 8002bce:	0412      	lsls	r2, r2, #16
 8002bd0:	0c12      	lsrs	r2, r2, #16
 8002bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8002bd6:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 8002bda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8002bde:	4620      	mov	r0, r4
 8002be0:	f001 fae0 	bl	80041a4 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8002bea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002bf4:	0515      	lsls	r5, r2, #20
 8002bf6:	d518      	bpl.n	8002c2a <HAL_PCD_IRQHandler+0x478>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8002bf8:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8002bfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002c00:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002c04:	b292      	uxth	r2, r2
 8002c06:	f042 0208 	orr.w	r2, r2, #8
 8002c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002c0e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002c12:	b292      	uxth	r2, r2
 8002c14:	f042 0204 	orr.w	r2, r2, #4
 8002c18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8002c1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c20:	04d8      	lsls	r0, r3, #19
 8002c22:	d402      	bmi.n	8002c2a <HAL_PCD_IRQHandler+0x478>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8002c24:	4620      	mov	r0, r4
 8002c26:	f001 fabc 	bl	80041a2 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002c30:	0591      	lsls	r1, r2, #22
 8002c32:	d506      	bpl.n	8002c42 <HAL_PCD_IRQHandler+0x490>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8002c34:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8002c38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f001 fa9f 	bl	8004180 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002c48:	05d2      	lsls	r2, r2, #23
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8002c4a:	bf44      	itt	mi
 8002c4c:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8002c50:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
}
 8002c54:	b003      	add	sp, #12
 8002c56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c58 <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002c58:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8002c5c:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c5e:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002c60:	d049      	beq.n	8002cf6 <HAL_PCD_EP_SetStall+0x9e>
   
  if ((0x80 & ep_addr) == 0x80)
 8002c62:	b2cc      	uxtb	r4, r1
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002c64:	2301      	movs	r3, #1
 8002c66:	221c      	movs	r2, #28
 8002c68:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  if ((0x80 & ep_addr) == 0x80)
 8002c6c:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002c70:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002c74:	bf15      	itete	ne
 8002c76:	fb02 0203 	mlane	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c7a:	fb02 0201 	mlaeq	r2, r2, r1, r0
   
  __HAL_LOCK(hpcd); 
   
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002c7e:	3228      	addne	r2, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c80:	32b4      	addeq	r2, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 8002c82:	2101      	movs	r1, #1
 8002c84:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7F;
 8002c86:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002c88:	09e3      	lsrs	r3, r4, #7
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8002c8a:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002c8c:	7053      	strb	r3, [r2, #1]
 8002c8e:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 8002c90:	b979      	cbnz	r1, 8002cb2 <HAL_PCD_EP_SetStall+0x5a>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002c92:	8813      	ldrh	r3, [r2, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ca2:	f083 0310 	eor.w	r3, r3, #16
 8002ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cae:	8013      	strh	r3, [r2, #0]
 8002cb0:	e01c      	b.n	8002cec <HAL_PCD_EP_SetStall+0x94>
 8002cb2:	b209      	sxth	r1, r1
  }
  else
  {
    if (ep->is_in)
 8002cb4:	b153      	cbz	r3, 8002ccc <HAL_PCD_EP_SetStall+0x74>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8002cb6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	f083 0310 	eor.w	r3, r3, #16
 8002cca:	e009      	b.n	8002ce0 <HAL_PCD_EP_SetStall+0x88>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 8002ccc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8002cec:	2300      	movs	r3, #0
 8002cee:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd10      	pop	{r4, pc}
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002cf6:	2002      	movs	r0, #2
    }
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8002cf8:	bd10      	pop	{r4, pc}

08002cfa <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8002cfa:	b2cb      	uxtb	r3, r1
 8002cfc:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d00:	b510      	push	{r4, lr}
 8002d02:	f04f 021c 	mov.w	r2, #28
 8002d06:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002d0a:	bf15      	itete	ne
 8002d0c:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d10:	fb02 0101 	mlaeq	r1, r2, r1, r0
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002d14:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d16:	31b4      	addeq	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002d18:	09db      	lsrs	r3, r3, #7
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8002d1e:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002d20:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8002d22:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d049      	beq.n	8002dbe <HAL_PCD_EP_ClrStall+0xc4>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8002d30:	780c      	ldrb	r4, [r1, #0]
  
  if (ep->is_in)
 8002d32:	784b      	ldrb	r3, [r1, #1]
 8002d34:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002d36:	b224      	sxth	r4, r4
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
  
  if (ep->is_in)
 8002d38:	b1db      	cbz	r3, 8002d72 <HAL_PCD_EP_ClrStall+0x78>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002d3a:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8002d3e:	065b      	lsls	r3, r3, #25
 8002d40:	d50b      	bpl.n	8002d5a <HAL_PCD_EP_ClrStall+0x60>
 8002d42:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8002d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d4a:	051b      	lsls	r3, r3, #20
 8002d4c:	0d1b      	lsrs	r3, r3, #20
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d56:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d5a:	7809      	ldrb	r1, [r1, #0]
 8002d5c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	0c1b      	lsrs	r3, r3, #16
 8002d6c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002d70:	e01a      	b.n	8002da8 <HAL_PCD_EP_ClrStall+0xae>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002d72:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8002d76:	045b      	lsls	r3, r3, #17
 8002d78:	d50b      	bpl.n	8002d92 <HAL_PCD_EP_ClrStall+0x98>
 8002d7a:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8002d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d82:	051b      	lsls	r3, r3, #20
 8002d84:	0d1b      	lsrs	r3, r3, #20
 8002d86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d8e:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8002d92:	7809      	ldrb	r1, [r1, #0]
 8002d94:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	0c1b      	lsrs	r3, r3, #16
 8002da4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 8002db4:	2300      	movs	r3, #0
 8002db6:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 8002dba:	4618      	mov	r0, r3
 8002dbc:	bd10      	pop	{r4, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8002dbe:	2002      	movs	r0, #2
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  }
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8002dc0:	bd10      	pop	{r4, pc}

08002dc2 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8002dc2:	f011 0f80 	tst.w	r1, #128	; 0x80
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8002dc6:	b530      	push	{r4, r5, lr}
 8002dc8:	f04f 051c 	mov.w	r5, #28
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002dcc:	bf1b      	ittet	ne
 8002dce:	f001 047f 	andne.w	r4, r1, #127	; 0x7f
 8002dd2:	fb05 0004 	mlane	r0, r5, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dd6:	fb05 0001 	mlaeq	r0, r5, r1, r0
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002dda:	3028      	addne	r0, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ddc:	bf08      	it	eq
 8002dde:	30b4      	addeq	r0, #180	; 0xb4
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002de0:	b912      	cbnz	r2, 8002de8 <HAL_PCDEx_PMAConfig+0x26>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8002de2:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8002de4:	8083      	strh	r3, [r0, #4]
 8002de6:	e004      	b.n	8002df2 <HAL_PCDEx_PMAConfig+0x30>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8002de8:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8002dea:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8002dec:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8002dee:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8002df0:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 8002df2:	2000      	movs	r0, #0
 8002df4:	bd30      	pop	{r4, r5, pc}

08002df6 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8002df6:	3301      	adds	r3, #1
 8002df8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002dfc:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8002dfe:	105b      	asrs	r3, r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002e00:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8002e04:	2400      	movs	r4, #0
 8002e06:	429c      	cmp	r4, r3
 8002e08:	f101 0102 	add.w	r1, r1, #2
 8002e0c:	d009      	beq.n	8002e22 <PCD_WritePMA+0x2c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002e0e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8002e12:	f811 0c02 	ldrb.w	r0, [r1, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002e16:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    *pdwVal++ = temp2;
 8002e1a:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002e1e:	3401      	adds	r4, #1
 8002e20:	e7f1      	b.n	8002e06 <PCD_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002e22:	bd30      	pop	{r4, r5, pc}

08002e24 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8002e24:	3301      	adds	r3, #1
 8002e26:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002e2a:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8002e2c:	105b      	asrs	r3, r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002e2e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8002e32:	2400      	movs	r4, #0
 8002e34:	429c      	cmp	r4, r3
 8002e36:	d005      	beq.n	8002e44 <PCD_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002e38:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002e3c:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002e40:	3401      	adds	r4, #1
 8002e42:	e7f7      	b.n	8002e34 <PCD_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8002e44:	bd10      	pop	{r4, pc}

08002e46 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: Device state
  * @retval None
  */
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8002e46:	4770      	bx	lr

08002e48 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002e48:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8002e4a:	6804      	ldr	r4, [r0, #0]
 8002e4c:	9d03      	ldr	r5, [sp, #12]
 8002e4e:	6860      	ldr	r0, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002e50:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8002e54:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 8002e58:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8002e5c:	f020 0003 	bic.w	r0, r0, #3
 8002e60:	4328      	orrs	r0, r5
 8002e62:	4303      	orrs	r3, r0
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8002e64:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8002e6e:	6062      	str	r2, [r4, #4]
 8002e70:	bd30      	pop	{r4, r5, pc}
	...

08002e74 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	4604      	mov	r4, r0
 8002e78:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8002e7a:	f7fe ff2f 	bl	8001cdc <HAL_GetTick>

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e7e:	6823      	ldr	r3, [r4, #0]
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8002e80:	4606      	mov	r6, r0

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e82:	6998      	ldr	r0, [r3, #24]
 8002e84:	f010 0010 	ands.w	r0, r0, #16
 8002e88:	d039      	beq.n	8002efe <I2C_IsAcknowledgeFailed+0x8a>
  {
    /* Generate stop if necessary only in case of I2C peripheral in MASTER mode */
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8002e8a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002e8e:	2a12      	cmp	r2, #18
 8002e90:	d007      	beq.n	8002ea2 <I2C_IsAcknowledgeFailed+0x2e>
 8002e92:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002e96:	2a52      	cmp	r2, #82	; 0x52
 8002e98:	d003      	beq.n	8002ea2 <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8002e9a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002e9e:	2a62      	cmp	r2, #98	; 0x62
 8002ea0:	d112      	bne.n	8002ec8 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* No need to generate the STOP condition if AUTOEND mode is enabled */
      /* Generate the STOP condition only in case of SOFTEND mode is enabled */
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	0190      	lsls	r0, r2, #6
 8002ea6:	d40f      	bmi.n	8002ec8 <I2C_IsAcknowledgeFailed+0x54>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	e00a      	b.n	8002ec8 <I2C_IsAcknowledgeFailed+0x54>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eb2:	699a      	ldr	r2, [r3, #24]
 8002eb4:	0692      	lsls	r2, r2, #26
 8002eb6:	d411      	bmi.n	8002edc <I2C_IsAcknowledgeFailed+0x68>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002eb8:	1c69      	adds	r1, r5, #1
 8002eba:	d0fa      	beq.n	8002eb2 <I2C_IsAcknowledgeFailed+0x3e>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002ebc:	b135      	cbz	r5, 8002ecc <I2C_IsAcknowledgeFailed+0x58>
 8002ebe:	f7fe ff0d 	bl	8001cdc <HAL_GetTick>
 8002ec2:	1b80      	subs	r0, r0, r6
 8002ec4:	42a8      	cmp	r0, r5
 8002ec6:	d801      	bhi.n	8002ecc <I2C_IsAcknowledgeFailed+0x58>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	e7f2      	b.n	8002eb2 <I2C_IsAcknowledgeFailed+0x3e>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8002ed8:	2003      	movs	r0, #3
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002edc:	2210      	movs	r2, #16
 8002ede:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	4a06      	ldr	r2, [pc, #24]	; (8002f00 <I2C_IsAcknowledgeFailed+0x8c>)
 8002ee8:	400a      	ands	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002eec:	2304      	movs	r3, #4
 8002eee:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 8002ef2:	2001      	movs	r0, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef4:	2300      	movs	r3, #0

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 8002ef6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    return HAL_ERROR;
  }
  return HAL_OK;
}
 8002efe:	bd70      	pop	{r4, r5, r6, pc}
 8002f00:	fe00e800 	.word	0xfe00e800

08002f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{  
 8002f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f08:	4604      	mov	r4, r0
 8002f0a:	460e      	mov	r6, r1
 8002f0c:	4690      	mov	r8, r2
 8002f0e:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7fe fee4 	bl	8001cdc <HAL_GetTick>
 8002f14:	4607      	mov	r7, r0
     
  /* Wait until flag is set */
  if(Status == RESET)
 8002f16:	f1b8 0f00 	cmp.w	r8, #0
 8002f1a:	d125      	bne.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0x64>
  {    
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	6993      	ldr	r3, [r2, #24]
 8002f20:	4033      	ands	r3, r6
 8002f22:	42b3      	cmp	r3, r6
 8002f24:	d00e      	beq.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x40>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002f26:	1c69      	adds	r1, r5, #1
 8002f28:	d0f9      	beq.n	8002f1e <I2C_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002f2a:	b17d      	cbz	r5, 8002f4c <I2C_WaitOnFlagUntilTimeout+0x48>
 8002f2c:	f7fe fed6 	bl	8001cdc <HAL_GetTick>
 8002f30:	1bc0      	subs	r0, r0, r7
 8002f32:	42a8      	cmp	r0, r5
 8002f34:	d9f2      	bls.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x18>
 8002f36:	e009      	b.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0x48>
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002f38:	1c6b      	adds	r3, r5, #1
 8002f3a:	d106      	bne.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0x46>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8002f3c:	6993      	ldr	r3, [r2, #24]
 8002f3e:	4033      	ands	r3, r6
 8002f40:	42b3      	cmp	r3, r6
 8002f42:	d0f9      	beq.n	8002f38 <I2C_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002f44:	2000      	movs	r0, #0
 8002f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002f4a:	b945      	cbnz	r5, 8002f5e <I2C_WaitOnFlagUntilTimeout+0x5a>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f52:	2300      	movs	r3, #0
 8002f54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8002f58:	2003      	movs	r0, #3
 8002f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002f5e:	f7fe febd 	bl	8001cdc <HAL_GetTick>
 8002f62:	1bc0      	subs	r0, r0, r7
 8002f64:	42a8      	cmp	r0, r5
 8002f66:	d8f1      	bhi.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8002f68:	6822      	ldr	r2, [r4, #0]
 8002f6a:	e7e7      	b.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x38>

08002f6c <I2C_WaitOnTXISFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)  
{  
 8002f6c:	b570      	push	{r4, r5, r6, lr}
 8002f6e:	4604      	mov	r4, r0
 8002f70:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8002f72:	f7fe feb3 	bl	8001cdc <HAL_GetTick>
 8002f76:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	079b      	lsls	r3, r3, #30
 8002f7e:	d41b      	bmi.n	8002fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8002f80:	4620      	mov	r0, r4
 8002f82:	4629      	mov	r1, r5
 8002f84:	f7ff ff76 	bl	8002e74 <I2C_IsAcknowledgeFailed>
 8002f88:	b9c0      	cbnz	r0, 8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002f8a:	1c6a      	adds	r2, r5, #1
 8002f8c:	d0f4      	beq.n	8002f78 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002f8e:	b96d      	cbnz	r5, 8002fac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f90:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8002f94:	f043 0320 	orr.w	r3, r3, #32
 8002f98:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        hi2c->State= HAL_I2C_STATE_READY;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002fa8:	2003      	movs	r0, #3
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002fac:	f7fe fe96 	bl	8001cdc <HAL_GetTick>
 8002fb0:	1b80      	subs	r0, r0, r6
 8002fb2:	42a8      	cmp	r0, r5
 8002fb4:	d9e0      	bls.n	8002f78 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 8002fb6:	e7eb      	b.n	8002f90 <I2C_WaitOnTXISFlagUntilTimeout+0x24>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
 8002fb8:	2000      	movs	r0, #0
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 8002fbc:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
}
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}

08002fc0 <I2C_RequestMemoryWrite>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8002fc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fc2:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8002fc8:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fca:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8002fcc:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fd2:	b2f2      	uxtb	r2, r6
 8002fd4:	f7ff ff38 	bl	8002e48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8002fd8:	4620      	mov	r0, r4
 8002fda:	9906      	ldr	r1, [sp, #24]
 8002fdc:	f7ff ffc6 	bl	8002f6c <I2C_WaitOnTXISFlagUntilTimeout>
 8002fe0:	b130      	cbz	r0, 8002ff0 <I2C_RequestMemoryWrite+0x30>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8002fe6:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 8002fe8:	bf0c      	ite	eq
 8002fea:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 8002fec:	2003      	movne	r0, #3
 8002fee:	e017      	b.n	8003020 <I2C_RequestMemoryWrite+0x60>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ff0:	2e01      	cmp	r6, #1
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	d008      	beq.n	8003008 <I2C_RequestMemoryWrite+0x48>
  }      
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 8002ff6:	0a2a      	lsrs	r2, r5, #8
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	9906      	ldr	r1, [sp, #24]
 8002ffe:	f7ff ffb5 	bl	8002f6c <I2C_WaitOnTXISFlagUntilTimeout>
 8003002:	2800      	cmp	r0, #0
 8003004:	d1ed      	bne.n	8002fe2 <I2C_RequestMemoryWrite+0x22>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	b2ed      	uxtb	r5, r5
 800300a:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800300c:	4620      	mov	r0, r4
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	2200      	movs	r2, #0
 8003012:	9b06      	ldr	r3, [sp, #24]
 8003014:	f7ff ff76 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 8003018:	2800      	cmp	r0, #0
 800301a:	bf14      	ite	ne
 800301c:	2003      	movne	r0, #3
 800301e:	2000      	moveq	r0, #0
  }

return HAL_OK;
}
 8003020:	b002      	add	sp, #8
 8003022:	bd70      	pop	{r4, r5, r6, pc}

08003024 <I2C_RequestMemoryRead>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 8003024:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003026:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 800302c:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800302e:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 8003030:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003032:	2300      	movs	r3, #0
 8003034:	b2f2      	uxtb	r2, r6
 8003036:	f7ff ff07 	bl	8002e48 <I2C_TransferConfig>
  
  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800303a:	4620      	mov	r0, r4
 800303c:	9906      	ldr	r1, [sp, #24]
 800303e:	f7ff ff95 	bl	8002f6c <I2C_WaitOnTXISFlagUntilTimeout>
 8003042:	b130      	cbz	r0, 8003052 <I2C_RequestMemoryRead+0x2e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003044:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003048:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 800304a:	bf0c      	ite	eq
 800304c:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 800304e:	2003      	movne	r0, #3
 8003050:	e017      	b.n	8003082 <I2C_RequestMemoryRead+0x5e>
    }
  }
  
  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003052:	2e01      	cmp	r6, #1
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	d008      	beq.n	800306a <I2C_RequestMemoryRead+0x46>
  }      
  /* If Mememory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 8003058:	0a2a      	lsrs	r2, r5, #8
 800305a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800305c:	4620      	mov	r0, r4
 800305e:	9906      	ldr	r1, [sp, #24]
 8003060:	f7ff ff84 	bl	8002f6c <I2C_WaitOnTXISFlagUntilTimeout>
 8003064:	2800      	cmp	r0, #0
 8003066:	d1ed      	bne.n	8003044 <I2C_RequestMemoryRead+0x20>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	b2ed      	uxtb	r5, r5
 800306c:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 800306e:	4620      	mov	r0, r4
 8003070:	2140      	movs	r1, #64	; 0x40
 8003072:	2200      	movs	r2, #0
 8003074:	9b06      	ldr	r3, [sp, #24]
 8003076:	f7ff ff45 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 800307a:	2800      	cmp	r0, #0
 800307c:	bf14      	ite	ne
 800307e:	2003      	movne	r0, #3
 8003080:	2000      	moveq	r0, #0
  }
  
  return HAL_OK;
}
 8003082:	b002      	add	sp, #8
 8003084:	bd70      	pop	{r4, r5, r6, pc}

08003086 <I2C_WaitOnSTOPFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{  
 8003086:	b570      	push	{r4, r5, r6, lr}
 8003088:	4604      	mov	r4, r0
 800308a:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 800308c:	f7fe fe26 	bl	8001cdc <HAL_GetTick>
 8003090:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	069b      	lsls	r3, r3, #26
 8003098:	d419      	bmi.n	80030ce <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800309a:	4620      	mov	r0, r4
 800309c:	4629      	mov	r1, r5
 800309e:	f7ff fee9 	bl	8002e74 <I2C_IsAcknowledgeFailed>
 80030a2:	b9b0      	cbnz	r0, 80030d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80030a4:	b96d      	cbnz	r5, 80030c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80030aa:	f043 0320 	orr.w	r3, r3, #32
 80030ae:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b8:	2300      	movs	r3, #0
 80030ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80030be:	2003      	movs	r0, #3
 80030c0:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80030c2:	f7fe fe0b 	bl	8001cdc <HAL_GetTick>
 80030c6:	1b80      	subs	r0, r0, r6
 80030c8:	42a8      	cmp	r0, r5
 80030ca:	d9e2      	bls.n	8003092 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 80030cc:	e7eb      	b.n	80030a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80030ce:	2000      	movs	r0, #0
 80030d0:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 80030d2:	2001      	movs	r0, #1

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 80030d4:	bd70      	pop	{r4, r5, r6, pc}

080030d6 <HAL_I2C_MspInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80030d6:	4770      	bx	lr

080030d8 <HAL_I2C_Init>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
 80030d8:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80030da:	4604      	mov	r4, r0
 80030dc:	2800      	cmp	r0, #0
 80030de:	d041      	beq.n	8003164 <HAL_I2C_Init+0x8c>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80030e0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80030e4:	b90b      	cbnz	r3, 80030ea <HAL_I2C_Init+0x12>
  {
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030e6:	f7ff fff6 	bl	80030d6 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ea:	2302      	movs	r3, #2
 80030ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	68e1      	ldr	r1, [r4, #12]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	f022 0201 	bic.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030fc:	6862      	ldr	r2, [r4, #4]
 80030fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003102:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800310a:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 800310c:	68a2      	ldr	r2, [r4, #8]
 800310e:	b142      	cbz	r2, 8003122 <HAL_I2C_Init+0x4a>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003110:	2901      	cmp	r1, #1
 8003112:	d103      	bne.n	800311c <HAL_I2C_Init+0x44>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003114:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	e007      	b.n	800312c <HAL_I2C_Init+0x54>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800311c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003120:	609a      	str	r2, [r3, #8]
    }
  }
  
  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003122:	2902      	cmp	r1, #2
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003124:	bf04      	itt	eq
 8003126:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800312a:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800312c:	685a      	ldr	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800312e:	6961      	ldr	r1, [r4, #20]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003130:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003134:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003138:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800313a:	6922      	ldr	r2, [r4, #16]
 800313c:	430a      	orrs	r2, r1
 800313e:	69a1      	ldr	r1, [r4, #24]
 8003140:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003144:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003146:	6a21      	ldr	r1, [r4, #32]
 8003148:	69e2      	ldr	r2, [r4, #28]
 800314a:	430a      	orrs	r2, r1
 800314c:	601a      	str	r2, [r3, #0]
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003156:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003158:	2301      	movs	r3, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315a:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 800315e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  return HAL_OK;
 8003162:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8003164:	2001      	movs	r0, #1
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  
  return HAL_OK;
}
 8003166:	bd10      	pop	{r4, pc}

08003168 <HAL_I2C_MspDeInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003168:	4770      	bx	lr

0800316a <HAL_I2C_DeInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800316a:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800316c:	4604      	mov	r4, r0
 800316e:	b188      	cbz	r0, 8003194 <HAL_I2C_DeInit+0x2a>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003170:	6802      	ldr	r2, [r0, #0]
  }
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003172:	2302      	movs	r3, #2
 8003174:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003178:	6813      	ldr	r3, [r2, #0]
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	6013      	str	r3, [r2, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003180:	f7ff fff2 	bl	8003168 <HAL_I2C_MspDeInit>
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003184:	2000      	movs	r0, #0
 8003186:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_RESET;
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800318a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_RESET;
 800318e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 8003192:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8003194:	2001      	movs	r0, #1
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
}
 8003196:	bd10      	pop	{r4, pc}

08003198 <HAL_I2C_Mem_Write>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003198:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 800319c:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80031a4:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 80031a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80031ac:	b2ed      	uxtb	r5, r5
 80031ae:	2d01      	cmp	r5, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b0:	4604      	mov	r4, r0
 80031b2:	4688      	mov	r8, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80031b4:	d164      	bne.n	8003280 <HAL_I2C_Mem_Write+0xe8>
  { 
    if((pData == NULL) || (Size == 0)) 
 80031b6:	f1b9 0f00 	cmp.w	r9, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_I2C_Mem_Write+0x28>
    {
      return  HAL_ERROR;                                    
 80031bc:	2001      	movs	r0, #1
 80031be:	e062      	b.n	8003286 <HAL_I2C_Mem_Write+0xee>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  { 
    if((pData == NULL) || (Size == 0)) 
 80031c0:	2e00      	cmp	r6, #0
 80031c2:	d0fb      	beq.n	80031bc <HAL_I2C_Mem_Write+0x24>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80031c4:	6807      	ldr	r7, [r0, #0]
 80031c6:	69bf      	ldr	r7, [r7, #24]
 80031c8:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 80031cc:	d158      	bne.n	8003280 <HAL_I2C_Mem_Write+0xe8>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ce:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 80031d2:	f1be 0f01 	cmp.w	lr, #1
 80031d6:	d053      	beq.n	8003280 <HAL_I2C_Mem_Write+0xe8>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 80031d8:	f04f 0e52 	mov.w	lr, #82	; 0x52
 80031dc:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 80031e8:	f8cd a000 	str.w	sl, [sp]
 80031ec:	f7ff fee8 	bl	8002fc0 <I2C_RequestMemoryWrite>
 80031f0:	b120      	cbz	r0, 80031fc <HAL_I2C_Mem_Write+0x64>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f6:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 80031fa:	e031      	b.n	8003260 <HAL_I2C_Mem_Write+0xc8>

    /* Set NBYTES to write and reload if size > 255 */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031fc:	9000      	str	r0, [sp, #0]
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 80031fe:	2eff      	cmp	r6, #255	; 0xff
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003200:	4620      	mov	r0, r4
 8003202:	4641      	mov	r1, r8
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 8003204:	d81c      	bhi.n	8003240 <HAL_I2C_Mem_Write+0xa8>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003206:	b2f2      	uxtb	r2, r6
 8003208:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800320c:	f7ff fe1c 	bl	8002e48 <I2C_TransferConfig>
      Sizetmp = Size;
 8003210:	4635      	mov	r5, r6
    }
    
    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003212:	4620      	mov	r0, r4
 8003214:	4651      	mov	r1, sl
 8003216:	f7ff fea9 	bl	8002f6c <I2C_WaitOnTXISFlagUntilTimeout>
 800321a:	b9f8      	cbnz	r0, 800325c <HAL_I2C_Mem_Write+0xc4>
          return HAL_TIMEOUT;
        }
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	f819 2b01 	ldrb.w	r2, [r9], #1
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
      Sizetmp--;
      Size--;
 8003224:	3e01      	subs	r6, #1

      if((Sizetmp == 0)&&(Size!=0))
 8003226:	3d01      	subs	r5, #1
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
      Sizetmp--;
      Size--;
 8003228:	b2b6      	uxth	r6, r6

      if((Sizetmp == 0)&&(Size!=0))
 800322a:	d110      	bne.n	800324e <HAL_I2C_Mem_Write+0xb6>
 800322c:	b18e      	cbz	r6, 8003252 <HAL_I2C_Mem_Write+0xba>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800322e:	4620      	mov	r0, r4
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	462a      	mov	r2, r5
 8003234:	4653      	mov	r3, sl
 8003236:	f7ff fe65 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 800323a:	bb18      	cbnz	r0, 8003284 <HAL_I2C_Mem_Write+0xec>
        }

        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800323c:	9500      	str	r5, [sp, #0]
 800323e:	e7de      	b.n	80031fe <HAL_I2C_Mem_Write+0x66>
 8003240:	22ff      	movs	r2, #255	; 0xff
 8003242:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003246:	f7ff fdff 	bl	8002e48 <I2C_TransferConfig>
          Sizetmp = 255;
 800324a:	25ff      	movs	r5, #255	; 0xff
 800324c:	e7e1      	b.n	8003212 <HAL_I2C_Mem_Write+0x7a>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }
      
    }while(Size > 0);
 800324e:	2e00      	cmp	r6, #0
 8003250:	d1df      	bne.n	8003212 <HAL_I2C_Mem_Write+0x7a>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8003252:	4620      	mov	r0, r4
 8003254:	2119      	movs	r1, #25
 8003256:	f7ff ff16 	bl	8003086 <I2C_WaitOnSTOPFlagUntilTimeout>
 800325a:	b120      	cbz	r0, 8003266 <HAL_I2C_Mem_Write+0xce>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003260:	2b04      	cmp	r3, #4
 8003262:	d10f      	bne.n	8003284 <HAL_I2C_Mem_Write+0xec>
 8003264:	e7aa      	b.n	80031bc <HAL_I2C_Mem_Write+0x24>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	2220      	movs	r2, #32
 800326a:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	4a07      	ldr	r2, [pc, #28]	; (800328c <HAL_I2C_Mem_Write+0xf4>)
 8003270:	400a      	ands	r2, r1
 8003272:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY; 	  
 8003274:	2301      	movs	r3, #1
 8003276:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 800327e:	e002      	b.n	8003286 <HAL_I2C_Mem_Write+0xee>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2002      	movs	r0, #2
 8003282:	e000      	b.n	8003286 <HAL_I2C_Mem_Write+0xee>
      if((Sizetmp == 0)&&(Size!=0))
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
 8003284:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003286:	b002      	add	sp, #8
 8003288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800328c:	fe00e800 	.word	0xfe00e800

08003290 <HAL_I2C_Mem_Read>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003290:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003294:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003298:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800329c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 80032a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80032a4:	b2ed      	uxtb	r5, r5
 80032a6:	2d01      	cmp	r5, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a8:	4604      	mov	r4, r0
 80032aa:	4688      	mov	r8, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80032ac:	d16c      	bne.n	8003388 <HAL_I2C_Mem_Read+0xf8>
  {    
    if((pData == NULL) || (Size == 0)) 
 80032ae:	f1b9 0f00 	cmp.w	r9, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_I2C_Mem_Read+0x28>
    {
      return  HAL_ERROR;                                    
 80032b4:	2001      	movs	r0, #1
 80032b6:	e068      	b.n	800338a <HAL_I2C_Mem_Read+0xfa>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {    
    if((pData == NULL) || (Size == 0)) 
 80032b8:	2e00      	cmp	r6, #0
 80032ba:	d0fb      	beq.n	80032b4 <HAL_I2C_Mem_Read+0x24>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80032bc:	6807      	ldr	r7, [r0, #0]
 80032be:	69bf      	ldr	r7, [r7, #24]
 80032c0:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 80032c4:	d160      	bne.n	8003388 <HAL_I2C_Mem_Read+0xf8>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c6:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 80032ca:	f1be 0f01 	cmp.w	lr, #1
 80032ce:	d05b      	beq.n	8003388 <HAL_I2C_Mem_Read+0xf8>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 80032d0:	f04f 0e62 	mov.w	lr, #98	; 0x62
 80032d4:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d8:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032dc:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 80032e0:	f8cd a000 	str.w	sl, [sp]
 80032e4:	f7ff fe9e 	bl	8003024 <I2C_RequestMemoryRead>
 80032e8:	b120      	cbz	r0, 80032f4 <HAL_I2C_Mem_Read+0x64>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ea:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ee:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 80032f2:	e038      	b.n	8003366 <HAL_I2C_Mem_Read+0xd6>
 80032f4:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > 255 and generate RESTART */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
 80032f8:	2eff      	cmp	r6, #255	; 0xff
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	4620      	mov	r0, r4
 80032fe:	4641      	mov	r1, r8
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 8003300:	d821      	bhi.n	8003346 <HAL_I2C_Mem_Read+0xb6>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003302:	b2f2      	uxtb	r2, r6
 8003304:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003308:	f7ff fd9e 	bl	8002e48 <I2C_TransferConfig>
      Sizetmp = Size;
 800330c:	4635      	mov	r5, r6
    }
    
    do
    {  
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 800330e:	4620      	mov	r0, r4
 8003310:	2104      	movs	r1, #4
 8003312:	2200      	movs	r2, #0
 8003314:	4653      	mov	r3, sl
 8003316:	f7ff fdf5 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 800331a:	bb30      	cbnz	r0, 800336a <HAL_I2C_Mem_Read+0xda>
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 800331c:	6823      	ldr	r3, [r4, #0]

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 800331e:	3e01      	subs	r6, #1
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f809 3b01 	strb.w	r3, [r9], #1

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   

      if((Sizetmp == 0)&&(Size!=0))
 8003326:	3d01      	subs	r5, #1
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 8003328:	b2b6      	uxth	r6, r6

      if((Sizetmp == 0)&&(Size!=0))
 800332a:	d113      	bne.n	8003354 <HAL_I2C_Mem_Read+0xc4>
 800332c:	b1a6      	cbz	r6, 8003358 <HAL_I2C_Mem_Read+0xc8>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800332e:	4620      	mov	r0, r4
 8003330:	2180      	movs	r1, #128	; 0x80
 8003332:	462a      	mov	r2, r5
 8003334:	4653      	mov	r3, sl
 8003336:	f7ff fde5 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 800333a:	b9b0      	cbnz	r0, 800336a <HAL_I2C_Mem_Read+0xda>
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800333c:	9500      	str	r5, [sp, #0]
 800333e:	4620      	mov	r0, r4
 8003340:	4641      	mov	r1, r8
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 8003342:	2eff      	cmp	r6, #255	; 0xff
 8003344:	e7dc      	b.n	8003300 <HAL_I2C_Mem_Read+0x70>
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003346:	22ff      	movs	r2, #255	; 0xff
 8003348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800334c:	f7ff fd7c 	bl	8002e48 <I2C_TransferConfig>
          Sizetmp = 255;
 8003350:	25ff      	movs	r5, #255	; 0xff
 8003352:	e7dc      	b.n	800330e <HAL_I2C_Mem_Read+0x7e>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }

    }while(Size > 0);
 8003354:	2e00      	cmp	r6, #0
 8003356:	d1da      	bne.n	800330e <HAL_I2C_Mem_Read+0x7e>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8003358:	4620      	mov	r0, r4
 800335a:	2119      	movs	r1, #25
 800335c:	f7ff fe93 	bl	8003086 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003360:	b128      	cbz	r0, 800336e <HAL_I2C_Mem_Read+0xde>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003362:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003366:	2b04      	cmp	r3, #4
 8003368:	d0a4      	beq.n	80032b4 <HAL_I2C_Mem_Read+0x24>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 800336a:	2003      	movs	r0, #3
 800336c:	e00d      	b.n	800338a <HAL_I2C_Mem_Read+0xfa>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	2220      	movs	r2, #32
 8003372:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	4a06      	ldr	r2, [pc, #24]	; (8003390 <HAL_I2C_Mem_Read+0x100>)
 8003378:	400a      	ands	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY;
 800337c:	2301      	movs	r3, #1
 800337e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003382:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 8003386:	e000      	b.n	800338a <HAL_I2C_Mem_Read+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003388:	2002      	movs	r0, #2
  }
}
 800338a:	b002      	add	sp, #8
 800338c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003390:	fe00e800 	.word	0xfe00e800

08003394 <HAL_I2C_GetState>:
  * @param  hi2c : I2C handle
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  return hi2c->State;
 8003394:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8003398:	4770      	bx	lr

0800339a <SPI_WaitFlagStateUntilTimeout>:
  * @param State : flag state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 800339a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800339e:	4604      	mov	r4, r0
 80033a0:	460f      	mov	r7, r1
 80033a2:	4616      	mov	r6, r2
 80033a4:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80033a6:	f7fe fc99 	bl	8001cdc <HAL_GetTick>
 80033aa:	4680      	mov	r8, r0
     
  while((hspi->Instance->SR & Flag) != State)
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	403a      	ands	r2, r7
 80033b2:	42b2      	cmp	r2, r6
 80033b4:	d034      	beq.n	8003420 <SPI_WaitFlagStateUntilTimeout+0x86>
  {
    if(Timeout != HAL_MAX_DELAY)
 80033b6:	1c6a      	adds	r2, r5, #1
 80033b8:	d0f9      	beq.n	80033ae <SPI_WaitFlagStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80033ba:	b94d      	cbnz	r5, 80033d0 <SPI_WaitFlagStateUntilTimeout+0x36>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033c4:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033c6:	6862      	ldr	r2, [r4, #4]
 80033c8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80033cc:	d112      	bne.n	80033f4 <SPI_WaitFlagStateUntilTimeout+0x5a>
 80033ce:	e006      	b.n	80033de <SPI_WaitFlagStateUntilTimeout+0x44>
     
  while((hspi->Instance->SR & Flag) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80033d0:	f7fe fc84 	bl	8001cdc <HAL_GetTick>
 80033d4:	ebc8 0000 	rsb	r0, r8, r0
 80033d8:	42a8      	cmp	r0, r5
 80033da:	d9e7      	bls.n	80033ac <SPI_WaitFlagStateUntilTimeout+0x12>
 80033dc:	e7ee      	b.n	80033bc <SPI_WaitFlagStateUntilTimeout+0x22>
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033de:	68a2      	ldr	r2, [r4, #8]
 80033e0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80033e4:	d002      	beq.n	80033ec <SPI_WaitFlagStateUntilTimeout+0x52>
 80033e6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80033ea:	d103      	bne.n	80033f4 <SPI_WaitFlagStateUntilTimeout+0x5a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f2:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 80033f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80033f6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        {
          __HAL_SPI_RESET_CRC(hspi);
 80033fa:	bf01      	itttt	eq
 80033fc:	681a      	ldreq	r2, [r3, #0]
 80033fe:	f422 5200 	biceq.w	r2, r2, #8192	; 0x2000
 8003402:	601a      	streq	r2, [r3, #0]
 8003404:	681a      	ldreq	r2, [r3, #0]
 8003406:	bf04      	itt	eq
 8003408:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 800340c:	601a      	streq	r2, [r3, #0]
        }
        
        hspi->State= HAL_SPI_STATE_READY;
 800340e:	2301      	movs	r3, #1
 8003410:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003414:	2300      	movs	r3, #0
 8003416:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800341a:	2003      	movs	r0, #3
 800341c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 8003420:	2000      	movs	r0, #0
}
 8003422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003426 <SPI_WaitFifoStateUntilTimeout>:
  * @param State: Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 8003426:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800342a:	4604      	mov	r4, r0
 800342c:	460f      	mov	r7, r1
 800342e:	4616      	mov	r6, r2
 8003430:	461d      	mov	r5, r3
  __IO uint8_t tmpreg __attribute((unused));
  uint32_t tickstart = HAL_GetTick();
 8003432:	f7fe fc53 	bl	8001cdc <HAL_GetTick>
 8003436:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
 8003438:	6821      	ldr	r1, [r4, #0]
 800343a:	688a      	ldr	r2, [r1, #8]
 800343c:	403a      	ands	r2, r7
 800343e:	42b2      	cmp	r2, r6
 8003440:	d03b      	beq.n	80034ba <SPI_WaitFifoStateUntilTimeout+0x94>
  {
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003442:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 8003446:	d104      	bne.n	8003452 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8003448:	b91e      	cbnz	r6, 8003452 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800344a:	7b0b      	ldrb	r3, [r1, #12]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f88d 3007 	strb.w	r3, [sp, #7]
    }
    if(Timeout != HAL_MAX_DELAY)
 8003452:	1c6b      	adds	r3, r5, #1
 8003454:	d0f1      	beq.n	800343a <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003456:	b94d      	cbnz	r5, 800346c <SPI_WaitFifoStateUntilTimeout+0x46>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003460:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003462:	6862      	ldr	r2, [r4, #4]
 8003464:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003468:	d112      	bne.n	8003490 <SPI_WaitFifoStateUntilTimeout+0x6a>
 800346a:	e006      	b.n	800347a <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
    }
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800346c:	f7fe fc36 	bl	8001cdc <HAL_GetTick>
 8003470:	ebc8 0000 	rsb	r0, r8, r0
 8003474:	42a8      	cmp	r0, r5
 8003476:	d9df      	bls.n	8003438 <SPI_WaitFifoStateUntilTimeout+0x12>
 8003478:	e7ee      	b.n	8003458 <SPI_WaitFifoStateUntilTimeout+0x32>
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800347a:	68a2      	ldr	r2, [r4, #8]
 800347c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003480:	d002      	beq.n	8003488 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003482:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003486:	d103      	bne.n	8003490 <SPI_WaitFifoStateUntilTimeout+0x6a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348e:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8003490:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003492:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        {
          __HAL_SPI_RESET_CRC(hspi);
 8003496:	bf01      	itttt	eq
 8003498:	681a      	ldreq	r2, [r3, #0]
 800349a:	f422 5200 	biceq.w	r2, r2, #8192	; 0x2000
 800349e:	601a      	streq	r2, [r3, #0]
 80034a0:	681a      	ldreq	r2, [r3, #0]
 80034a2:	bf04      	itt	eq
 80034a4:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 80034a8:	601a      	streq	r2, [r3, #0]
        }
        
        hspi->State = HAL_SPI_STATE_READY;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034b0:	2300      	movs	r3, #0
 80034b2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80034b6:	2003      	movs	r0, #3
 80034b8:	e000      	b.n	80034bc <SPI_WaitFifoStateUntilTimeout+0x96>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 80034ba:	2000      	movs	r0, #0
}
 80034bc:	b002      	add	sp, #8
 80034be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080034c2 <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 80034c2:	b538      	push	{r3, r4, r5, lr}
 80034c4:	460d      	mov	r5, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 80034c6:	2200      	movs	r2, #0
 80034c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034cc:	462b      	mov	r3, r5
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 80034ce:	4604      	mov	r4, r0
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 80034d0:	f7ff ffa9 	bl	8003426 <SPI_WaitFifoStateUntilTimeout>
 80034d4:	4602      	mov	r2, r0
 80034d6:	b968      	cbnz	r0, 80034f4 <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80034d8:	4620      	mov	r0, r4
 80034da:	2180      	movs	r1, #128	; 0x80
 80034dc:	462b      	mov	r3, r5
 80034de:	f7ff ff5c 	bl	800339a <SPI_WaitFlagStateUntilTimeout>
 80034e2:	4602      	mov	r2, r0
 80034e4:	b930      	cbnz	r0, 80034f4 <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 80034e6:	4620      	mov	r0, r4
 80034e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034ec:	462b      	mov	r3, r5
 80034ee:	f7ff ff9a 	bl	8003426 <SPI_WaitFifoStateUntilTimeout>
 80034f2:	b130      	cbz	r0, 8003502 <SPI_EndRxTxTransaction+0x40>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 80034f4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80034f8:	f043 0320 	orr.w	r3, r3, #32
 80034fc:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 8003500:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8003502:	bd38      	pop	{r3, r4, r5, pc}

08003504 <HAL_SPI_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
 __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003504:	4770      	bx	lr

08003506 <HAL_SPI_Init>:
  *         in the SPI_InitTypeDef and create the associated handle.
  * @param  hspi: SPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003506:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;
  
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003508:	4604      	mov	r4, r0
 800350a:	2800      	cmp	r0, #0
 800350c:	d04c      	beq.n	80035a8 <HAL_SPI_Init+0xa2>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  
  hspi->State = HAL_SPI_STATE_BUSY;
 800350e:	2302      	movs	r3, #2
 8003510:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
 8003514:	f7ff fff6 	bl	8003504 <HAL_SPI_MspInit>
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003518:	6821      	ldr	r1, [r4, #0]
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800351a:	68e2      	ldr	r2, [r4, #12]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800351c:	680b      	ldr	r3, [r1, #0]
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800351e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	f04f 0300 	mov.w	r3, #0
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800352c:	d903      	bls.n	8003536 <HAL_SPI_Init+0x30>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800352e:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }
  
  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 8003530:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8003534:	e001      	b.n	800353a <HAL_SPI_Init+0x34>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003536:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  
  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800353a:	bf18      	it	ne
 800353c:	62a3      	strne	r3, [r4, #40]	; 0x28
  }
  
  /* Align the CRC Length on the data size */
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800353e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003540:	b92b      	cbnz	r3, 800354e <HAL_SPI_Init+0x48>
  {
    /* CRC Lengtht aligned on the data size : value set by default */
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003542:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003546:	bf8c      	ite	hi
 8003548:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800354a:	2301      	movls	r3, #1
 800354c:	6323      	str	r3, [r4, #48]	; 0x30
 800354e:	6865      	ldr	r5, [r4, #4]
 8003550:	68a6      	ldr	r6, [r4, #8]
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8003552:	69a3      	ldr	r3, [r4, #24]
 8003554:	432e      	orrs	r6, r5
 8003556:	6925      	ldr	r5, [r4, #16]
 8003558:	432e      	orrs	r6, r5
 800355a:	6965      	ldr	r5, [r4, #20]
 800355c:	432e      	orrs	r6, r5
 800355e:	69e5      	ldr	r5, [r4, #28]
 8003560:	432e      	orrs	r6, r5
 8003562:	6a25      	ldr	r5, [r4, #32]
 8003564:	432e      	orrs	r6, r5
 8003566:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003568:	432e      	orrs	r6, r5
 800356a:	f403 7500 	and.w	r5, r3, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800356e:	4335      	orrs	r5, r6
  }
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 8003570:	600d      	str	r5, [r1, #0]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
  
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003572:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003574:	2d02      	cmp	r5, #2
  {
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 8003576:	bf02      	ittt	eq
 8003578:	680d      	ldreq	r5, [r1, #0]
 800357a:	f445 6500 	orreq.w	r5, r5, #2048	; 0x800
 800357e:	600d      	streq	r5, [r1, #0]
 8003580:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003582:	432a      	orrs	r2, r5
 8003584:	6b65      	ldr	r5, [r4, #52]	; 0x34
  }
  
  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 8003586:	0c1b      	lsrs	r3, r3, #16
 8003588:	4315      	orrs	r5, r2
 800358a:	f003 0204 	and.w	r2, r3, #4
 800358e:	ea45 0302 	orr.w	r3, r5, r2
                         hspi->Init.DataSize ) | frxth;
 8003592:	4303      	orrs	r3, r0
    hspi->Instance->CR1|= SPI_CR1_CRCL;
  }
  
  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 8003594:	604b      	str	r3, [r1, #4]
                         hspi->Init.DataSize ) | frxth;
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 8003596:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003598:	610b      	str	r3, [r1, #16]
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800359a:	2000      	movs	r0, #0
  hspi->State= HAL_SPI_STATE_READY;
 800359c:	2301      	movs	r3, #1
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800359e:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 80035a2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  
  return HAL_OK;
 80035a6:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;
  
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  { 
    return HAL_ERROR;
 80035a8:	2001      	movs	r0, #1
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State= HAL_SPI_STATE_READY;
  
  return HAL_OK;
}
 80035aa:	bd70      	pop	{r4, r5, r6, pc}

080035ac <HAL_SPI_MspDeInit>:
  * @brief SPI MSP DeInit
  * @param hspi: SPI handle
  * @retval None
  */
 __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80035ac:	4770      	bx	lr

080035ae <HAL_SPI_DeInit>:
  * @brief  DeInitializes the SPI peripheral 
  * @param  hspi: SPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80035ae:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80035b0:	4604      	mov	r4, r0
 80035b2:	b188      	cbz	r0, 80035d8 <HAL_SPI_DeInit+0x2a>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
  
  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80035b4:	6802      	ldr	r2, [r0, #0]
  if(hspi == NULL)
  {
     return HAL_ERROR;
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035b6:	2302      	movs	r3, #2
 80035b8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  
  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80035bc:	6813      	ldr	r3, [r2, #0]
 80035be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035c2:	6013      	str	r3, [r2, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80035c4:	f7ff fff2 	bl	80035ac <HAL_SPI_MspDeInit>
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035c8:	2000      	movs	r0, #0
 80035ca:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State = HAL_SPI_STATE_RESET;
 80035ce:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  
  __HAL_UNLOCK(hspi);
 80035d2:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    
  return HAL_OK;
 80035d6:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
     return HAL_ERROR;
 80035d8:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_RESET;
  
  __HAL_UNLOCK(hspi);
    
  return HAL_OK;
}
 80035da:	bd10      	pop	{r4, pc}

080035dc <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80035dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint16_t tmpreg __attribute((unused)) = 0;
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 80035e0:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80035e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 80035e6:	f04f 0b00 	mov.w	fp, #0
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 80035ea:	2d01      	cmp	r5, #1
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80035ec:	4604      	mov	r4, r0
 80035ee:	4689      	mov	r9, r1
 80035f0:	4692      	mov	sl, r2
 80035f2:	4698      	mov	r8, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 80035f4:	f8ad b006 	strh.w	fp, [sp, #6]
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 80035f8:	d001      	beq.n	80035fe <HAL_SPI_TransmitReceive+0x22>
  {
    return HAL_BUSY;
 80035fa:	2002      	movs	r0, #2
 80035fc:	e138      	b.n	8003870 <HAL_SPI_TransmitReceive+0x294>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 80035fe:	2900      	cmp	r1, #0
 8003600:	f000 8133 	beq.w	800386a <HAL_SPI_TransmitReceive+0x28e>
 8003604:	2a00      	cmp	r2, #0
 8003606:	f000 8130 	beq.w	800386a <HAL_SPI_TransmitReceive+0x28e>
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 812d 	beq.w	800386a <HAL_SPI_TransmitReceive+0x28e>
  {
    return HAL_ERROR;
  }

  tickstart = HAL_GetTick();
 8003610:	f7fe fb64 	bl	8001cdc <HAL_GetTick>
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 8003614:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003618:	2b01      	cmp	r3, #1
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    return HAL_ERROR;
  }

  tickstart = HAL_GetTick();
 800361a:	4607      	mov	r7, r0
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 800361c:	d0ed      	beq.n	80035fa <HAL_SPI_TransmitReceive+0x1e>
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800361e:	2305      	movs	r3, #5
 8003620:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8003624:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003626:	6822      	ldr	r2, [r4, #0]
  }

  tickstart = HAL_GetTick();
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 8003628:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800362c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  {
    __HAL_SPI_RESET_CRC(hspi);
 8003630:	bf08      	it	eq
 8003632:	6813      	ldreq	r3, [r2, #0]
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003634:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    __HAL_SPI_RESET_CRC(hspi);
 8003638:	bf08      	it	eq
 800363a:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
  /* Process Locked */
  __HAL_LOCK(hspi); 
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = pRxData;
 800363e:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003642:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003646:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800364a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800364e:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 8003652:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    __HAL_SPI_RESET_CRC(hspi);
 8003656:	bf04      	itt	eq
 8003658:	6013      	streq	r3, [r2, #0]
 800365a:	6813      	ldreq	r3, [r2, #0]
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800365c:	68e1      	ldr	r1, [r4, #12]
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    __HAL_SPI_RESET_CRC(hspi);
 800365e:	bf04      	itt	eq
 8003660:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 8003664:	6013      	streq	r3, [r2, #0]
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8003666:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  {
    /* set fiforxthreshold according the reception data lenght: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800366a:	6853      	ldr	r3, [r2, #4]
  {
    __HAL_SPI_RESET_CRC(hspi);
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800366c:	d802      	bhi.n	8003674 <HAL_SPI_TransmitReceive+0x98>
 800366e:	f1b8 0f01 	cmp.w	r8, #1
 8003672:	d902      	bls.n	800367a <HAL_SPI_TransmitReceive+0x9e>
  {
    /* set fiforxthreshold according the reception data lenght: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003678:	e001      	b.n	800367e <HAL_SPI_TransmitReceive+0xa2>
  }
  else
  {
    /* set fiforxthreshold according the reception data lenght: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800367a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800367e:	6053      	str	r3, [r2, #4]
  }
  
  /* Check if the SPI is already enabled */ 
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8003680:	6813      	ldr	r3, [r2, #0]
 8003682:	0658      	lsls	r0, r3, #25
  {
    /* Enable SPI peripheral */    
    __HAL_SPI_ENABLE(hspi);
 8003684:	bf5e      	ittt	pl
 8003686:	6813      	ldrpl	r3, [r2, #0]
 8003688:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800368c:	6013      	strpl	r3, [r2, #0]
  }
  
  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800368e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003692:	d94b      	bls.n	800372c <HAL_SPI_TransmitReceive+0x150>
  {  
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 8003694:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003696:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 800369a:	2b00      	cmp	r3, #0
 800369c:	d034      	beq.n	8003708 <HAL_SPI_TransmitReceive+0x12c>
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	6891      	ldr	r1, [r2, #8]
 80036a2:	0789      	lsls	r1, r1, #30
 80036a4:	d511      	bpl.n	80036ca <HAL_SPI_TransmitReceive+0xee>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80036a8:	8809      	ldrh	r1, [r1, #0]
 80036aa:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80036ae:	3b01      	subs	r3, #1
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b0:	3102      	adds	r1, #2
        hspi->TxXferCount--;
 80036b2:	b29b      	uxth	r3, r3
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b4:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80036b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 80036b8:	b93b      	cbnz	r3, 80036ca <HAL_SPI_TransmitReceive+0xee>
 80036ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80036c0:	bf02      	ittt	eq
 80036c2:	6813      	ldreq	r3, [r2, #0]
 80036c4:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80036c8:	6013      	streq	r3, [r2, #0]
        } 
      }
      
      /* Wait until RXNE flag */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 80036ca:	b168      	cbz	r0, 80036e8 <HAL_SPI_TransmitReceive+0x10c>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	07d2      	lsls	r2, r2, #31
 80036d2:	d509      	bpl.n	80036e8 <HAL_SPI_TransmitReceive+0x10c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036d8:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036dc:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80036de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80036e2:	3b01      	subs	r3, #1
 80036e4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      }
      if(Timeout != HAL_MAX_DELAY)
 80036e8:	1c75      	adds	r5, r6, #1
 80036ea:	d0d3      	beq.n	8003694 <HAL_SPI_TransmitReceive+0xb8>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 80036ec:	b936      	cbnz	r6, 80036fc <HAL_SPI_TransmitReceive+0x120>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 80036f4:	2300      	movs	r3, #0
 80036f6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80036fa:	e0b8      	b.n	800386e <HAL_SPI_TransmitReceive+0x292>
        hspi->pRxBuffPtr += sizeof(uint16_t);
        hspi->RxXferCount--;
      }
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 80036fc:	f7fe faee 	bl	8001cdc <HAL_GetTick>
 8003700:	1bc0      	subs	r0, r0, r7
 8003702:	42b0      	cmp	r0, r6
 8003704:	d9c6      	bls.n	8003694 <HAL_SPI_TransmitReceive+0xb8>
 8003706:	e7f2      	b.n	80036ee <HAL_SPI_TransmitReceive+0x112>
  }
  
  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  {  
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 8003708:	2800      	cmp	r0, #0
 800370a:	d1de      	bne.n	80036ca <HAL_SPI_TransmitReceive+0xee>
      }
    }
  }
  
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800370c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800370e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003712:	f040 808a 	bne.w	800382a <HAL_SPI_TransmitReceive+0x24e>
 8003716:	e05d      	b.n	80037d4 <HAL_SPI_TransmitReceive+0x1f8>
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
    {
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 8003718:	6822      	ldr	r2, [r4, #0]
 800371a:	6891      	ldr	r1, [r2, #8]
 800371c:	0788      	lsls	r0, r1, #30
 800371e:	d409      	bmi.n	8003734 <HAL_SPI_TransmitReceive+0x158>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
      }
            
      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 8003720:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003724:	2b00      	cmp	r3, #0
 8003726:	d126      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x19a>
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
          hspi->RxXferCount--;
        }
      }
      if(Timeout != HAL_MAX_DELAY)
 8003728:	1c73      	adds	r3, r6, #1
 800372a:	d146      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x1de>
    }  
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800372c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f2      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x13c>
 8003732:	e04a      	b.n	80037ca <HAL_SPI_TransmitReceive+0x1ee>
 8003734:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    {
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
 8003736:	2b02      	cmp	r3, #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
          hspi->TxXferCount -= 2;
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8003738:	bf9f      	itttt	ls
 800373a:	1c4b      	addls	r3, r1, #1
 800373c:	63a3      	strls	r3, [r4, #56]	; 0x38
 800373e:	780b      	ldrbls	r3, [r1, #0]
 8003740:	7313      	strbls	r3, [r2, #12]
          hspi->TxXferCount--;
 8003742:	bf91      	iteee	ls
 8003744:	8fe3      	ldrhls	r3, [r4, #62]	; 0x3e
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8003746:	8809      	ldrhhi	r1, [r1, #0]
 8003748:	60d1      	strhi	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
          hspi->TxXferCount -= 2;
 800374a:	3b02      	subhi	r3, #2
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
          hspi->TxXferCount--;
 800374c:	bf94      	ite	ls
 800374e:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003752:	6ba2      	ldrhi	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
          hspi->TxXferCount--;
 8003754:	87e3      	strh	r3, [r4, #62]	; 0x3e
        }
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 8003756:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003758:	bf84      	itt	hi
 800375a:	3202      	addhi	r2, #2
 800375c:	63a2      	strhi	r2, [r4, #56]	; 0x38
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
          hspi->TxXferCount--;
        }
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1de      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x144>
 8003762:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003768:	bf01      	itttt	eq
 800376a:	6822      	ldreq	r2, [r4, #0]
 800376c:	6813      	ldreq	r3, [r2, #0]
 800376e:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003772:	6013      	streq	r3, [r2, #0]
 8003774:	e7d4      	b.n	8003720 <HAL_SPI_TransmitReceive+0x144>
        }
      }
            
      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 8003776:	6822      	ldr	r2, [r4, #0]
 8003778:	6891      	ldr	r1, [r2, #8]
 800377a:	07c9      	lsls	r1, r1, #31
 800377c:	d5d4      	bpl.n	8003728 <HAL_SPI_TransmitReceive+0x14c>
      {
        if(hspi->RxXferCount > 1)
 800377e:	2b01      	cmp	r3, #1
 8003780:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003782:	d910      	bls.n	80037a6 <HAL_SPI_TransmitReceive+0x1ca>
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003784:	68d1      	ldr	r1, [r2, #12]
 8003786:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800378a:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800378c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003790:	3b02      	subs	r3, #2
 8003792:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 8003794:	2b01      	cmp	r3, #1
      {
        if(hspi->RxXferCount > 1)
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
          hspi->pRxBuffPtr += sizeof(uint16_t);
          hspi->RxXferCount -= 2;
 8003796:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800379a:	d8c5      	bhi.n	8003728 <HAL_SPI_TransmitReceive+0x14c>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800379c:	6853      	ldr	r3, [r2, #4]
 800379e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037a2:	6053      	str	r3, [r2, #4]
 80037a4:	e7c0      	b.n	8003728 <HAL_SPI_TransmitReceive+0x14c>
          }
        }
        else
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 80037a6:	1c59      	adds	r1, r3, #1
 80037a8:	6421      	str	r1, [r4, #64]	; 0x40
 80037aa:	7b12      	ldrb	r2, [r2, #12]
 80037ac:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80037ae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80037b2:	3b01      	subs	r3, #1
 80037b4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80037b8:	e7b6      	b.n	8003728 <HAL_SPI_TransmitReceive+0x14c>
        }
      }
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80037ba:	2e00      	cmp	r6, #0
 80037bc:	d097      	beq.n	80036ee <HAL_SPI_TransmitReceive+0x112>
 80037be:	f7fe fa8d 	bl	8001cdc <HAL_GetTick>
 80037c2:	1bc0      	subs	r0, r0, r7
 80037c4:	42b0      	cmp	r0, r6
 80037c6:	d9b1      	bls.n	800372c <HAL_SPI_TransmitReceive+0x150>
 80037c8:	e791      	b.n	80036ee <HAL_SPI_TransmitReceive+0x112>
    }  
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 80037ca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1a6      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x144>
 80037d2:	e79b      	b.n	800370c <HAL_SPI_TransmitReceive+0x130>
  
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 80037d4:	2102      	movs	r1, #2
 80037d6:	4620      	mov	r0, r4
 80037d8:	460a      	mov	r2, r1
 80037da:	4633      	mov	r3, r6
 80037dc:	f7ff fddd 	bl	800339a <SPI_WaitFlagStateUntilTimeout>
 80037e0:	b128      	cbz	r0, 80037ee <HAL_SPI_TransmitReceive+0x212>
    {  
      /* Erreur on the CRC reception */
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 80037e2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80037e6:	f043 0302 	orr.w	r3, r3, #2
 80037ea:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    }
    
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037ee:	68e3      	ldr	r3, [r4, #12]
 80037f0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	d102      	bne.n	80037fe <HAL_SPI_TransmitReceive+0x222>
    {
      tmpreg = hspi->Instance->DR;
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	e013      	b.n	8003826 <HAL_SPI_TransmitReceive+0x24a>
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80037fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
    {
      tmpreg = hspi->Instance->DR;
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8003800:	7b1b      	ldrb	r3, [r3, #12]
 8003802:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003806:	2902      	cmp	r1, #2
 8003808:	d10f      	bne.n	800382a <HAL_SPI_TransmitReceive+0x24e>
      {
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 800380a:	4620      	mov	r0, r4
 800380c:	460a      	mov	r2, r1
 800380e:	4633      	mov	r3, r6
 8003810:	f7ff fdc3 	bl	800339a <SPI_WaitFlagStateUntilTimeout>
 8003814:	b128      	cbz	r0, 8003822 <HAL_SPI_TransmitReceive+0x246>
        {  
          /* Erreur on the CRC reception */
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 8003816:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800381a:	f043 0302 	orr.w	r3, r3, #2
 800381e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        }    
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	7b1b      	ldrb	r3, [r3, #12]
 8003826:	f8ad 3006 	strh.w	r3, [sp, #6]
      }
    }
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800382a:	4620      	mov	r0, r4
 800382c:	4631      	mov	r1, r6
 800382e:	f7ff fe48 	bl	80034c2 <SPI_EndRxTxTransaction>
 8003832:	b9e0      	cbnz	r0, 800386e <HAL_SPI_TransmitReceive+0x292>
  }

  hspi->State = HAL_SPI_STATE_READY;
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003834:	6825      	ldr	r5, [r4, #0]
 8003836:	68aa      	ldr	r2, [r5, #8]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003838:	2301      	movs	r3, #1
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800383a:	f012 0110 	ands.w	r1, r2, #16
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY;
 800383e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8003842:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003846:	d00a      	beq.n	800385e <HAL_SPI_TransmitReceive+0x282>
  {
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 8003848:	f042 0202 	orr.w	r2, r2, #2
 800384c:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003850:	f06f 0210 	mvn.w	r2, #16
 8003854:	60aa      	str	r2, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003856:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    
    return HAL_ERROR;
 800385a:	4618      	mov	r0, r3
 800385c:	e008      	b.n	8003870 <HAL_SPI_TransmitReceive+0x294>
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
  {
    return HAL_BUSY;
 800385e:	1c10      	adds	r0, r2, #0
    
    return HAL_ERROR;
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003860:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
  {
    return HAL_BUSY;
 8003864:	bf18      	it	ne
 8003866:	2001      	movne	r0, #1
 8003868:	e002      	b.n	8003870 <HAL_SPI_TransmitReceive+0x294>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    return HAL_ERROR;
 800386a:	4628      	mov	r0, r5
 800386c:	e000      	b.n	8003870 <HAL_SPI_TransmitReceive+0x294>
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
 800386e:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 8003870:	b003      	add	sp, #12
 8003872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003876 <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 8003876:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 800387a:	4770      	bx	lr

0800387c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800387c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800387e:	b180      	cbz	r0, 80038a2 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003880:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003884:	b113      	cbz	r3, 800388c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003886:	2300      	movs	r3, #0
 8003888:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800388c:	b109      	cbz	r1, 8003892 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800388e:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003892:	2301      	movs	r3, #1
 8003894:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8003898:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800389a:	f000 fc85 	bl	80041a8 <USBD_LL_Init>
  
  return USBD_OK; 
 800389e:	2000      	movs	r0, #0
 80038a0:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80038a2:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 80038a4:	bd08      	pop	{r3, pc}

080038a6 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80038a6:	b119      	cbz	r1, 80038b0 <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 80038a8:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80038ac:	2000      	movs	r0, #0
 80038ae:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80038b0:	2002      	movs	r0, #2
  }
  
  return status;
}
 80038b2:	4770      	bx	lr

080038b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80038b4:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80038b6:	f000 fcb5 	bl	8004224 <USBD_LL_Start>
  
  return USBD_OK;  
}
 80038ba:	2000      	movs	r0, #0
 80038bc:	bd08      	pop	{r3, pc}

080038be <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80038be:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80038c0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80038c4:	b90b      	cbnz	r3, 80038ca <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80038c6:	2002      	movs	r0, #2
 80038c8:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4798      	blx	r3
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d1f9      	bne.n	80038c6 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80038d2:	bd08      	pop	{r3, pc}

080038d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80038d4:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80038d6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4798      	blx	r3
  return USBD_OK;
}
 80038de:	2000      	movs	r0, #0
 80038e0:	bd08      	pop	{r3, pc}

080038e2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80038e2:	b538      	push	{r3, r4, r5, lr}
 80038e4:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80038e6:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80038ea:	4628      	mov	r0, r5
 80038ec:	f000 f8c8 	bl	8003a80 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80038f0:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80038f2:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80038f6:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80038fa:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80038fe:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003902:	f001 031f 	and.w	r3, r1, #31
 8003906:	2b01      	cmp	r3, #1
 8003908:	d00c      	beq.n	8003924 <USBD_LL_SetupStage+0x42>
 800390a:	d306      	bcc.n	800391a <USBD_LL_SetupStage+0x38>
 800390c:	2b02      	cmp	r3, #2
 800390e:	d10e      	bne.n	800392e <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8003910:	4620      	mov	r0, r4
 8003912:	4629      	mov	r1, r5
 8003914:	f000 f9f8 	bl	8003d08 <USBD_StdEPReq>
    break;
 8003918:	e00e      	b.n	8003938 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800391a:	4620      	mov	r0, r4
 800391c:	4629      	mov	r1, r5
 800391e:	f000 f8cf 	bl	8003ac0 <USBD_StdDevReq>
    break;
 8003922:	e009      	b.n	8003938 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8003924:	4620      	mov	r0, r4
 8003926:	4629      	mov	r1, r5
 8003928:	f000 f9d6 	bl	8003cd8 <USBD_StdItfReq>
    break;
 800392c:	e004      	b.n	8003938 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800392e:	4620      	mov	r0, r4
 8003930:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003934:	f000 fc8e 	bl	8004254 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8003938:	2000      	movs	r0, #0
 800393a:	bd38      	pop	{r3, r4, r5, pc}

0800393c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800393c:	b510      	push	{r4, lr}
 800393e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003940:	bb09      	cbnz	r1, 8003986 <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003942:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003946:	2b03      	cmp	r3, #3
 8003948:	d126      	bne.n	8003998 <USBD_LL_DataOutStage+0x5c>
    {
      if(pep->rem_length > pep->maxpacket)
 800394a:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800394e:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8003952:	4299      	cmp	r1, r3
 8003954:	d90a      	bls.n	800396c <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 8003956:	1ac9      	subs	r1, r1, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003958:	428b      	cmp	r3, r1
 800395a:	bf28      	it	cs
 800395c:	460b      	movcs	r3, r1
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 800395e:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8003962:	4611      	mov	r1, r2
 8003964:	b29a      	uxth	r2, r3
 8003966:	f000 fa6c 	bl	8003e42 <USBD_CtlContinueRx>
 800396a:	e015      	b.n	8003998 <USBD_LL_DataOutStage+0x5c>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800396c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	b123      	cbz	r3, 800397e <USBD_LL_DataOutStage+0x42>
 8003974:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003978:	2a03      	cmp	r2, #3
 800397a:	d100      	bne.n	800397e <USBD_LL_DataOutStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800397c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800397e:	4620      	mov	r0, r4
 8003980:	f000 fa68 	bl	8003e54 <USBD_CtlSendStatus>
 8003984:	e008      	b.n	8003998 <USBD_LL_DataOutStage+0x5c>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8003986:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	b123      	cbz	r3, 8003998 <USBD_LL_DataOutStage+0x5c>
 800398e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003992:	2a03      	cmp	r2, #3
 8003994:	d100      	bne.n	8003998 <USBD_LL_DataOutStage+0x5c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8003996:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8003998:	2000      	movs	r0, #0
 800399a:	bd10      	pop	{r4, pc}

0800399c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80039a0:	bba9      	cbnz	r1, 8003a0e <USBD_LL_DataInStage+0x72>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80039a2:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d129      	bne.n	80039fe <USBD_LL_DataInStage+0x62>
    {
      if(pep->rem_length > pep->maxpacket)
 80039aa:	69c5      	ldr	r5, [r0, #28]
 80039ac:	6a03      	ldr	r3, [r0, #32]
 80039ae:	429d      	cmp	r5, r3
 80039b0:	d906      	bls.n	80039c0 <USBD_LL_DataInStage+0x24>
      {
        pep->rem_length -=  pep->maxpacket;
 80039b2:	1aeb      	subs	r3, r5, r3
        
        USBD_CtlContinueSendData (pdev, 
 80039b4:	4611      	mov	r1, r2
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 80039b6:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	f000 fa29 	bl	8003e10 <USBD_CtlContinueSendData>
 80039be:	e01e      	b.n	80039fe <USBD_LL_DataInStage+0x62>
                                  pdata, 
                                  pep->rem_length);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 80039c0:	6982      	ldr	r2, [r0, #24]
 80039c2:	fbb2 f5f3 	udiv	r5, r2, r3
 80039c6:	fb03 2515 	mls	r5, r3, r5, r2
 80039ca:	b95d      	cbnz	r5, 80039e4 <USBD_LL_DataInStage+0x48>
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d309      	bcc.n	80039e4 <USBD_LL_DataInStage+0x48>
           (pep->total_length >= pep->maxpacket) &&
 80039d0:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d205      	bcs.n	80039e4 <USBD_LL_DataInStage+0x48>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80039d8:	462a      	mov	r2, r5
 80039da:	f000 fa19 	bl	8003e10 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80039de:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 80039e2:	e00c      	b.n	80039fe <USBD_LL_DataInStage+0x62>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80039e4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	b12b      	cbz	r3, 80039f8 <USBD_LL_DataInStage+0x5c>
 80039ec:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80039f0:	2a03      	cmp	r2, #3
 80039f2:	d101      	bne.n	80039f8 <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80039f4:	4620      	mov	r0, r4
 80039f6:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80039f8:	4620      	mov	r0, r4
 80039fa:	f000 fa36 	bl	8003e6a <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80039fe:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d10c      	bne.n	8003a20 <USBD_LL_DataInStage+0x84>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8003a0c:	e008      	b.n	8003a20 <USBD_LL_DataInStage+0x84>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8003a0e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	b123      	cbz	r3, 8003a20 <USBD_LL_DataInStage+0x84>
 8003a16:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a1a:	2a03      	cmp	r2, #3
 8003a1c:	d100      	bne.n	8003a20 <USBD_LL_DataInStage+0x84>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8003a1e:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8003a20:	2000      	movs	r0, #0
 8003a22:	bd38      	pop	{r3, r4, r5, pc}

08003a24 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003a24:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003a26:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003a28:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003a2a:	460a      	mov	r2, r1
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003a2c:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003a2e:	2340      	movs	r3, #64	; 0x40
 8003a30:	f000 fbff 	bl	8004232 <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003a34:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003a36:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	2180      	movs	r1, #128	; 0x80
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f000 fbf7 	bl	8004232 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003a44:	2301      	movs	r3, #1
 8003a46:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003a4a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003a4e:	6225      	str	r5, [r4, #32]
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8003a50:	b12b      	cbz	r3, 8003a5e <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003a52:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003a56:	7921      	ldrb	r1, [r4, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003a5e:	2000      	movs	r0, #0
 8003a60:	bd38      	pop	{r3, r4, r5, pc}

08003a62 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003a62:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003a64:	2000      	movs	r0, #0
 8003a66:	4770      	bx	lr

08003a68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003a68:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003a6a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a6e:	2a03      	cmp	r2, #3
 8003a70:	d104      	bne.n	8003a7c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8003a72:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	b103      	cbz	r3, 8003a7c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003a7a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	bd08      	pop	{r3, pc}

08003a80 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003a80:	780b      	ldrb	r3, [r1, #0]
 8003a82:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003a84:	784b      	ldrb	r3, [r1, #1]
 8003a86:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003a88:	78ca      	ldrb	r2, [r1, #3]
 8003a8a:	788b      	ldrb	r3, [r1, #2]
 8003a8c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003a90:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003a92:	794a      	ldrb	r2, [r1, #5]
 8003a94:	790b      	ldrb	r3, [r1, #4]
 8003a96:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003a9a:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003a9c:	79ca      	ldrb	r2, [r1, #7]
 8003a9e:	798b      	ldrb	r3, [r1, #6]
 8003aa0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003aa4:	80c3      	strh	r3, [r0, #6]
 8003aa6:	4770      	bx	lr

08003aa8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8003aa8:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8003aaa:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8003aac:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003aae:	f000 fbd1 	bl	8004254 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	2100      	movs	r1, #0
}
 8003ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8003aba:	f000 bbcb 	b.w	8004254 <USBD_LL_StallEP>
	...

08003ac0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8003ac2:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8003ac8:	2b09      	cmp	r3, #9
 8003aca:	f200 80fc 	bhi.w	8003cc6 <USBD_StdDevReq+0x206>
 8003ace:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003ad2:	00ce      	.short	0x00ce
 8003ad4:	00fa00e5 	.word	0x00fa00e5
 8003ad8:	00fa00e1 	.word	0x00fa00e1
 8003adc:	000a0077 	.word	0x000a0077
 8003ae0:	00bd00fa 	.word	0x00bd00fa
 8003ae4:	0093      	.short	0x0093
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8003ae6:	884b      	ldrh	r3, [r1, #2]
 8003ae8:	0a1a      	lsrs	r2, r3, #8
 8003aea:	3a01      	subs	r2, #1
 8003aec:	2a06      	cmp	r2, #6
 8003aee:	f200 80ea 	bhi.w	8003cc6 <USBD_StdDevReq+0x206>
 8003af2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003af6:	0007      	.short	0x0007
 8003af8:	0018000b 	.word	0x0018000b
 8003afc:	00e800e8 	.word	0x00e800e8
 8003b00:	0049003d 	.word	0x0049003d
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003b04:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	e02c      	b.n	8003b66 <USBD_StdDevReq+0xa6>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8003b0c:	7c02      	ldrb	r2, [r0, #16]
 8003b0e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003b12:	b90a      	cbnz	r2, 8003b18 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	e000      	b.n	8003b1a <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	f10d 0006 	add.w	r0, sp, #6
 8003b1e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003b20:	2302      	movs	r3, #2
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003b22:	4601      	mov	r1, r0
 8003b24:	e03c      	b.n	8003ba0 <USBD_StdDevReq+0xe0>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b05      	cmp	r3, #5
 8003b2a:	f200 80cc 	bhi.w	8003cc6 <USBD_StdDevReq+0x206>
 8003b2e:	e8df f003 	tbb	[pc, r3]
 8003b32:	0703      	.short	0x0703
 8003b34:	17130f0b 	.word	0x17130f0b
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003b38:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	e012      	b.n	8003b66 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003b40:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	e00e      	b.n	8003b66 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003b48:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	e00a      	b.n	8003b66 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003b50:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	e006      	b.n	8003b66 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003b58:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	e002      	b.n	8003b66 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003b60:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	7c20      	ldrb	r0, [r4, #16]
 8003b68:	f10d 0106 	add.w	r1, sp, #6
 8003b6c:	4798      	blx	r3
 8003b6e:	e009      	b.n	8003b84 <USBD_StdDevReq+0xc4>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003b70:	7c03      	ldrb	r3, [r0, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f040 80a7 	bne.w	8003cc6 <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003b78:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003b7c:	f10d 0006 	add.w	r0, sp, #6
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	4798      	blx	r3
 8003b84:	4601      	mov	r1, r0
 8003b86:	e00c      	b.n	8003ba2 <USBD_StdDevReq+0xe2>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003b88:	7c03      	ldrb	r3, [r0, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f040 809b 	bne.w	8003cc6 <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003b90:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003b94:	f10d 0006 	add.w	r0, sp, #6
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003b9c:	2307      	movs	r3, #7
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003b9e:	4601      	mov	r1, r0
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003ba0:	704b      	strb	r3, [r1, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8003ba2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8091 	beq.w	8003cce <USBD_StdDevReq+0x20e>
 8003bac:	88ea      	ldrh	r2, [r5, #6]
 8003bae:	2a00      	cmp	r2, #0
 8003bb0:	f000 808d 	beq.w	8003cce <USBD_StdDevReq+0x20e>
  {
    
    len = MIN(len , req->wLength);
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	bf28      	it	cs
 8003bb8:	461a      	movcs	r2, r3
 8003bba:	f8ad 2006 	strh.w	r2, [sp, #6]
 8003bbe:	e054      	b.n	8003c6a <USBD_StdDevReq+0x1aa>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003bc0:	888b      	ldrh	r3, [r1, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d17f      	bne.n	8003cc6 <USBD_StdDevReq+0x206>
 8003bc6:	88cb      	ldrh	r3, [r1, #6]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d17c      	bne.n	8003cc6 <USBD_StdDevReq+0x206>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003bcc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003bd0:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003bd2:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003bd4:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003bd8:	d075      	beq.n	8003cc6 <USBD_StdDevReq+0x206>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8003bda:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003bde:	4631      	mov	r1, r6
 8003be0:	f000 fb59 	bl	8004296 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003be4:	4620      	mov	r0, r4
 8003be6:	f000 f935 	bl	8003e54 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8003bea:	b10e      	cbz	r6, 8003bf0 <USBD_StdDevReq+0x130>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003bec:	2302      	movs	r3, #2
 8003bee:	e000      	b.n	8003bf2 <USBD_StdDevReq+0x132>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8003bf6:	e06a      	b.n	8003cce <USBD_StdDevReq+0x20e>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8003bf8:	7889      	ldrb	r1, [r1, #2]
 8003bfa:	4e36      	ldr	r6, [pc, #216]	; (8003cd4 <USBD_StdDevReq+0x214>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003bfc:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8003bfe:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003c00:	d861      	bhi.n	8003cc6 <USBD_StdDevReq+0x206>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 8003c02:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d002      	beq.n	8003c10 <USBD_StdDevReq+0x150>
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d008      	beq.n	8003c20 <USBD_StdDevReq+0x160>
 8003c0e:	e05a      	b.n	8003cc6 <USBD_StdDevReq+0x206>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8003c10:	2900      	cmp	r1, #0
 8003c12:	d054      	beq.n	8003cbe <USBD_StdDevReq+0x1fe>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8003c14:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003c16:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8003c18:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003c1a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8003c1e:	e00f      	b.n	8003c40 <USBD_StdDevReq+0x180>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8003c20:	b931      	cbnz	r1, 8003c30 <USBD_StdDevReq+0x170>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003c22:	2302      	movs	r3, #2
 8003c24:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8003c28:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8003c2a:	f7ff fe53 	bl	80038d4 <USBD_ClrClassConfig>
 8003c2e:	e046      	b.n	8003cbe <USBD_StdDevReq+0x1fe>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8003c30:	6841      	ldr	r1, [r0, #4]
 8003c32:	2901      	cmp	r1, #1
 8003c34:	d043      	beq.n	8003cbe <USBD_StdDevReq+0x1fe>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8003c36:	b2c9      	uxtb	r1, r1
 8003c38:	f7ff fe4c 	bl	80038d4 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8003c3c:	7831      	ldrb	r1, [r6, #0]
 8003c3e:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003c40:	4620      	mov	r0, r4
 8003c42:	f7ff fe3c 	bl	80038be <USBD_SetClassConfig>
 8003c46:	2802      	cmp	r0, #2
 8003c48:	d139      	bne.n	8003cbe <USBD_StdDevReq+0x1fe>
 8003c4a:	e03c      	b.n	8003cc6 <USBD_StdDevReq+0x206>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8003c4c:	88ca      	ldrh	r2, [r1, #6]
 8003c4e:	2a01      	cmp	r2, #1
 8003c50:	d139      	bne.n	8003cc6 <USBD_StdDevReq+0x206>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8003c52:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d003      	beq.n	8003c62 <USBD_StdDevReq+0x1a2>
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d133      	bne.n	8003cc6 <USBD_StdDevReq+0x206>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8003c5e:	1d01      	adds	r1, r0, #4
 8003c60:	e015      	b.n	8003c8e <USBD_StdDevReq+0x1ce>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8003c62:	4601      	mov	r1, r0
 8003c64:	2300      	movs	r3, #0
 8003c66:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	e00f      	b.n	8003c8e <USBD_StdDevReq+0x1ce>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8003c6e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003c72:	3b02      	subs	r3, #2
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d826      	bhi.n	8003cc6 <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003c78:	2301      	movs	r3, #1
 8003c7a:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8003c7c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003c80:	b10b      	cbz	r3, 8003c86 <USBD_StdDevReq+0x1c6>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003c82:	2303      	movs	r3, #3
 8003c84:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8003c86:	4620      	mov	r0, r4
 8003c88:	f104 010c 	add.w	r1, r4, #12
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f000 f8b1 	bl	8003df4 <USBD_CtlSendData>
 8003c92:	e01c      	b.n	8003cce <USBD_StdDevReq+0x20e>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003c94:	884b      	ldrh	r3, [r1, #2]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d119      	bne.n	8003cce <USBD_StdDevReq+0x20e>
 8003c9a:	e008      	b.n	8003cae <USBD_StdDevReq+0x1ee>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8003c9c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003ca0:	3b02      	subs	r3, #2
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d80f      	bhi.n	8003cc6 <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003ca6:	884b      	ldrh	r3, [r1, #2]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d110      	bne.n	8003cce <USBD_StdDevReq+0x20e>
    {
      pdev->dev_remote_wakeup = 0; 
 8003cac:	2300      	movs	r3, #0
 8003cae:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003cb2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	4629      	mov	r1, r5
 8003cbc:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f000 f8c8 	bl	8003e54 <USBD_CtlSendStatus>
 8003cc4:	e003      	b.n	8003cce <USBD_StdDevReq+0x20e>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	4629      	mov	r1, r5
 8003cca:	f7ff feed 	bl	8003aa8 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8003cce:	2000      	movs	r0, #0
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	20000b90 	.word	0x20000b90

08003cd8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003cd8:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8003cda:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003cde:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8003ce4:	d10c      	bne.n	8003d00 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003ce6:	790b      	ldrb	r3, [r1, #4]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d809      	bhi.n	8003d00 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8003cec:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003cf4:	88eb      	ldrh	r3, [r5, #6]
 8003cf6:	b92b      	cbnz	r3, 8003d04 <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f000 f8ab 	bl	8003e54 <USBD_CtlSendStatus>
 8003cfe:	e001      	b.n	8003d04 <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8003d00:	f7ff fed2 	bl	8003aa8 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 8003d04:	2000      	movs	r0, #0
 8003d06:	bd38      	pop	{r3, r4, r5, pc}

08003d08 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003d08:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 8003d0a:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8003d0c:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 8003d0e:	2e01      	cmp	r6, #1
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003d10:	4604      	mov	r4, r0
 8003d12:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8003d14:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 8003d16:	d010      	beq.n	8003d3a <USBD_StdEPReq+0x32>
 8003d18:	d326      	bcc.n	8003d68 <USBD_StdEPReq+0x60>
 8003d1a:	2e03      	cmp	r6, #3
 8003d1c:	d14b      	bne.n	8003db6 <USBD_StdEPReq+0xae>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8003d1e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003d22:	2a02      	cmp	r2, #2
 8003d24:	d027      	beq.n	8003d76 <USBD_StdEPReq+0x6e>
 8003d26:	2a03      	cmp	r2, #3
 8003d28:	d143      	bne.n	8003db2 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003d2a:	884a      	ldrh	r2, [r1, #2]
 8003d2c:	b992      	cbnz	r2, 8003d54 <USBD_StdEPReq+0x4c>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003d2e:	065e      	lsls	r6, r3, #25
 8003d30:	d010      	beq.n	8003d54 <USBD_StdEPReq+0x4c>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8003d32:	4619      	mov	r1, r3
 8003d34:	f000 fa8e 	bl	8004254 <USBD_LL_StallEP>
 8003d38:	e00c      	b.n	8003d54 <USBD_StdEPReq+0x4c>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8003d3a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003d3e:	2a02      	cmp	r2, #2
 8003d40:	d019      	beq.n	8003d76 <USBD_StdEPReq+0x6e>
 8003d42:	2a03      	cmp	r2, #3
 8003d44:	d135      	bne.n	8003db2 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003d46:	884a      	ldrh	r2, [r1, #2]
 8003d48:	bbaa      	cbnz	r2, 8003db6 <USBD_StdEPReq+0xae>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8003d4a:	0659      	lsls	r1, r3, #25
 8003d4c:	d008      	beq.n	8003d60 <USBD_StdEPReq+0x58>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003d4e:	4619      	mov	r1, r3
 8003d50:	f000 fa87 	bl	8004262 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8003d54:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003d58:	4620      	mov	r0, r4
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003d60:	4620      	mov	r0, r4
 8003d62:	f000 f877 	bl	8003e54 <USBD_CtlSendStatus>
 8003d66:	e026      	b.n	8003db6 <USBD_StdEPReq+0xae>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8003d68:	f890 51fc 	ldrb.w	r5, [r0, #508]	; 0x1fc
 8003d6c:	2d02      	cmp	r5, #2
 8003d6e:	d002      	beq.n	8003d76 <USBD_StdEPReq+0x6e>
 8003d70:	2d03      	cmp	r5, #3
 8003d72:	d006      	beq.n	8003d82 <USBD_StdEPReq+0x7a>
 8003d74:	e01d      	b.n	8003db2 <USBD_StdEPReq+0xaa>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8003d76:	065a      	lsls	r2, r3, #25
 8003d78:	d01d      	beq.n	8003db6 <USBD_StdEPReq+0xae>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f000 fa6a 	bl	8004254 <USBD_LL_StallEP>
 8003d80:	e019      	b.n	8003db6 <USBD_StdEPReq+0xae>
 8003d82:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003d86:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003d8a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003d8e:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003d90:	bf14      	ite	ne
 8003d92:	3514      	addne	r5, #20
 8003d94:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003d98:	f000 fa6a 	bl	8004270 <USBD_LL_IsStallEP>
 8003d9c:	b110      	cbz	r0, 8003da4 <USBD_StdEPReq+0x9c>
      {
        pep->status = 0x0001;     
 8003d9e:	2301      	movs	r3, #1
 8003da0:	602b      	str	r3, [r5, #0]
 8003da2:	e000      	b.n	8003da6 <USBD_StdEPReq+0x9e>
      }
      else
      {
        pep->status = 0x0000;  
 8003da4:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 8003da6:	4620      	mov	r0, r4
 8003da8:	4629      	mov	r1, r5
 8003daa:	2202      	movs	r2, #2
 8003dac:	f000 f822 	bl	8003df4 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8003db0:	e001      	b.n	8003db6 <USBD_StdEPReq+0xae>
      
    default:                         
      USBD_CtlError(pdev , req);
 8003db2:	f7ff fe79 	bl	8003aa8 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8003db6:	2000      	movs	r0, #0
 8003db8:	bd70      	pop	{r4, r5, r6, pc}

08003dba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003dba:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003dbc:	b1c8      	cbz	r0, 8003df2 <USBD_GetString+0x38>
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	1a23      	subs	r3, r4, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8003dc2:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2d00      	cmp	r5, #0
 8003dca:	d1f9      	bne.n	8003dc0 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	3302      	adds	r3, #2
 8003dd0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8003dd2:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	704b      	strb	r3, [r1, #1]
 8003dd8:	3801      	subs	r0, #1
 8003dda:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8003ddc:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8003de0:	b13c      	cbz	r4, 8003df2 <USBD_GetString+0x38>
    {
      unicode[idx++] = *desc++;
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 8003de8:	3302      	adds	r3, #2
 8003dea:	2400      	movs	r4, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	548c      	strb	r4, [r1, r2]
 8003df0:	e7f4      	b.n	8003ddc <USBD_GetString+0x22>
 8003df2:	bd30      	pop	{r4, r5, pc}

08003df4 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4613      	mov	r3, r2
 8003df8:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003e00:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8003e02:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003e04:	2100      	movs	r1, #0
 8003e06:	462a      	mov	r2, r5
 8003e08:	f000 fa4c 	bl	80042a4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}

08003e10 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003e10:	b510      	push	{r4, lr}
 8003e12:	460c      	mov	r4, r1
 8003e14:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003e16:	2100      	movs	r1, #0
 8003e18:	4622      	mov	r2, r4
 8003e1a:	f000 fa43 	bl	80042a4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003e1e:	2000      	movs	r0, #0
 8003e20:	bd10      	pop	{r4, pc}

08003e22 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003e22:	b538      	push	{r3, r4, r5, lr}
 8003e24:	4613      	mov	r3, r2
 8003e26:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003e28:	2203      	movs	r2, #3
 8003e2a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003e2e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8003e32:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003e36:	2100      	movs	r1, #0
 8003e38:	462a      	mov	r2, r5
 8003e3a:	f000 fa3a 	bl	80042b2 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003e3e:	2000      	movs	r0, #0
 8003e40:	bd38      	pop	{r3, r4, r5, pc}

08003e42 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003e42:	b510      	push	{r4, lr}
 8003e44:	460c      	mov	r4, r1
 8003e46:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4622      	mov	r2, r4
 8003e4c:	f000 fa31 	bl	80042b2 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003e50:	2000      	movs	r0, #0
 8003e52:	bd10      	pop	{r4, pc}

08003e54 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003e54:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003e56:	2100      	movs	r1, #0
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003e58:	2304      	movs	r3, #4
 8003e5a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003e5e:	460a      	mov	r2, r1
 8003e60:	460b      	mov	r3, r1
 8003e62:	f000 fa1f 	bl	80042a4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003e66:	2000      	movs	r0, #0
 8003e68:	bd08      	pop	{r3, pc}

08003e6a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003e6a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003e6c:	2100      	movs	r1, #0
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8003e6e:	2305      	movs	r3, #5
 8003e70:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003e74:	460a      	mov	r2, r1
 8003e76:	460b      	mov	r3, r1
 8003e78:	f000 fa1b 	bl	80042b2 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	bd08      	pop	{r3, pc}

08003e80 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8003e80:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8003e84:	b11b      	cbz	r3, 8003e8e <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8003e86:	2000      	movs	r0, #0
 8003e88:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8003e8c:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8003e8e:	2002      	movs	r0, #2
  }
}
 8003e90:	4770      	bx	lr

08003e92 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003e92:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8003e96:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8003e98:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003e9c:	b15b      	cbz	r3, 8003eb6 <USBD_CDC_EP0_RxReady+0x24>
 8003e9e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003ea2:	28ff      	cmp	r0, #255	; 0xff
 8003ea4:	d007      	beq.n	8003eb6 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003eac:	4621      	mov	r1, r4
 8003eae:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8003eb0:	23ff      	movs	r3, #255	; 0xff
 8003eb2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	bd10      	pop	{r4, pc}
	...

08003ebc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003ebc:	2343      	movs	r3, #67	; 0x43
 8003ebe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003ec0:	4800      	ldr	r0, [pc, #0]	; (8003ec4 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003ec2:	4770      	bx	lr
 8003ec4:	20000018 	.word	0x20000018

08003ec8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003ec8:	2343      	movs	r3, #67	; 0x43
 8003eca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003ecc:	4800      	ldr	r0, [pc, #0]	; (8003ed0 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003ece:	4770      	bx	lr
 8003ed0:	200000e4 	.word	0x200000e4

08003ed4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003ed4:	2343      	movs	r3, #67	; 0x43
 8003ed6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003ed8:	4800      	ldr	r0, [pc, #0]	; (8003edc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003eda:	4770      	bx	lr
 8003edc:	200000a0 	.word	0x200000a0

08003ee0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003ee0:	230a      	movs	r3, #10
 8003ee2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003ee4:	4800      	ldr	r0, [pc, #0]	; (8003ee8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003ee6:	4770      	bx	lr
 8003ee8:	20000094 	.word	0x20000094

08003eec <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8003ef0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003ef4:	f000 f9e4 	bl	80042c0 <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8003ef8:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003efc:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8003f00:	b14b      	cbz	r3, 8003f16 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003f02:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8003f06:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003f10:	4798      	blx	r3

    return USBD_OK;
 8003f12:	2000      	movs	r0, #0
 8003f14:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8003f16:	2002      	movs	r0, #2
  }
}
 8003f18:	bd38      	pop	{r3, r4, r5, pc}

08003f1a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8003f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1c:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f1e:	7809      	ldrb	r1, [r1, #0]
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8003f20:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f24:	f001 0360 	and.w	r3, r1, #96	; 0x60
 8003f28:	2b20      	cmp	r3, #32
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8003f2a:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f2c:	d120      	bne.n	8003f70 <USBD_CDC_Setup+0x56>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8003f2e:	88e2      	ldrh	r2, [r4, #6]
 8003f30:	7863      	ldrb	r3, [r4, #1]
 8003f32:	b1ba      	cbz	r2, 8003f64 <USBD_CDC_Setup+0x4a>
    {
      if (req->bmRequest & 0x80)
 8003f34:	0609      	lsls	r1, r1, #24
 8003f36:	d50b      	bpl.n	8003f50 <USBD_CDC_Setup+0x36>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f38:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	688f      	ldr	r7, [r1, #8]
 8003f40:	4629      	mov	r1, r5
 8003f42:	47b8      	blx	r7
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8003f44:	4630      	mov	r0, r6
 8003f46:	4629      	mov	r1, r5
 8003f48:	88e2      	ldrh	r2, [r4, #6]
 8003f4a:	f7ff ff53 	bl	8003df4 <USBD_CtlSendData>
 8003f4e:	e00f      	b.n	8003f70 <USBD_CDC_Setup+0x56>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8003f50:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8003f54:	88e3      	ldrh	r3, [r4, #6]
 8003f56:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	88e2      	ldrh	r2, [r4, #6]
 8003f5e:	f7ff ff60 	bl	8003e22 <USBD_CtlPrepareRx>
 8003f62:	e005      	b.n	8003f70 <USBD_CDC_Setup+0x56>
      }
      
    }
    else
    {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f64:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8003f68:	4618      	mov	r0, r3
 8003f6a:	688c      	ldr	r4, [r1, #8]
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	47a0      	blx	r4
 
  default: 
    break;
  }
  return USBD_OK;
}
 8003f70:	2000      	movs	r0, #0
 8003f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f74 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003f74:	b510      	push	{r4, lr}
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8003f76:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003f78:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8003f7a:	f000 f964 	bl	8004246 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8003f7e:	2101      	movs	r1, #1
 8003f80:	4620      	mov	r0, r4
 8003f82:	f000 f960 	bl	8004246 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8003f86:	4620      	mov	r0, r4
 8003f88:	2182      	movs	r1, #130	; 0x82
 8003f8a:	f000 f95c 	bl	8004246 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8003f8e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8003f92:	b153      	cbz	r3, 8003faa <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003f94:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003f9c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8003fa0:	f000 f998 	bl	80042d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8003faa:	2000      	movs	r0, #0
 8003fac:	bd10      	pop	{r4, pc}

08003fae <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003fb0:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003fb2:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003fb4:	2181      	movs	r1, #129	; 0x81
 8003fb6:	2202      	movs	r2, #2
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003fb8:	b94b      	cbnz	r3, 8003fce <USBD_CDC_Init+0x20>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fbe:	f000 f938 	bl	8004232 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fcc:	e006      	b.n	8003fdc <USBD_CDC_Init+0x2e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003fce:	2340      	movs	r3, #64	; 0x40
 8003fd0:	f000 f92f 	bl	8004232 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	2202      	movs	r2, #2
 8003fda:	2340      	movs	r3, #64	; 0x40
 8003fdc:	f000 f929 	bl	8004232 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8003fe0:	2182      	movs	r1, #130	; 0x82
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f000 f923 	bl	8004232 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003fec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003ff0:	f000 f96c 	bl	80042cc <USBD_static_malloc>
 8003ff4:	4606      	mov	r6, r0
 8003ff6:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8003ffa:	b1c8      	cbz	r0, 8004030 <USBD_CDC_Init+0x82>
  else
  {
    hcdc = pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003ffc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004004:	7c27      	ldrb	r7, [r4, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004006:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 800400a:	2500      	movs	r5, #0
 800400c:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004010:	4620      	mov	r0, r4
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
 8004012:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004016:	2101      	movs	r1, #1
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004018:	b92f      	cbnz	r7, 8004026 <USBD_CDC_Init+0x78>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800401a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800401e:	f000 f948 	bl	80042b2 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8004022:	4638      	mov	r0, r7
 8004024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004026:	2340      	movs	r3, #64	; 0x40
 8004028:	f000 f943 	bl	80042b2 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 800402c:	4628      	mov	r0, r5
 800402e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 8004030:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 8004032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004034 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8004034:	b119      	cbz	r1, 800403e <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8004036:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 800403a:	2000      	movs	r0, #0
 800403c:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 800403e:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 8004040:	4770      	bx	lr

08004042 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004042:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8004046:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 8004048:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800404c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 8004050:	4770      	bx	lr

08004052 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8004052:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8004056:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8004058:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 800405c:	4770      	bx	lr

0800405e <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800405e:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004060:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8004064:	b175      	cbz	r5, 8004084 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8004066:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800406a:	b96c      	cbnz	r4, 8004088 <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800406c:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 8004070:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 8004074:	2181      	movs	r1, #129	; 0x81
 8004076:	f000 f915 	bl	80042a4 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800407a:	2301      	movs	r3, #1
 800407c:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 8004080:	4620      	mov	r0, r4
 8004082:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8004084:	2002      	movs	r0, #2
 8004086:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1;
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004088:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 800408a:	bd38      	pop	{r3, r4, r5, pc}

0800408c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800408c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004090:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004092:	b163      	cbz	r3, 80040ae <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004094:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004096:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800409a:	2101      	movs	r1, #1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800409c:	b914      	cbnz	r4, 80040a4 <USBD_CDC_ReceivePacket+0x18>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800409e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040a2:	e000      	b.n	80040a6 <USBD_CDC_ReceivePacket+0x1a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040a4:	2340      	movs	r3, #64	; 0x40
 80040a6:	f000 f904 	bl	80042b2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80040aa:	2000      	movs	r0, #0
 80040ac:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 80040ae:	2002      	movs	r0, #2
  }
}
 80040b0:	bd10      	pop	{r4, pc}
	...

080040b4 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 80040b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 80040b8:	4c24      	ldr	r4, [pc, #144]	; (800414c <HAL_PCD_MspInit+0x98>)
 80040ba:	6963      	ldr	r3, [r4, #20]
 80040bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c0:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 80040c2:	6963      	ldr	r3, [r4, #20]
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 80040c4:	b086      	sub	sp, #24
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 80040c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ca:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 80040cc:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80040d0:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80040d4:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80040d8:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80040da:	a901      	add	r1, sp, #4
 80040dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80040e0:	9302      	str	r3, [sp, #8]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 80040e2:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e4:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80040e6:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80040ea:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80040ec:	f7fd fe6e 	bl	8001dcc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 80040f0:	4631      	mov	r1, r6
 80040f2:	462a      	mov	r2, r5
 80040f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040f8:	f7fd ff32 	bl	8001f60 <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80040fc:	2001      	movs	r0, #1
 80040fe:	f7fd fdf3 	bl	8001ce8 <HAL_Delay>
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 8004102:	4631      	mov	r1, r6
 8004104:	2201      	movs	r2, #1
 8004106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800410a:	f7fd ff29 	bl	8001f60 <HAL_GPIO_WritePin>

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410e:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004110:	a901      	add	r1, sp, #4
 8004112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004116:	9302      	str	r3, [sp, #8]
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004118:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800411c:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004120:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004122:	f7fd fe53 	bl	8001dcc <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(USB_DISCONNECT_PORT, &GPIO_InitStruct); 
#endif  

  /* Enable USB FS Clock */
  __USB_CLK_ENABLE();
 8004126:	69e3      	ldr	r3, [r4, #28]
 8004128:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800412c:	61e3      	str	r3, [r4, #28]
  
  /* Enable SYSCFG Clock */
  __SYSCFG_CLK_ENABLE();
 800412e:	69a3      	ldr	r3, [r4, #24]
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	61a3      	str	r3, [r4, #24]
#endif
  
#if defined (USE_USB_INTERRUPT_DEFAULT)
  
  /* Set USB Default FS Interrupt priority */
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8004136:	2105      	movs	r1, #5
 8004138:	462a      	mov	r2, r5
 800413a:	2014      	movs	r0, #20
 800413c:	f7fd fdf4 	bl	8001d28 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 8004140:	2014      	movs	r0, #20
 8004142:	f7fd fe21 	bl	8001d88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_IRQn); 
#endif
}
 8004146:	b006      	add	sp, #24
 8004148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800414c:	40021000 	.word	0x40021000

08004150 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004150:	4601      	mov	r1, r0
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8004152:	f501 71a2 	add.w	r1, r1, #324	; 0x144
 8004156:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800415a:	f7ff bbc2 	b.w	80038e2 <USBD_LL_SetupStage>

0800415e <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800415e:	231c      	movs	r3, #28
 8004160:	fb03 0301 	mla	r3, r3, r1, r0
 8004164:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004168:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800416c:	f7ff bbe6 	b.w	800393c <USBD_LL_DataOutStage>

08004170 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004170:	231c      	movs	r3, #28
 8004172:	fb03 0301 	mla	r3, r3, r1, r0
 8004176:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800417a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800417c:	f7ff bc0e 	b.w	800399c <USBD_LL_DataInStage>

08004180 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 8004180:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004184:	f7ff bc70 	b.w	8003a68 <USBD_LL_SOF>

08004188 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8004188:	b510      	push	{r4, lr}
 800418a:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800418c:	2101      	movs	r1, #1
 800418e:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004192:	f7ff fc66 	bl	8003a62 <USBD_LL_SetSpeed>
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8004196:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 800419a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800419e:	f7ff bc41 	b.w	8003a24 <USBD_LL_Reset>

080041a2 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80041a2:	4770      	bx	lr

080041a4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80041a4:	4770      	bx	lr
	...

080041a8 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 80041a8:	b538      	push	{r3, r4, r5, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 80041aa:	4a1c      	ldr	r2, [pc, #112]	; (800421c <USBD_LL_Init+0x74>)
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 80041ac:	4605      	mov	r5, r0
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
 80041ae:	481c      	ldr	r0, [pc, #112]	; (8004220 <USBD_LL_Init+0x78>)
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd.Init.speed = PCD_SPEED_FULL;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
  pdev->pData = &hpcd;
 80041b0:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 80041b4:	2308      	movs	r3, #8
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 80041b6:	2400      	movs	r4, #0
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 80041b8:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 80041bc:	2302      	movs	r3, #2
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 80041be:	60c4      	str	r4, [r0, #12]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 80041c0:	6103      	str	r3, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 80041c2:	6083      	str	r3, [r0, #8]
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 80041c4:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
  pdev->pData = &hpcd;
  /* Initialize LL Driver */
  HAL_PCD_Init(pdev->pData);
 80041c8:	f7fd fed3 	bl	8001f72 <HAL_PCD_Init>
  
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 80041cc:	4621      	mov	r1, r4
 80041ce:	4622      	mov	r2, r4
 80041d0:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 80041d4:	2340      	movs	r3, #64	; 0x40
 80041d6:	f7fe fdf4 	bl	8002dc2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	4622      	mov	r2, r4
 80041de:	460b      	mov	r3, r1
 80041e0:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 80041e4:	f7fe fded 	bl	8002dc2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 80041e8:	4622      	mov	r2, r4
 80041ea:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 80041ee:	2181      	movs	r1, #129	; 0x81
 80041f0:	23c0      	movs	r3, #192	; 0xc0
 80041f2:	f7fe fde6 	bl	8002dc2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 80041f6:	4622      	mov	r2, r4
 80041f8:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 80041fc:	2101      	movs	r1, #1
 80041fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004202:	f7fe fdde 	bl	8002dc2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 8004206:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800420a:	2182      	movs	r1, #130	; 0x82
 800420c:	4622      	mov	r2, r4
 800420e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004212:	f7fe fdd6 	bl	8002dc2 <HAL_PCDEx_PMAConfig>
    
  return USBD_OK;
}
 8004216:	4620      	mov	r0, r4
 8004218:	bd38      	pop	{r3, r4, r5, pc}
 800421a:	bf00      	nop
 800421c:	40005c00 	.word	0x40005c00
 8004220:	20001160 	.word	0x20001160

08004224 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004224:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8004226:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800422a:	f7fd feef 	bl	800200c <HAL_PCD_Start>
  return USBD_OK;
}
 800422e:	2000      	movs	r0, #0
 8004230:	bd08      	pop	{r3, pc}

08004232 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8004232:	b510      	push	{r4, lr}
 8004234:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 8004236:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800423a:	461a      	mov	r2, r3
 800423c:	4623      	mov	r3, r4
 800423e:	f7fd ff01 	bl	8002044 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8004242:	2000      	movs	r0, #0
 8004244:	bd10      	pop	{r4, pc}

08004246 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004246:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004248:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800424c:	f7fe f896 	bl	800237c <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8004250:	2000      	movs	r0, #0
 8004252:	bd08      	pop	{r3, pc}

08004254 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004254:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004256:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800425a:	f7fe fcfd 	bl	8002c58 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 800425e:	2000      	movs	r0, #0
 8004260:	bd08      	pop	{r3, pc}

08004262 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004262:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004264:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004268:	f7fe fd47 	bl	8002cfa <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 800426c:	2000      	movs	r0, #0
 800426e:	bd08      	pop	{r3, pc}

08004270 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004270:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004274:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004278:	bf18      	it	ne
 800427a:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 800427e:	f04f 001c 	mov.w	r0, #28
 8004282:	bf15      	itete	ne
 8004284:	fb00 2103 	mlane	r1, r0, r3, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004288:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800428c:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004290:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
  }
}
 8004294:	4770      	bx	lr

08004296 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004296:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004298:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800429c:	f7fd febc 	bl	8002018 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 80042a0:	2000      	movs	r0, #0
 80042a2:	bd08      	pop	{r3, pc}

080042a4 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 80042a4:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80042a6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80042aa:	f7fe f9c1 	bl	8002630 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 80042ae:	2000      	movs	r0, #0
 80042b0:	bd08      	pop	{r3, pc}

080042b2 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 80042b2:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80042b4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80042b8:	f7fe f938 	bl	800252c <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 80042bc:	2000      	movs	r0, #0
 80042be:	bd08      	pop	{r3, pc}

080042c0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80042c0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 80042c2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80042c6:	f7fe f9ab 	bl	8002620 <HAL_PCD_EP_GetRxCount>
}
 80042ca:	bd08      	pop	{r3, pc}

080042cc <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 80042cc:	4800      	ldr	r0, [pc, #0]	; (80042d0 <USBD_static_malloc+0x4>)
 80042ce:	4770      	bx	lr
 80042d0:	20000b94 	.word	0x20000b94

080042d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80042d4:	4770      	bx	lr
	...

080042d8 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 80042d8:	2312      	movs	r3, #18
 80042da:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)hUSBDDeviceDesc;
}
 80042dc:	4800      	ldr	r0, [pc, #0]	; (80042e0 <USBD_VCP_DeviceDescriptor+0x8>)
 80042de:	4770      	bx	lr
 80042e0:	08017111 	.word	0x08017111

080042e4 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 80042e4:	2304      	movs	r3, #4
 80042e6:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 80042e8:	4800      	ldr	r0, [pc, #0]	; (80042ec <USBD_VCP_LangIDStrDescriptor+0x8>)
 80042ea:	4770      	bx	lr
 80042ec:	080170c0 	.word	0x080170c0

080042f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 80042f0:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80042f2:	2400      	movs	r4, #0
 80042f4:	b2e3      	uxtb	r3, r4
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d20d      	bcs.n	8004316 <IntToUnicode+0x26>
  {
    if( ((value >> 28)) < 0xA )
 80042fa:	0f03      	lsrs	r3, r0, #28
 80042fc:	2b09      	cmp	r3, #9
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80042fe:	bf94      	ite	ls
 8004300:	3330      	addls	r3, #48	; 0x30
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004302:	3337      	addhi	r3, #55	; 0x37
 8004304:	f801 3014 	strb.w	r3, [r1, r4, lsl #1]
 8004308:	eb01 0344 	add.w	r3, r1, r4, lsl #1
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800430c:	2500      	movs	r5, #0
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 800430e:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 8004310:	705d      	strb	r5, [r3, #1]
 8004312:	3401      	adds	r4, #1
 8004314:	e7ee      	b.n	80042f4 <IntToUnicode+0x4>
  }
}
 8004316:	bd30      	pop	{r4, r5, pc}

08004318 <USBD_VCP_SerialStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 8004318:	231a      	movs	r3, #26
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800431a:	b510      	push	{r4, lr}
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800431c:	4a09      	ldr	r2, [pc, #36]	; (8004344 <USBD_VCP_SerialStrDescriptor+0x2c>)
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 800431e:	800b      	strh	r3, [r1, #0]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <USBD_VCP_SerialStrDescriptor+0x30>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
  
  deviceserial0 += deviceserial2;
 8004322:	6850      	ldr	r0, [r2, #4]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8004324:	681b      	ldr	r3, [r3, #0]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8004326:	6814      	ldr	r4, [r2, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
  
  deviceserial0 += deviceserial2;
  
  if (deviceserial0 != 0)
 8004328:	1818      	adds	r0, r3, r0
 800432a:	d008      	beq.n	800433e <USBD_VCP_SerialStrDescriptor+0x26>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800432c:	4907      	ldr	r1, [pc, #28]	; (800434c <USBD_VCP_SerialStrDescriptor+0x34>)
 800432e:	2208      	movs	r2, #8
 8004330:	f7ff ffde 	bl	80042f0 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8004334:	4620      	mov	r0, r4
 8004336:	4906      	ldr	r1, [pc, #24]	; (8004350 <USBD_VCP_SerialStrDescriptor+0x38>)
 8004338:	2204      	movs	r2, #4
 800433a:	f7ff ffd9 	bl	80042f0 <IntToUnicode>
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
  
  return USBD_StringSerial;
}
 800433e:	4805      	ldr	r0, [pc, #20]	; (8004354 <USBD_VCP_SerialStrDescriptor+0x3c>)
 8004340:	bd10      	pop	{r4, pc}
 8004342:	bf00      	nop
 8004344:	1ffff7b0 	.word	0x1ffff7b0
 8004348:	1ffff7ac 	.word	0x1ffff7ac
 800434c:	20000146 	.word	0x20000146
 8004350:	20000156 	.word	0x20000156
 8004354:	20000144 	.word	0x20000144

08004358 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004358:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800435a:	4c04      	ldr	r4, [pc, #16]	; (800436c <USBD_VCP_ProductStrDescriptor+0x14>)
 800435c:	4804      	ldr	r0, [pc, #16]	; (8004370 <USBD_VCP_ProductStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800435e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8004360:	4621      	mov	r1, r4
 8004362:	f7ff fd2a 	bl	8003dba <USBD_GetString>
  return USBD_StrDesc;
}
 8004366:	4620      	mov	r0, r4
 8004368:	bd10      	pop	{r4, pc}
 800436a:	bf00      	nop
 800436c:	200012d8 	.word	0x200012d8
 8004370:	080170c4 	.word	0x080170c4

08004374 <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004374:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004376:	4c04      	ldr	r4, [pc, #16]	; (8004388 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8004378:	4804      	ldr	r0, [pc, #16]	; (800438c <USBD_VCP_ManufacturerStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800437a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800437c:	4621      	mov	r1, r4
 800437e:	f7ff fd1c 	bl	8003dba <USBD_GetString>
  return USBD_StrDesc;
}
 8004382:	4620      	mov	r0, r4
 8004384:	bd10      	pop	{r4, pc}
 8004386:	bf00      	nop
 8004388:	200012d8 	.word	0x200012d8
 800438c:	080170e5 	.word	0x080170e5

08004390 <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004390:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8004392:	4c04      	ldr	r4, [pc, #16]	; (80043a4 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8004394:	4804      	ldr	r0, [pc, #16]	; (80043a8 <USBD_VCP_ConfigStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004396:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8004398:	4621      	mov	r1, r4
 800439a:	f7ff fd0e 	bl	8003dba <USBD_GetString>
  return USBD_StrDesc;  
}
 800439e:	4620      	mov	r0, r4
 80043a0:	bd10      	pop	{r4, pc}
 80043a2:	bf00      	nop
 80043a4:	200012d8 	.word	0x200012d8
 80043a8:	080170f8 	.word	0x080170f8

080043ac <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80043ac:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80043ae:	4c04      	ldr	r4, [pc, #16]	; (80043c0 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 80043b0:	4804      	ldr	r0, [pc, #16]	; (80043c4 <USBD_VCP_InterfaceStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80043b2:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80043b4:	4621      	mov	r1, r4
 80043b6:	f7ff fd00 	bl	8003dba <USBD_GetString>
  return USBD_StrDesc;  
}
 80043ba:	4620      	mov	r0, r4
 80043bc:	bd10      	pop	{r4, pc}
 80043be:	bf00      	nop
 80043c0:	200012d8 	.word	0x200012d8
 80043c4:	08017103 	.word	0x08017103

080043c8 <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 80043c8:	2000      	movs	r0, #0
 80043ca:	4770      	bx	lr

080043cc <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 80043cc:	b508      	push	{r3, lr}
 80043ce:	460b      	mov	r3, r1
 80043d0:	4602      	mov	r2, r0
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 80043d2:	4611      	mov	r1, r2
 80043d4:	2000      	movs	r0, #0
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	f7fc fc04 	bl	8000be4 <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 80043dc:	4802      	ldr	r0, [pc, #8]	; (80043e8 <CDC_Itf_Receive+0x1c>)
 80043de:	f7ff fe55 	bl	800408c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 80043e2:	2000      	movs	r0, #0
 80043e4:	bd08      	pop	{r3, pc}
 80043e6:	bf00      	nop
 80043e8:	20000f38 	.word	0x20000f38

080043ec <CDC_Itf_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Init(void)
{
 80043ec:	b508      	push	{r3, lr}
  //  USBD_CDC_SetTxBuffer(&hUSBDDevice, NULL, 0);
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 80043ee:	4903      	ldr	r1, [pc, #12]	; (80043fc <CDC_Itf_Init+0x10>)
 80043f0:	4803      	ldr	r0, [pc, #12]	; (8004400 <CDC_Itf_Init+0x14>)
 80043f2:	f7ff fe2e 	bl	8004052 <USBD_CDC_SetRxBuffer>


  return (USBD_OK);
}
 80043f6:	2000      	movs	r0, #0
 80043f8:	bd08      	pop	{r3, pc}
 80043fa:	bf00      	nop
 80043fc:	20001448 	.word	0x20001448
 8004400:	20000f38 	.word	0x20000f38

08004404 <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 8004404:	2820      	cmp	r0, #32
 8004406:	d012      	beq.n	800442e <CDC_Itf_Control+0x2a>
 8004408:	2821      	cmp	r0, #33	; 0x21
 800440a:	d122      	bne.n	8004452 <CDC_Itf_Control+0x4e>
    /* Set the new configuration */

    break;

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800440c:	4b12      	ldr	r3, [pc, #72]	; (8004458 <CDC_Itf_Control+0x54>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	0a12      	lsrs	r2, r2, #8
 8004416:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8004418:	885a      	ldrh	r2, [r3, #2]
 800441a:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800441c:	78da      	ldrb	r2, [r3, #3]
 800441e:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8004420:	791a      	ldrb	r2, [r3, #4]
 8004422:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8004424:	795a      	ldrb	r2, [r3, #5]
 8004426:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 8004428:	799b      	ldrb	r3, [r3, #6]
 800442a:	718b      	strb	r3, [r1, #6]
    
    /* Add your code here */
    break;
 800442c:	e011      	b.n	8004452 <CDC_Itf_Control+0x4e>
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 800442e:	788b      	ldrb	r3, [r1, #2]
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8004430:	784a      	ldrb	r2, [r1, #1]
 8004432:	4809      	ldr	r0, [pc, #36]	; (8004458 <CDC_Itf_Control+0x54>)
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800443a:	780a      	ldrb	r2, [r1, #0]
 800443c:	4313      	orrs	r3, r2
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 800443e:	78ca      	ldrb	r2, [r1, #3]
 8004440:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8004444:	6003      	str	r3, [r0, #0]
                            (pbuf[2] << 16) | (pbuf[3] << 24));
    LineCoding.format     = pbuf[4];
 8004446:	790b      	ldrb	r3, [r1, #4]
 8004448:	7103      	strb	r3, [r0, #4]
    LineCoding.paritytype = pbuf[5];
 800444a:	794b      	ldrb	r3, [r1, #5]
 800444c:	7143      	strb	r3, [r0, #5]
    LineCoding.datatype   = pbuf[6];
 800444e:	798b      	ldrb	r3, [r1, #6]
 8004450:	7183      	strb	r3, [r0, #6]
  default:
    break;
  }
  
  return (USBD_OK);
}
 8004452:	2000      	movs	r0, #0
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000160 	.word	0x20000160

0800445c <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 800445c:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800445e:	4c1c      	ldr	r4, [pc, #112]	; (80044d0 <SPIx_Init+0x74>)
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 8004460:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8004462:	4620      	mov	r0, r4
 8004464:	f7ff fa07 	bl	8003876 <HAL_SPI_GetState>
 8004468:	2800      	cmp	r0, #0
 800446a:	d12e      	bne.n	80044ca <SPIx_Init+0x6e>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 800446c:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <SPIx_Init+0x78>)
 800446e:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004470:	2318      	movs	r3, #24
 8004472:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 8004474:	2307      	movs	r3, #7
 8004476:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8004478:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800447c:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800447e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004482:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004484:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004488:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <SPIx_Init+0x7c>)
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800448c:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800448e:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004490:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8004492:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004494:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8004496:	6260      	str	r0, [r4, #36]	; 0x24
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800449e:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80044a6:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80044a8:	23e0      	movs	r3, #224	; 0xe0
 80044aa:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80044ac:	2302      	movs	r3, #2
 80044ae:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80044b0:	2303      	movs	r3, #3
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 80044b2:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80044b4:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80044b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80044ba:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80044bc:	a901      	add	r1, sp, #4
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80044be:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80044c0:	f7fd fc84 	bl	8001dcc <HAL_GPIO_Init>
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;

    SPIx_MspInit(&SpiHandle);
    HAL_SPI_Init(&SpiHandle);
 80044c4:	4620      	mov	r0, r4
 80044c6:	f7ff f81e 	bl	8003506 <HAL_SPI_Init>
  }
}
 80044ca:	b006      	add	sp, #24
 80044cc:	bd10      	pop	{r4, pc}
 80044ce:	bf00      	nop
 80044d0:	20000dc4 	.word	0x20000dc4
 80044d4:	40013000 	.word	0x40013000
 80044d8:	40021000 	.word	0x40021000

080044dc <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80044dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  uint8_t receivedbyte = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	f88d 3017 	strb.w	r3, [sp, #23]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <SPIx_WriteRead+0x38>)
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80044e6:	f88d 000f 	strb.w	r0, [sp, #15]

  uint8_t receivedbyte = 0;
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	480a      	ldr	r0, [pc, #40]	; (8004518 <SPIx_WriteRead+0x3c>)
 80044f0:	f10d 010f 	add.w	r1, sp, #15
 80044f4:	f10d 0217 	add.w	r2, sp, #23
 80044f8:	2301      	movs	r3, #1
 80044fa:	f7ff f86f 	bl	80035dc <HAL_SPI_TransmitReceive>
 80044fe:	b120      	cbz	r0, 800450a <SPIx_WriteRead+0x2e>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004500:	4805      	ldr	r0, [pc, #20]	; (8004518 <SPIx_WriteRead+0x3c>)
 8004502:	f7ff f854 	bl	80035ae <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8004506:	f7ff ffa9 	bl	800445c <SPIx_Init>
  {
    SPIx_Error();
  }
  
  return receivedbyte;
}
 800450a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800450e:	b007      	add	sp, #28
 8004510:	f85d fb04 	ldr.w	pc, [sp], #4
 8004514:	20000178 	.word	0x20000178
 8004518:	20000dc4 	.word	0x20000dc4

0800451c <I2Cx_Init>:
  * @brief Discovery I2Cx Bus initialization
  * @param None
  * @retval None
  */
static void I2Cx_Init(void)
{
 800451c:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800451e:	4c16      	ldr	r4, [pc, #88]	; (8004578 <I2Cx_Init+0x5c>)
  * @brief Discovery I2Cx Bus initialization
  * @param None
  * @retval None
  */
static void I2Cx_Init(void)
{
 8004520:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8004522:	4620      	mov	r0, r4
 8004524:	f7fe ff36 	bl	8003394 <HAL_I2C_GetState>
 8004528:	bb18      	cbnz	r0, 8004572 <I2Cx_Init+0x56>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800452a:	4b14      	ldr	r3, [pc, #80]	; (800457c <I2Cx_Init+0x60>)
 800452c:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 800452e:	2332      	movs	r3, #50	; 0x32
 8004530:	60a3      	str	r3, [r4, #8]
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8004532:	4d13      	ldr	r5, [pc, #76]	; (8004580 <I2Cx_Init+0x64>)
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8004534:	6120      	str	r0, [r4, #16]
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004536:	2301      	movs	r3, #1
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
    I2cHandle.Init.OwnAddress2 = 0;
 8004538:	6160      	str	r0, [r4, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800453a:	61e0      	str	r0, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800453c:	6220      	str	r0, [r4, #32]
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800453e:	60e3      	str	r3, [r4, #12]
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8004540:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8004542:	4810      	ldr	r0, [pc, #64]	; (8004584 <I2Cx_Init+0x68>)
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8004544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004548:	616b      	str	r3, [r5, #20]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 800454a:	23c0      	movs	r3, #192	; 0xc0
 800454c:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800454e:	2302      	movs	r3, #2
 8004550:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8004552:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004554:	2303      	movs	r3, #3
 8004556:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8004558:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800455a:	eb0d 0103 	add.w	r1, sp, r3
  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800455e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8004560:	f7fd fc34 	bl	8001dcc <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8004564:	69eb      	ldr	r3, [r5, #28]
 8004566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800456a:	61eb      	str	r3, [r5, #28]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 800456c:	4620      	mov	r0, r4
 800456e:	f7fe fdb3 	bl	80030d8 <HAL_I2C_Init>
  }
}
 8004572:	b007      	add	sp, #28
 8004574:	bd30      	pop	{r4, r5, pc}
 8004576:	bf00      	nop
 8004578:	20000e24 	.word	0x20000e24
 800457c:	40005400 	.word	0x40005400
 8004580:	40021000 	.word	0x40021000
 8004584:	48000400 	.word	0x48000400

08004588 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004588:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800458a:	4604      	mov	r4, r0
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800458c:	b086      	sub	sp, #24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800458e:	b168      	cbz	r0, 80045ac <BSP_LED_Init+0x24>
 8004590:	2801      	cmp	r0, #1
 8004592:	d00b      	beq.n	80045ac <BSP_LED_Init+0x24>
 8004594:	2802      	cmp	r0, #2
 8004596:	d009      	beq.n	80045ac <BSP_LED_Init+0x24>
 8004598:	2803      	cmp	r0, #3
 800459a:	d007      	beq.n	80045ac <BSP_LED_Init+0x24>
 800459c:	2804      	cmp	r0, #4
 800459e:	d005      	beq.n	80045ac <BSP_LED_Init+0x24>
 80045a0:	2805      	cmp	r0, #5
 80045a2:	d003      	beq.n	80045ac <BSP_LED_Init+0x24>
 80045a4:	2806      	cmp	r0, #6
 80045a6:	d001      	beq.n	80045ac <BSP_LED_Init+0x24>
 80045a8:	2807      	cmp	r0, #7
 80045aa:	d104      	bne.n	80045b6 <BSP_LED_Init+0x2e>
 80045ac:	4a0d      	ldr	r2, [pc, #52]	; (80045e4 <BSP_LED_Init+0x5c>)
 80045ae:	6953      	ldr	r3, [r2, #20]
 80045b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045b4:	6153      	str	r3, [r2, #20]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <BSP_LED_Init+0x60>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80045b8:	4e0c      	ldr	r6, [pc, #48]	; (80045ec <BSP_LED_Init+0x64>)
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80045ba:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80045be:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80045c2:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045c4:	2301      	movs	r3, #1
 80045c6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80045ca:	a901      	add	r1, sp, #4

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80045cc:	2303      	movs	r3, #3
 80045ce:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80045d0:	f7fd fbfc 	bl	8001dcc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80045d4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80045d8:	4629      	mov	r1, r5
 80045da:	2200      	movs	r2, #0
 80045dc:	f7fd fcc0 	bl	8001f60 <HAL_GPIO_WritePin>
}
 80045e0:	b006      	add	sp, #24
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	40021000 	.word	0x40021000
 80045e8:	08017124 	.word	0x08017124
 80045ec:	20000184 	.word	0x20000184

080045f0 <BSP_LED_On>:
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80045f0:	4a04      	ldr	r2, [pc, #16]	; (8004604 <BSP_LED_On+0x14>)
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80045f2:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80045f4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80045f8:	4a03      	ldr	r2, [pc, #12]	; (8004608 <BSP_LED_On+0x18>)
 80045fa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80045fe:	2201      	movs	r2, #1
 8004600:	f7fd bcae 	b.w	8001f60 <HAL_GPIO_WritePin>
 8004604:	20000184 	.word	0x20000184
 8004608:	08017124 	.word	0x08017124

0800460c <BSP_LED_Off>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800460c:	4a04      	ldr	r2, [pc, #16]	; (8004620 <BSP_LED_Off+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800460e:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8004610:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004614:	4a03      	ldr	r2, [pc, #12]	; (8004624 <BSP_LED_Off+0x18>)
 8004616:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800461a:	2200      	movs	r2, #0
 800461c:	f7fd bca0 	b.w	8001f60 <HAL_GPIO_WritePin>
 8004620:	20000184 	.word	0x20000184
 8004624:	08017124 	.word	0x08017124

08004628 <BSP_LED_Toggle>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004628:	4a04      	ldr	r2, [pc, #16]	; (800463c <BSP_LED_Toggle+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800462a:	4603      	mov	r3, r0
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800462c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004630:	4a03      	ldr	r2, [pc, #12]	; (8004640 <BSP_LED_Toggle+0x18>)
 8004632:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004636:	f7fd bc98 	b.w	8001f6a <HAL_GPIO_TogglePin>
 800463a:	bf00      	nop
 800463c:	20000184 	.word	0x20000184
 8004640:	08017124 	.word	0x08017124

08004644 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004644:	b510      	push	{r4, lr}
 8004646:	4b19      	ldr	r3, [pc, #100]	; (80046ac <BSP_PB_Init+0x68>)
 8004648:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800464a:	b918      	cbnz	r0, 8004654 <BSP_PB_Init+0x10>
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004652:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	619a      	str	r2, [r3, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800465c:	b969      	cbnz	r1, 800467a <BSP_PB_Init+0x36>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800465e:	2301      	movs	r3, #1
 8004660:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004662:	2302      	movs	r3, #2
 8004664:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004666:	2303      	movs	r3, #3
 8004668:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800466a:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <BSP_PB_Init+0x6c>)

  if (ButtonMode == BUTTON_MODE_GPIO)
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800466c:	9102      	str	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800466e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004672:	a901      	add	r1, sp, #4
 8004674:	f7fd fbaa 	bl	8001dcc <HAL_GPIO_Init>
 8004678:	e016      	b.n	80046a8 <BSP_PB_Init+0x64>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 800467a:	2901      	cmp	r1, #1
 800467c:	d114      	bne.n	80046a8 <BSP_PB_Init+0x64>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800467e:	2303      	movs	r3, #3
 8004680:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8004682:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <BSP_PB_Init+0x70>)
 8004684:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004686:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <BSP_PB_Init+0x6c>)
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8004688:	9101      	str	r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800468a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468e:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004690:	a901      	add	r1, sp, #4

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004692:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004694:	f7fd fb9a 	bl	8001dcc <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004698:	2006      	movs	r0, #6
 800469a:	210f      	movs	r1, #15
 800469c:	4622      	mov	r2, r4
 800469e:	f7fd fb43 	bl	8001d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80046a2:	2006      	movs	r0, #6
 80046a4:	f7fd fb70 	bl	8001d88 <HAL_NVIC_EnableIRQ>
  }
}
 80046a8:	b006      	add	sp, #24
 80046aa:	bd10      	pop	{r4, pc}
 80046ac:	40021000 	.word	0x40021000
 80046b0:	2000017c 	.word	0x2000017c
 80046b4:	10110000 	.word	0x10110000

080046b8 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80046b8:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80046ba:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <BSP_PB_GetState+0x10>)
 80046bc:	2101      	movs	r1, #1
 80046be:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80046c2:	f7fd fc47 	bl	8001f54 <HAL_GPIO_ReadPin>
}
 80046c6:	bd08      	pop	{r3, pc}
 80046c8:	2000017c 	.word	0x2000017c

080046cc <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 80046cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80046d0:	4c16      	ldr	r4, [pc, #88]	; (800472c <GYRO_IO_Init+0x60>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80046d2:	4d17      	ldr	r5, [pc, #92]	; (8004730 <GYRO_IO_Init+0x64>)
{
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80046d4:	6963      	ldr	r3, [r4, #20]
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 80046d6:	b087      	sub	sp, #28
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80046d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046dc:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80046de:	2600      	movs	r6, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80046e0:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80046e4:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80046e8:	2703      	movs	r7, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80046ea:	4628      	mov	r0, r5
 80046ec:	a901      	add	r1, sp, #4
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80046ee:	f8cd 9004 	str.w	r9, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80046f2:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80046f6:	9603      	str	r6, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80046f8:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80046fa:	f7fd fb67 	bl	8001dcc <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80046fe:	4642      	mov	r2, r8
 8004700:	4628      	mov	r0, r5
 8004702:	4649      	mov	r1, r9
 8004704:	f7fd fc2c 	bl	8001f60 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8004708:	6963      	ldr	r3, [r4, #20]
 800470a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800470e:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004710:	4628      	mov	r0, r5
  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8004712:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004714:	a901      	add	r1, sp, #4
  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8004716:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004718:	9602      	str	r6, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800471a:	9704      	str	r7, [sp, #16]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800471c:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800471e:	f7fd fb55 	bl	8001dcc <HAL_GPIO_Init>
  
  SPIx_Init();
 8004722:	f7ff fe9b 	bl	800445c <SPIx_Init>
}
 8004726:	b007      	add	sp, #28
 8004728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800472c:	40021000 	.word	0x40021000
 8004730:	48001000 	.word	0x48001000

08004734 <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8004734:	2a01      	cmp	r2, #1
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8004736:	b570      	push	{r4, r5, r6, lr}
 8004738:	460d      	mov	r5, r1
 800473a:	4606      	mov	r6, r0
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800473c:	bf88      	it	hi
 800473e:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004742:	480c      	ldr	r0, [pc, #48]	; (8004774 <GYRO_IO_Write+0x40>)
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8004744:	4614      	mov	r4, r2
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004746:	2108      	movs	r1, #8
 8004748:	2200      	movs	r2, #0
 800474a:	f7fd fc09 	bl	8001f60 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800474e:	4628      	mov	r0, r5
 8004750:	f7ff fec4 	bl	80044dc <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8004754:	b134      	cbz	r4, 8004764 <GYRO_IO_Write+0x30>
  {
    SPIx_WriteRead(*pBuffer);
 8004756:	f816 0b01 	ldrb.w	r0, [r6], #1
    NumByteToWrite--;
 800475a:	3c01      	subs	r4, #1
  SPIx_WriteRead(WriteAddr);
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
  {
    SPIx_WriteRead(*pBuffer);
 800475c:	f7ff febe 	bl	80044dc <SPIx_WriteRead>
    NumByteToWrite--;
 8004760:	b2a4      	uxth	r4, r4
 8004762:	e7f7      	b.n	8004754 <GYRO_IO_Write+0x20>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004764:	4803      	ldr	r0, [pc, #12]	; (8004774 <GYRO_IO_Write+0x40>)
 8004766:	2108      	movs	r1, #8
 8004768:	2201      	movs	r2, #1
}
 800476a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800476e:	f7fd bbf7 	b.w	8001f60 <HAL_GPIO_WritePin>
 8004772:	bf00      	nop
 8004774:	48001000 	.word	0x48001000

08004778 <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 8004778:	2a01      	cmp	r2, #1
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 800477a:	b570      	push	{r4, r5, r6, lr}
  if(NumByteToRead > 0x01)
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800477c:	bf8c      	ite	hi
 800477e:	f041 05c0 	orrhi.w	r5, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8004782:	f041 0580 	orrls.w	r5, r1, #128	; 0x80
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8004786:	4606      	mov	r6, r0
 8004788:	4614      	mov	r4, r2
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800478a:	480c      	ldr	r0, [pc, #48]	; (80047bc <GYRO_IO_Read+0x44>)
 800478c:	2108      	movs	r1, #8
 800478e:	2200      	movs	r2, #0
 8004790:	f7fd fbe6 	bl	8001f60 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8004794:	4628      	mov	r0, r5
 8004796:	f7ff fea1 	bl	80044dc <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800479a:	b13c      	cbz	r4, 80047ac <GYRO_IO_Read+0x34>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800479c:	2000      	movs	r0, #0
 800479e:	f7ff fe9d 	bl	80044dc <SPIx_WriteRead>
    NumByteToRead--;
 80047a2:	3c01      	subs	r4, #1
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80047a4:	f806 0b01 	strb.w	r0, [r6], #1
    NumByteToRead--;
 80047a8:	b2a4      	uxth	r4, r4
 80047aa:	e7f6      	b.n	800479a <GYRO_IO_Read+0x22>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80047ac:	4803      	ldr	r0, [pc, #12]	; (80047bc <GYRO_IO_Read+0x44>)
 80047ae:	2108      	movs	r1, #8
 80047b0:	2201      	movs	r2, #1
}  
 80047b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80047b6:	f7fd bbd3 	b.w	8001f60 <HAL_GPIO_WritePin>
 80047ba:	bf00      	nop
 80047bc:	48001000 	.word	0x48001000

080047c0 <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80047c0:	4b16      	ldr	r3, [pc, #88]	; (800481c <COMPASSACCELERO_IO_Init+0x5c>)
 80047c2:	695a      	ldr	r2, [r3, #20]
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 80047c4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80047c6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80047ca:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80047cc:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80047ce:	4d14      	ldr	r5, [pc, #80]	; (8004820 <COMPASSACCELERO_IO_Init+0x60>)
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80047d0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 80047d4:	b086      	sub	sp, #24
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80047d6:	615a      	str	r2, [r3, #20]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 80047d8:	2304      	movs	r3, #4
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80047da:	2400      	movs	r4, #0
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80047dc:	eb0d 0103 	add.w	r1, sp, r3
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80047e0:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80047e2:	4628      	mov	r0, r5
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 80047e4:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80047e6:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80047e8:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80047ea:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80047ec:	f7fd faee 	bl	8001dcc <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 80047f0:	4622      	mov	r2, r4
 80047f2:	4621      	mov	r1, r4
 80047f4:	2008      	movs	r0, #8
 80047f6:	f7fd fa97 	bl	8001d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 80047fa:	2008      	movs	r0, #8
 80047fc:	f7fd fac4 	bl	8001d88 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8004800:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004802:	4628      	mov	r0, r5
 8004804:	a901      	add	r1, sp, #4
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8004806:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004808:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800480a:	9604      	str	r6, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800480c:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800480e:	f7fd fadd 	bl	8001dcc <HAL_GPIO_Init>
  
  I2Cx_Init();
 8004812:	f7ff fe83 	bl	800451c <I2Cx_Init>
}
 8004816:	b006      	add	sp, #24
 8004818:	bd70      	pop	{r4, r5, r6, pc}
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000
 8004820:	48001000 	.word	0x48001000

08004824 <COMPASSACCELERO_IO_ITConfig>:
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8004824:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8004826:	4a0e      	ldr	r2, [pc, #56]	; (8004860 <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004828:	480e      	ldr	r0, [pc, #56]	; (8004864 <COMPASSACCELERO_IO_ITConfig+0x40>)
void COMPASSACCELERO_IO_ITConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800482a:	6953      	ldr	r3, [r2, #20]
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 800482c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800482e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004832:	6153      	str	r3, [r2, #20]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8004834:	2330      	movs	r3, #48	; 0x30
 8004836:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <COMPASSACCELERO_IO_ITConfig+0x44>)
 800483a:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800483c:	2400      	movs	r4, #0
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800483e:	2303      	movs	r3, #3
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004840:	a901      	add	r1, sp, #4
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004842:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004844:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004846:	f7fd fac1 	bl	8001dcc <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 800484a:	4621      	mov	r1, r4
 800484c:	4622      	mov	r2, r4
 800484e:	200a      	movs	r0, #10
 8004850:	f7fd fa6a 	bl	8001d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8004854:	200a      	movs	r0, #10
 8004856:	f7fd fa97 	bl	8001d88 <HAL_NVIC_EnableIRQ>
  
}
 800485a:	b006      	add	sp, #24
 800485c:	bd10      	pop	{r4, pc}
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000
 8004864:	48001000 	.word	0x48001000
 8004868:	10110000 	.word	0x10110000

0800486c <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800486c:	b510      	push	{r4, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	ab06      	add	r3, sp, #24
 8004872:	4604      	mov	r4, r0
 8004874:	f803 2d01 	strb.w	r2, [r3, #-1]!
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8004878:	460a      	mov	r2, r1
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	4908      	ldr	r1, [pc, #32]	; (80048a0 <COMPASSACCELERO_IO_Write+0x34>)
 800487e:	4809      	ldr	r0, [pc, #36]	; (80048a4 <COMPASSACCELERO_IO_Write+0x38>)
 8004880:	2301      	movs	r3, #1
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	6809      	ldr	r1, [r1, #0]
 8004886:	9102      	str	r1, [sp, #8]
 8004888:	4621      	mov	r1, r4
 800488a:	f7fe fc85 	bl	8003198 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 800488e:	b120      	cbz	r0, 800489a <COMPASSACCELERO_IO_Write+0x2e>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8004890:	4804      	ldr	r0, [pc, #16]	; (80048a4 <COMPASSACCELERO_IO_Write+0x38>)
 8004892:	f7fe fc6a 	bl	800316a <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8004896:	f7ff fe41 	bl	800451c <I2Cx_Init>
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 800489a:	b006      	add	sp, #24
 800489c:	bd10      	pop	{r4, pc}
 800489e:	bf00      	nop
 80048a0:	20000180 	.word	0x20000180
 80048a4:	20000e24 	.word	0x20000e24

080048a8 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80048a8:	b510      	push	{r4, lr}
 80048aa:	b086      	sub	sp, #24
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
 80048ac:	ab06      	add	r3, sp, #24
 80048ae:	2200      	movs	r2, #0
 80048b0:	f803 2d01 	strb.w	r2, [r3, #-1]!
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80048b4:	460a      	mov	r2, r1
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	4909      	ldr	r1, [pc, #36]	; (80048e0 <COMPASSACCELERO_IO_Read+0x38>)
 80048ba:	2301      	movs	r3, #1
 80048bc:	9301      	str	r3, [sp, #4]
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80048be:	4604      	mov	r4, r0
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80048c0:	6809      	ldr	r1, [r1, #0]
 80048c2:	9102      	str	r1, [sp, #8]
 80048c4:	4807      	ldr	r0, [pc, #28]	; (80048e4 <COMPASSACCELERO_IO_Read+0x3c>)
 80048c6:	4621      	mov	r1, r4
 80048c8:	f7fe fce2 	bl	8003290 <HAL_I2C_Mem_Read>
 
  /* Check the communication status */
  if(status != HAL_OK)
 80048cc:	b120      	cbz	r0, 80048d8 <COMPASSACCELERO_IO_Read+0x30>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80048ce:	4805      	ldr	r0, [pc, #20]	; (80048e4 <COMPASSACCELERO_IO_Read+0x3c>)
 80048d0:	f7fe fc4b 	bl	800316a <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80048d4:	f7ff fe22 	bl	800451c <I2Cx_Init>
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 80048d8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80048dc:	b006      	add	sp, #24
 80048de:	bd10      	pop	{r4, pc}
 80048e0:	20000180 	.word	0x20000180
 80048e4:	20000e24 	.word	0x20000e24

080048e8 <BSP_ACCELERO_Init>:
  * @brief  Set ACCELEROMETER Initialization.
  * @param  None
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{  
 80048e8:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 80048ea:	4c09      	ldr	r4, [pc, #36]	; (8004910 <BSP_ACCELERO_Init+0x28>)
 80048ec:	6863      	ldr	r3, [r4, #4]
 80048ee:	4798      	blx	r3
 80048f0:	2833      	cmp	r0, #51	; 0x33
 80048f2:	d10b      	bne.n	800490c <BSP_ACCELERO_Init+0x24>
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 80048f4:	4d07      	ldr	r5, [pc, #28]	; (8004914 <BSP_ACCELERO_Init+0x2c>)
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80048f6:	6823      	ldr	r3, [r4, #0]
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 80048f8:	602c      	str	r4, [r5, #0]
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80048fa:	f640 0047 	movw	r0, #2119	; 0x847
 80048fe:	4798      	blx	r3
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);

  /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	2090      	movs	r0, #144	; 0x90
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	4798      	blx	r3

    ret = ACCELERO_OK;
 8004908:	2000      	movs	r0, #0
 800490a:	bd38      	pop	{r3, r4, r5, pc}
  }  
  else
  {
    ret = ACCELERO_ERROR;
 800490c:	2001      	movs	r0, #1
  }

  return ret;
}
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	200001a4 	.word	0x200001a4
 8004914:	20000e5c 	.word	0x20000e5c

08004918 <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 8004918:	4b02      	ldr	r3, [pc, #8]	; (8004924 <BSP_ACCELERO_GetXYZ+0xc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	b103      	cbz	r3, 8004922 <BSP_ACCELERO_GetXYZ+0xa>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8004920:	4718      	bx	r3
 8004922:	4770      	bx	lr
 8004924:	20000e5c 	.word	0x20000e5c

08004928 <BSP_GYRO_Init>:
  * @brief  Set GYROSCOPE Initialization.
  * @param  None
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8004928:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800492a:	4c0e      	ldr	r4, [pc, #56]	; (8004964 <BSP_GYRO_Init+0x3c>)
 800492c:	6863      	ldr	r3, [r4, #4]
 800492e:	4798      	blx	r3
 8004930:	28d4      	cmp	r0, #212	; 0xd4
 8004932:	4625      	mov	r5, r4
 8004934:	d10f      	bne.n	8004956 <BSP_GYRO_Init+0x2e>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8004936:	4c0c      	ldr	r4, [pc, #48]	; (8004968 <BSP_GYRO_Init+0x40>)
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 8004938:	682b      	ldr	r3, [r5, #0]
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800493a:	6025      	str	r5, [r4, #0]
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 800493c:	f241 003f 	movw	r0, #4159	; 0x103f
 8004940:	4798      	blx	r3
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
	
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));		
	
    GyroscopeDrv->FilterConfig(ctrl) ;
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	2000      	movs	r0, #0
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	2010      	movs	r0, #16
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	4798      	blx	r3
	
    ret = GYRO_OK;
 8004952:	2000      	movs	r0, #0
 8004954:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8004956:	6863      	ldr	r3, [r4, #4]
 8004958:	4798      	blx	r3
 800495a:	28d5      	cmp	r0, #213	; 0xd5
 800495c:	d0eb      	beq.n	8004936 <BSP_GYRO_Init+0xe>
	
    ret = GYRO_OK;
  }
  else
  {
    ret = GYRO_ERROR;
 800495e:	2001      	movs	r0, #1
  }
  
  return ret;
}
 8004960:	bd38      	pop	{r3, r4, r5, pc}
 8004962:	bf00      	nop
 8004964:	200001d0 	.word	0x200001d0
 8004968:	20000e60 	.word	0x20000e60

0800496c <BSP_GYRO_GetXYZ>:
  * @param pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 800496c:	4b02      	ldr	r3, [pc, #8]	; (8004978 <BSP_GYRO_GetXYZ+0xc>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004972:	b103      	cbz	r3, 8004976 <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8004974:	4718      	bx	r3
 8004976:	4770      	bx	lr
 8004978:	20000e60 	.word	0x20000e60

0800497c <LSM303DLHC_AccInit>:
  * @brief    Set LSM303DLHC Initialization.
  * @param  InitStruct: init parameters
  * @retval   None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 800497c:	b510      	push	{r4, lr}
 800497e:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8004980:	f7ff ff1e 	bl	80047c0 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8004984:	b2e2      	uxtb	r2, r4
 8004986:	2032      	movs	r0, #50	; 0x32
 8004988:	2120      	movs	r1, #32
 800498a:	f7ff ff6f 	bl	800486c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800498e:	2032      	movs	r0, #50	; 0x32
 8004990:	2123      	movs	r1, #35	; 0x23
 8004992:	2200      	movs	r2, #0
}
 8004994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8004998:	f7ff bf68 	b.w	800486c <COMPASSACCELERO_IO_Write>

0800499c <LSM303DLHC_AccReadID>:
/**
  * @brief     Read LSM303DLHC ID.
  * @retval   ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800499c:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800499e:	f7ff ff0f 	bl	80047c0 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80049a2:	2032      	movs	r0, #50	; 0x32
 80049a4:	210f      	movs	r1, #15

  return ctrl;
}
 80049a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80049aa:	f7ff bf7d 	b.w	80048a8 <COMPASSACCELERO_IO_Read>

080049ae <LSM303DLHC_AccRebootCmd>:
/**
  * @brief     Reboot memory content of LSM303DLHC
  * @retval   None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80049ae:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80049b0:	2124      	movs	r1, #36	; 0x24
 80049b2:	2032      	movs	r0, #50	; 0x32
 80049b4:	f7ff ff78 	bl	80048a8 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80049b8:	f060 027f 	orn	r2, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80049bc:	2124      	movs	r1, #36	; 0x24
 80049be:	2032      	movs	r0, #50	; 0x32
 80049c0:	b2d2      	uxtb	r2, r2
}
 80049c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80049c6:	f7ff bf51 	b.w	800486c <COMPASSACCELERO_IO_Write>

080049ca <LSM303DLHC_AccFilterConfig>:
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80049ca:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80049cc:	2121      	movs	r1, #33	; 0x21
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80049ce:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80049d0:	2032      	movs	r0, #50	; 0x32
 80049d2:	f7ff ff69 	bl	80048a8 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 80049d6:	f000 020c 	and.w	r2, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80049da:	4322      	orrs	r2, r4
 80049dc:	2032      	movs	r0, #50	; 0x32
 80049de:	2121      	movs	r1, #33	; 0x21
}
 80049e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  tmpreg &= 0x0C;
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80049e4:	f7ff bf42 	b.w	800486c <COMPASSACCELERO_IO_Write>

080049e8 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 80049e8:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80049ea:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 80049ec:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80049ee:	2032      	movs	r0, #50	; 0x32
 80049f0:	f7ff ff5a 	bl	80048a8 <COMPASSACCELERO_IO_Read>
                  
  tmpreg &= 0xF7;
 80049f4:	f000 02f7 	and.w	r2, r0, #247	; 0xf7

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80049f8:	4322      	orrs	r2, r4
 80049fa:	2032      	movs	r0, #50	; 0x32
 80049fc:	2121      	movs	r1, #33	; 0x21
}
 80049fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= 0xF7;

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004a02:	f7ff bf33 	b.w	800486c <COMPASSACCELERO_IO_Write>

08004a06 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8004a06:	b5f0      	push	{r4, r5, r6, r7, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8004a08:	2123      	movs	r1, #35	; 0x23
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	4605      	mov	r5, r0
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8004a0e:	2032      	movs	r0, #50	; 0x32
 8004a10:	f7ff ff4a 	bl	80048a8 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8004a14:	2124      	movs	r1, #36	; 0x24
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8004a16:	4604      	mov	r4, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8004a18:	2032      	movs	r0, #50	; 0x32
 8004a1a:	f7ff ff45 	bl	80048a8 <COMPASSACCELERO_IO_Read>

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8004a1e:	2128      	movs	r1, #40	; 0x28
 8004a20:	2032      	movs	r0, #50	; 0x32
 8004a22:	f7ff ff41 	bl	80048a8 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8004a26:	2129      	movs	r1, #41	; 0x29
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8004a28:	f88d 0008 	strb.w	r0, [sp, #8]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8004a2c:	2032      	movs	r0, #50	; 0x32
 8004a2e:	f7ff ff3b 	bl	80048a8 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8004a32:	212a      	movs	r1, #42	; 0x2a
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8004a34:	f88d 0009 	strb.w	r0, [sp, #9]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8004a38:	2032      	movs	r0, #50	; 0x32
 8004a3a:	f7ff ff35 	bl	80048a8 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8004a3e:	212b      	movs	r1, #43	; 0x2b
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8004a40:	f88d 000a 	strb.w	r0, [sp, #10]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8004a44:	2032      	movs	r0, #50	; 0x32
 8004a46:	f7ff ff2f 	bl	80048a8 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8004a4a:	212c      	movs	r1, #44	; 0x2c

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8004a4c:	f88d 000b 	strb.w	r0, [sp, #11]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8004a50:	2032      	movs	r0, #50	; 0x32
 8004a52:	f7ff ff29 	bl	80048a8 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8004a56:	212d      	movs	r1, #45	; 0x2d
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8004a58:	f88d 000c 	strb.w	r0, [sp, #12]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8004a5c:	2032      	movs	r0, #50	; 0x32
 8004a5e:	f7ff ff23 	bl	80048a8 <COMPASSACCELERO_IO_Read>
  
  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8004a62:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004a66:	f99d 6009 	ldrsb.w	r6, [sp, #9]
 8004a6a:	f99d 7008 	ldrsb.w	r7, [sp, #8]
 8004a6e:	f99d 200b 	ldrsb.w	r2, [sp, #11]
 8004a72:	f99d 100a 	ldrsb.w	r1, [sp, #10]
 8004a76:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 8004a7a:	b240      	sxtb	r0, r0
 8004a7c:	d116      	bne.n	8004aac <LSM303DLHC_AccReadXYZ+0xa6>
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8004a7e:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8004a82:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 8004a86:	f8ad 6000 	strh.w	r6, [sp]
 8004a8a:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004a8e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    }
  }

  /* normal mode */
  /* switch the sensitivity value set in the CRTL4*/
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8004a92:	f004 0430 	and.w	r4, r4, #48	; 0x30
 8004a96:	2c20      	cmp	r4, #32
  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8004a98:	f8ad 0004 	strh.w	r0, [sp, #4]
    }
  }

  /* normal mode */
  /* switch the sensitivity value set in the CRTL4*/
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8004a9c:	d011      	beq.n	8004ac2 <LSM303DLHC_AccReadXYZ+0xbc>
 8004a9e:	2c30      	cmp	r4, #48	; 0x30
 8004aa0:	d011      	beq.n	8004ac6 <LSM303DLHC_AccReadXYZ+0xc0>
 8004aa2:	2c10      	cmp	r4, #16
{
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2302      	moveq	r3, #2
 8004aa8:	2301      	movne	r3, #1
 8004aaa:	e00d      	b.n	8004ac8 <LSM303DLHC_AccReadXYZ+0xc2>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8004aac:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8004ab0:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8004ab4:	f8ad 6000 	strh.w	r6, [sp]
 8004ab8:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004abc:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8004ac0:	e7e7      	b.n	8004a92 <LSM303DLHC_AccReadXYZ+0x8c>
    break;
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
    break;
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8004ac2:	2304      	movs	r3, #4
    break;
 8004ac4:	e000      	b.n	8004ac8 <LSM303DLHC_AccReadXYZ+0xc2>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8004ac6:	230c      	movs	r3, #12
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8004ac8:	f8bd 2000 	ldrh.w	r2, [sp]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	fb12 f203 	smulbb	r2, r2, r3
 8004ad2:	802a      	strh	r2, [r5, #0]
 8004ad4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004ad8:	fb12 f203 	smulbb	r2, r2, r3
 8004adc:	806a      	strh	r2, [r5, #2]
 8004ade:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004ae2:	fb12 f303 	smulbb	r3, r2, r3
 8004ae6:	80ab      	strh	r3, [r5, #4]
  }

}
 8004ae8:	b005      	add	sp, #20
 8004aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004aec <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 8004aec:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004aee:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 8004af0:	4604      	mov	r4, r0
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004af2:	2032      	movs	r0, #50	; 0x32
 8004af4:	f7ff fed8 	bl	80048a8 <COMPASSACCELERO_IO_Read>

  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8004af8:	f000 02fb 	and.w	r2, r0, #251	; 0xfb

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004afc:	4322      	orrs	r2, r4
 8004afe:	2032      	movs	r0, #50	; 0x32
 8004b00:	2121      	movs	r1, #33	; 0x21
}
 8004b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004b06:	f7ff beb1 	b.w	800486c <COMPASSACCELERO_IO_Write>

08004b0a <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8004b0a:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8004b0c:	2122      	movs	r1, #34	; 0x22
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8004b0e:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8004b10:	2032      	movs	r0, #50	; 0x32
 8004b12:	f7ff fec9 	bl	80048a8 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8004b16:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8004b1a:	2122      	movs	r1, #34	; 0x22
 8004b1c:	2032      	movs	r0, #50	; 0x32
 8004b1e:	b2d2      	uxtb	r2, r2
}
 8004b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8004b24:	f7ff bea2 	b.w	800486c <COMPASSACCELERO_IO_Write>

08004b28 <LSM303DLHC_AccClickITEnable>:
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8004b28:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8004b2a:	2138      	movs	r1, #56	; 0x38
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8004b2c:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8004b2e:	2032      	movs	r0, #50	; 0x32
 8004b30:	f7ff feba 	bl	80048a8 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8004b34:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8004b38:	2138      	movs	r1, #56	; 0x38
 8004b3a:	2032      	movs	r0, #50	; 0x32
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	f7ff fe95 	bl	800486c <COMPASSACCELERO_IO_Write>

  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8004b42:	2032      	movs	r0, #50	; 0x32
 8004b44:	213a      	movs	r1, #58	; 0x3a
 8004b46:	220a      	movs	r2, #10
 8004b48:	f7ff fe90 	bl	800486c <COMPASSACCELERO_IO_Write>

  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8004b4c:	2032      	movs	r0, #50	; 0x32
 8004b4e:	213b      	movs	r1, #59	; 0x3b
 8004b50:	2205      	movs	r2, #5
 8004b52:	f7ff fe8b 	bl	800486c <COMPASSACCELERO_IO_Write>

  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8004b56:	2032      	movs	r0, #50	; 0x32
 8004b58:	213c      	movs	r1, #60	; 0x3c
 8004b5a:	2205      	movs	r2, #5
 8004b5c:	f7ff fe86 	bl	800486c <COMPASSACCELERO_IO_Write>

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8004b60:	2032      	movs	r0, #50	; 0x32
 8004b62:	213d      	movs	r1, #61	; 0x3d
 8004b64:	4602      	mov	r2, r0

}
 8004b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8004b6a:	f7ff be7f 	b.w	800486c <COMPASSACCELERO_IO_Write>

08004b6e <LSM303DLHC_AccZClickITConfig>:
  * @brief  click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8004b6e:	b508      	push	{r3, lr}
  /* configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8004b70:	f7ff fe58 	bl	8004824 <COMPASSACCELERO_IO_ITConfig>
  
  /* select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8004b74:	2080      	movs	r0, #128	; 0x80
 8004b76:	f7ff ffc8 	bl	8004b0a <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8004b7a:	2004      	movs	r0, #4
 8004b7c:	f7ff ffb6 	bl	8004aec <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8004b80:	2010      	movs	r0, #16
  
}
 8004b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8004b86:	f7ff bfcf 	b.w	8004b28 <LSM303DLHC_AccClickITEnable>

08004b8a <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8004b8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 8004b8c:	ac02      	add	r4, sp, #8
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
  uint8_t ctrl = 0x00;
 8004b8e:	2300      	movs	r3, #0
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8004b90:	4605      	mov	r5, r0
  uint8_t ctrl = 0x00;
 8004b92:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 8004b96:	f7ff fd99 	bl	80046cc <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 8004b9a:	f804 5d01 	strb.w	r5, [r4, #-1]!
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8004b9e:	2120      	movs	r1, #32
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f7ff fdc6 	bl	8004734 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8004ba8:	0a2d      	lsrs	r5, r5, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8004baa:	4620      	mov	r0, r4
 8004bac:	2123      	movs	r1, #35	; 0x23
 8004bae:	2201      	movs	r2, #1
  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8004bb0:	f88d 5007 	strb.w	r5, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8004bb4:	f7ff fdbe 	bl	8004734 <GYRO_IO_Write>
}
 8004bb8:	b003      	add	sp, #12
 8004bba:	bd30      	pop	{r4, r5, pc}

08004bbc <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  Device ID address
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8004bbc:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp;

  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 8004bbe:	f7ff fd85 	bl	80046cc <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8004bc2:	f10d 0007 	add.w	r0, sp, #7
 8004bc6:	210f      	movs	r1, #15
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f7ff fdd5 	bl	8004778 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
}
 8004bce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004bd2:	b003      	add	sp, #12
 8004bd4:	f85d fb04 	ldr.w	pc, [sp], #4

08004bd8 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8004bd8:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004bda:	2124      	movs	r1, #36	; 0x24
 8004bdc:	f10d 0007 	add.w	r0, sp, #7
 8004be0:	2201      	movs	r2, #1
 8004be2:	f7ff fdc9 	bl	8004778 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8004be6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004bea:	f10d 0007 	add.w	r0, sp, #7
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8004bee:	f063 037f 	orn	r3, r3, #127	; 0x7f
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004bf2:	2124      	movs	r1, #36	; 0x24
 8004bf4:	2201      	movs	r2, #1
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8004bf6:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004bfa:	f7ff fd9b 	bl	8004734 <GYRO_IO_Write>
}
 8004bfe:	b003      	add	sp, #12
 8004c00:	f85d fb04 	ldr.w	pc, [sp], #4

08004c04 <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8004c04:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8004c06:	2300      	movs	r3, #0
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8004c08:	4604      	mov	r4, r0
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004c0a:	2130      	movs	r1, #48	; 0x30
 8004c0c:	f10d 0006 	add.w	r0, sp, #6
 8004c10:	2201      	movs	r2, #1
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8004c12:	f88d 3006 	strb.w	r3, [sp, #6]
 8004c16:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004c1a:	f7ff fdad 	bl	8004778 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8004c1e:	f10d 0007 	add.w	r0, sp, #7
 8004c22:	2122      	movs	r1, #34	; 0x22
 8004c24:	2201      	movs	r2, #1
 8004c26:	f7ff fda7 	bl	8004778 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 8004c2a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
  
  ctrl_cfr &= 0x80;
 8004c2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 8004c32:	f020 0020 	bic.w	r0, r0, #32
  ctrl3 |= ((uint8_t) Int1Config);
 8004c36:	4320      	orrs	r0, r4
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
  
  ctrl_cfr &= 0x80;
 8004c38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
  ctrl3 |= ((uint8_t) Int1Config);
 8004c3c:	f88d 0007 	strb.w	r0, [sp, #7]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004c40:	2130      	movs	r1, #48	; 0x30
 8004c42:	f10d 0006 	add.w	r0, sp, #6
 8004c46:	2201      	movs	r2, #1
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8004c48:	f88d 3006 	strb.w	r3, [sp, #6]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004c4c:	f7ff fd72 	bl	8004734 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8004c50:	f10d 0007 	add.w	r0, sp, #7
 8004c54:	2122      	movs	r1, #34	; 0x22
 8004c56:	2201      	movs	r2, #1
 8004c58:	f7ff fd6c 	bl	8004734 <GYRO_IO_Write>
}
 8004c5c:	b002      	add	sp, #8
 8004c5e:	bd10      	pop	{r4, pc}

08004c60 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8004c60:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004c62:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8004c64:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004c66:	2122      	movs	r1, #34	; 0x22
 8004c68:	f10d 0007 	add.w	r0, sp, #7
 8004c6c:	f7ff fd84 	bl	8004778 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8004c70:	b924      	cbnz	r4, 8004c7c <L3GD20_EnableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 8004c72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8004c76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c7a:	e007      	b.n	8004c8c <L3GD20_EnableIT+0x2c>
  }
  else if(IntSel == L3GD20_INT2)
 8004c7c:	2c01      	cmp	r4, #1
 8004c7e:	d107      	bne.n	8004c90 <L3GD20_EnableIT+0x30>
  {
    tmpreg &= 0xF7;
 8004c80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004c84:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8004c88:	f043 0308 	orr.w	r3, r3, #8
 8004c8c:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004c90:	f10d 0007 	add.w	r0, sp, #7
 8004c94:	2122      	movs	r1, #34	; 0x22
 8004c96:	2201      	movs	r2, #1
 8004c98:	f7ff fd4c 	bl	8004734 <GYRO_IO_Write>
}
 8004c9c:	b002      	add	sp, #8
 8004c9e:	bd10      	pop	{r4, pc}

08004ca0 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8004ca0:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004ca2:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8004ca4:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004ca6:	2122      	movs	r1, #34	; 0x22
 8004ca8:	f10d 0007 	add.w	r0, sp, #7
 8004cac:	f7ff fd64 	bl	8004778 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8004cb0:	b924      	cbnz	r4, 8004cbc <L3GD20_DisableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 8004cb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cba:	e005      	b.n	8004cc8 <L3GD20_DisableIT+0x28>
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
 8004cbc:	2c01      	cmp	r4, #1
 8004cbe:	d105      	bne.n	8004ccc <L3GD20_DisableIT+0x2c>
  {
    tmpreg &= 0xF7;
 8004cc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004cc4:	f023 0308 	bic.w	r3, r3, #8
 8004cc8:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004ccc:	f10d 0007 	add.w	r0, sp, #7
 8004cd0:	2122      	movs	r1, #34	; 0x22
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f7ff fd2e 	bl	8004734 <GYRO_IO_Write>
}
 8004cd8:	b002      	add	sp, #8
 8004cda:	bd10      	pop	{r4, pc}

08004cdc <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8004cdc:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004cde:	2201      	movs	r2, #1
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8004ce0:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004ce2:	2121      	movs	r1, #33	; 0x21
 8004ce4:	f10d 0007 	add.w	r0, sp, #7
 8004ce8:	f7ff fd46 	bl	8004778 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8004cec:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004cf0:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= FilterStruct;
 8004cf4:	4320      	orrs	r0, r4
 8004cf6:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Write value to MEMS CTRL_REG2 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004cfa:	2121      	movs	r1, #33	; 0x21
 8004cfc:	f10d 0007 	add.w	r0, sp, #7
 8004d00:	2201      	movs	r2, #1
 8004d02:	f7ff fd17 	bl	8004734 <GYRO_IO_Write>
}
 8004d06:	b002      	add	sp, #8
 8004d08:	bd10      	pop	{r4, pc}

08004d0a <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8004d0a:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004d0c:	2201      	movs	r2, #1
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8004d0e:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004d10:	2124      	movs	r1, #36	; 0x24
 8004d12:	f10d 0007 	add.w	r0, sp, #7
 8004d16:	f7ff fd2f 	bl	8004778 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8004d1a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004d1e:	f020 0010 	bic.w	r0, r0, #16
  
  tmpreg |= HighPassFilterState;
 8004d22:	4320      	orrs	r0, r4
 8004d24:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004d28:	2124      	movs	r1, #36	; 0x24
 8004d2a:	f10d 0007 	add.w	r0, sp, #7
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f7ff fd00 	bl	8004734 <GYRO_IO_Write>
}
 8004d34:	b002      	add	sp, #8
 8004d36:	bd10      	pop	{r4, pc}

08004d38 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
 8004d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	4604      	mov	r4, r0
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 8004d3e:	a806      	add	r0, sp, #24
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
 8004d40:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 8004d42:	f800 3d11 	strb.w	r3, [r0, #-17]!
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8004d46:	2123      	movs	r1, #35	; 0x23
 8004d48:	2201      	movs	r2, #1
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
 8004d4a:	9302      	str	r3, [sp, #8]
 8004d4c:	f8ad 300c 	strh.w	r3, [sp, #12]
  int16_t RawData[3] = {0};
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	f8ad 3014 	strh.w	r3, [sp, #20]
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8004d56:	f7ff fd0f 	bl	8004778 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8004d5a:	a802      	add	r0, sp, #8
 8004d5c:	2128      	movs	r1, #40	; 0x28
 8004d5e:	2206      	movs	r2, #6
 8004d60:	f7ff fd0a 	bl	8004778 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8004d64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d68:	f89d 6009 	ldrb.w	r6, [sp, #9]
 8004d6c:	f89d 7008 	ldrb.w	r7, [sp, #8]
 8004d70:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8004d74:	f89d 500a 	ldrb.w	r5, [sp, #10]
 8004d78:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8004d7c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004d80:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d84:	d11a      	bne.n	8004dbc <L3GD20_ReadXYZAngRate+0x84>
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8004d86:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8004d8a:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 8004d8e:	f8ad 6010 	strh.w	r6, [sp, #16]
 8004d92:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004d96:	eb01 2202 	add.w	r2, r1, r2, lsl #8
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8004d9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d9e:	2b10      	cmp	r3, #16
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8004da0:	f8ad 2014 	strh.w	r2, [sp, #20]
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8004da4:	d015      	beq.n	8004dd2 <L3GD20_ReadXYZAngRate+0x9a>
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d016      	beq.n	8004dd8 <L3GD20_ReadXYZAngRate+0xa0>
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
 8004daa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004e00 <L3GD20_ReadXYZAngRate+0xc8>
 8004dae:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004e04 <L3GD20_ReadXYZAngRate+0xcc>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bf08      	it	eq
 8004db6:	eeb0 7a67 	vmoveq.f32	s14, s15
 8004dba:	e00f      	b.n	8004ddc <L3GD20_ReadXYZAngRate+0xa4>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8004dbc:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8004dc0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8004dc4:	f8ad 6010 	strh.w	r6, [sp, #16]
 8004dc8:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004dcc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8004dd0:	e7e3      	b.n	8004d9a <L3GD20_ReadXYZAngRate+0x62>
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
    break;
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8004dd2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004e08 <L3GD20_ReadXYZAngRate+0xd0>
    break;
 8004dd6:	e001      	b.n	8004ddc <L3GD20_ReadXYZAngRate+0xa4>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8004dd8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004e0c <L3GD20_ReadXYZAngRate+0xd4>
 8004ddc:	4620      	mov	r0, r4
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8004dde:	2300      	movs	r3, #0
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8004de0:	aa04      	add	r2, sp, #16
 8004de2:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8004de6:	ee07 2a90 	vmov	s15, r2
 8004dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8004dee:	3301      	adds	r3, #1
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8004df0:	ee67 7a87 	vmul.f32	s15, s15, s14
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8004df4:	2b03      	cmp	r3, #3
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8004df6:	ece0 7a01 	vstmia	r0!, {s15}
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8004dfa:	d1f1      	bne.n	8004de0 <L3GD20_ReadXYZAngRate+0xa8>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
  }
}
 8004dfc:	b007      	add	sp, #28
 8004dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e00:	00000000 	.word	0x00000000
 8004e04:	410c0000 	.word	0x410c0000
 8004e08:	418c0000 	.word	0x418c0000
 8004e0c:	428c0000 	.word	0x428c0000

08004e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e48 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004e14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004e16:	e003      	b.n	8004e20 <LoopCopyDataInit>

08004e18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004e18:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004e1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004e1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004e1e:	3104      	adds	r1, #4

08004e20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004e20:	480b      	ldr	r0, [pc, #44]	; (8004e50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004e22:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004e24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004e26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004e28:	d3f6      	bcc.n	8004e18 <CopyDataInit>
	ldr	r2, =_sbss
 8004e2a:	4a0b      	ldr	r2, [pc, #44]	; (8004e58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004e2c:	e002      	b.n	8004e34 <LoopFillZerobss>

08004e2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004e2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004e30:	f842 3b04 	str.w	r3, [r2], #4

08004e34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <LoopForever+0x16>)
	cmp	r2, r3
 8004e36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004e38:	d3f9      	bcc.n	8004e2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004e3a:	f7fc fa4b 	bl	80012d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e3e:	f000 f817 	bl	8004e70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004e42:	f7fb fb0f 	bl	8000464 <main>

08004e46 <LoopForever>:

LoopForever:
    b LoopForever
 8004e46:	e7fe      	b.n	8004e46 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e48:	20007fff 	.word	0x20007fff
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8004e4c:	08017250 	.word	0x08017250
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004e50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004e54:	20000a3c 	.word	0x20000a3c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8004e58:	20000a3c 	.word	0x20000a3c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8004e5c:	20001c84 	.word	0x20001c84

08004e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004e60:	e7fe      	b.n	8004e60 <ADC1_2_IRQHandler>
	...

08004e64 <__errno>:
 8004e64:	4b01      	ldr	r3, [pc, #4]	; (8004e6c <__errno+0x8>)
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000628 	.word	0x20000628

08004e70 <__libc_init_array>:
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	4e0f      	ldr	r6, [pc, #60]	; (8004eb0 <__libc_init_array+0x40>)
 8004e74:	4d0f      	ldr	r5, [pc, #60]	; (8004eb4 <__libc_init_array+0x44>)
 8004e76:	1b76      	subs	r6, r6, r5
 8004e78:	10b6      	asrs	r6, r6, #2
 8004e7a:	bf18      	it	ne
 8004e7c:	2400      	movne	r4, #0
 8004e7e:	d005      	beq.n	8004e8c <__libc_init_array+0x1c>
 8004e80:	3401      	adds	r4, #1
 8004e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e86:	4798      	blx	r3
 8004e88:	42a6      	cmp	r6, r4
 8004e8a:	d1f9      	bne.n	8004e80 <__libc_init_array+0x10>
 8004e8c:	4e0a      	ldr	r6, [pc, #40]	; (8004eb8 <__libc_init_array+0x48>)
 8004e8e:	4d0b      	ldr	r5, [pc, #44]	; (8004ebc <__libc_init_array+0x4c>)
 8004e90:	1b76      	subs	r6, r6, r5
 8004e92:	f001 fe5f 	bl	8006b54 <_init>
 8004e96:	10b6      	asrs	r6, r6, #2
 8004e98:	bf18      	it	ne
 8004e9a:	2400      	movne	r4, #0
 8004e9c:	d006      	beq.n	8004eac <__libc_init_array+0x3c>
 8004e9e:	3401      	adds	r4, #1
 8004ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea4:	4798      	blx	r3
 8004ea6:	42a6      	cmp	r6, r4
 8004ea8:	d1f9      	bne.n	8004e9e <__libc_init_array+0x2e>
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
 8004eac:	bd70      	pop	{r4, r5, r6, pc}
 8004eae:	bf00      	nop
 8004eb0:	08017244 	.word	0x08017244
 8004eb4:	08017244 	.word	0x08017244
 8004eb8:	0801724c 	.word	0x0801724c
 8004ebc:	08017244 	.word	0x08017244

08004ec0 <memset>:
 8004ec0:	b470      	push	{r4, r5, r6}
 8004ec2:	0784      	lsls	r4, r0, #30
 8004ec4:	d046      	beq.n	8004f54 <memset+0x94>
 8004ec6:	1e54      	subs	r4, r2, #1
 8004ec8:	2a00      	cmp	r2, #0
 8004eca:	d041      	beq.n	8004f50 <memset+0x90>
 8004ecc:	b2cd      	uxtb	r5, r1
 8004ece:	4603      	mov	r3, r0
 8004ed0:	e002      	b.n	8004ed8 <memset+0x18>
 8004ed2:	1e62      	subs	r2, r4, #1
 8004ed4:	b3e4      	cbz	r4, 8004f50 <memset+0x90>
 8004ed6:	4614      	mov	r4, r2
 8004ed8:	f803 5b01 	strb.w	r5, [r3], #1
 8004edc:	079a      	lsls	r2, r3, #30
 8004ede:	d1f8      	bne.n	8004ed2 <memset+0x12>
 8004ee0:	2c03      	cmp	r4, #3
 8004ee2:	d92e      	bls.n	8004f42 <memset+0x82>
 8004ee4:	b2cd      	uxtb	r5, r1
 8004ee6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004eea:	2c0f      	cmp	r4, #15
 8004eec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004ef0:	d919      	bls.n	8004f26 <memset+0x66>
 8004ef2:	f103 0210 	add.w	r2, r3, #16
 8004ef6:	4626      	mov	r6, r4
 8004ef8:	3e10      	subs	r6, #16
 8004efa:	2e0f      	cmp	r6, #15
 8004efc:	f842 5c10 	str.w	r5, [r2, #-16]
 8004f00:	f842 5c0c 	str.w	r5, [r2, #-12]
 8004f04:	f842 5c08 	str.w	r5, [r2, #-8]
 8004f08:	f842 5c04 	str.w	r5, [r2, #-4]
 8004f0c:	f102 0210 	add.w	r2, r2, #16
 8004f10:	d8f2      	bhi.n	8004ef8 <memset+0x38>
 8004f12:	f1a4 0210 	sub.w	r2, r4, #16
 8004f16:	f022 020f 	bic.w	r2, r2, #15
 8004f1a:	f004 040f 	and.w	r4, r4, #15
 8004f1e:	3210      	adds	r2, #16
 8004f20:	2c03      	cmp	r4, #3
 8004f22:	4413      	add	r3, r2
 8004f24:	d90d      	bls.n	8004f42 <memset+0x82>
 8004f26:	461e      	mov	r6, r3
 8004f28:	4622      	mov	r2, r4
 8004f2a:	3a04      	subs	r2, #4
 8004f2c:	2a03      	cmp	r2, #3
 8004f2e:	f846 5b04 	str.w	r5, [r6], #4
 8004f32:	d8fa      	bhi.n	8004f2a <memset+0x6a>
 8004f34:	1f22      	subs	r2, r4, #4
 8004f36:	f022 0203 	bic.w	r2, r2, #3
 8004f3a:	3204      	adds	r2, #4
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f004 0403 	and.w	r4, r4, #3
 8004f42:	b12c      	cbz	r4, 8004f50 <memset+0x90>
 8004f44:	b2c9      	uxtb	r1, r1
 8004f46:	441c      	add	r4, r3
 8004f48:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	d1fb      	bne.n	8004f48 <memset+0x88>
 8004f50:	bc70      	pop	{r4, r5, r6}
 8004f52:	4770      	bx	lr
 8004f54:	4614      	mov	r4, r2
 8004f56:	4603      	mov	r3, r0
 8004f58:	e7c2      	b.n	8004ee0 <memset+0x20>
 8004f5a:	bf00      	nop

08004f5c <putchar>:
 8004f5c:	4b03      	ldr	r3, [pc, #12]	; (8004f6c <putchar+0x10>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4601      	mov	r1, r0
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 b9d7 	b.w	8006318 <_putc_r>
 8004f6a:	bf00      	nop
 8004f6c:	20000628 	.word	0x20000628

08004f70 <_puts_r>:
 8004f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f72:	4605      	mov	r5, r0
 8004f74:	b089      	sub	sp, #36	; 0x24
 8004f76:	4608      	mov	r0, r1
 8004f78:	460c      	mov	r4, r1
 8004f7a:	f000 f92f 	bl	80051dc <strlen>
 8004f7e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004f80:	4f13      	ldr	r7, [pc, #76]	; (8004fd0 <_puts_r+0x60>)
 8004f82:	9404      	str	r4, [sp, #16]
 8004f84:	2601      	movs	r6, #1
 8004f86:	1c44      	adds	r4, r0, #1
 8004f88:	a904      	add	r1, sp, #16
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	9403      	str	r4, [sp, #12]
 8004f8e:	9005      	str	r0, [sp, #20]
 8004f90:	68ac      	ldr	r4, [r5, #8]
 8004f92:	9706      	str	r7, [sp, #24]
 8004f94:	9607      	str	r6, [sp, #28]
 8004f96:	9101      	str	r1, [sp, #4]
 8004f98:	9202      	str	r2, [sp, #8]
 8004f9a:	b1ab      	cbz	r3, 8004fc8 <_puts_r+0x58>
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	049a      	lsls	r2, r3, #18
 8004fa0:	d406      	bmi.n	8004fb0 <_puts_r+0x40>
 8004fa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fac:	81a3      	strh	r3, [r4, #12]
 8004fae:	6662      	str	r2, [r4, #100]	; 0x64
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	aa01      	add	r2, sp, #4
 8004fb6:	f000 fcad 	bl	8005914 <__sfvwrite_r>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	bf14      	ite	ne
 8004fbe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8004fc2:	200a      	moveq	r0, #10
 8004fc4:	b009      	add	sp, #36	; 0x24
 8004fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f000 fb5d 	bl	8005688 <__sinit>
 8004fce:	e7e5      	b.n	8004f9c <_puts_r+0x2c>
 8004fd0:	08017240 	.word	0x08017240

08004fd4 <puts>:
 8004fd4:	4b02      	ldr	r3, [pc, #8]	; (8004fe0 <puts+0xc>)
 8004fd6:	4601      	mov	r1, r0
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	f7ff bfc9 	b.w	8004f70 <_puts_r>
 8004fde:	bf00      	nop
 8004fe0:	20000628 	.word	0x20000628

08004fe4 <setvbuf>:
 8004fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe8:	4c3a      	ldr	r4, [pc, #232]	; (80050d4 <setvbuf+0xf0>)
 8004fea:	6826      	ldr	r6, [r4, #0]
 8004fec:	460d      	mov	r5, r1
 8004fee:	4604      	mov	r4, r0
 8004ff0:	4690      	mov	r8, r2
 8004ff2:	461f      	mov	r7, r3
 8004ff4:	b116      	cbz	r6, 8004ffc <setvbuf+0x18>
 8004ff6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d03c      	beq.n	8005076 <setvbuf+0x92>
 8004ffc:	f1b8 0f02 	cmp.w	r8, #2
 8005000:	d82f      	bhi.n	8005062 <setvbuf+0x7e>
 8005002:	2f00      	cmp	r7, #0
 8005004:	db2d      	blt.n	8005062 <setvbuf+0x7e>
 8005006:	4621      	mov	r1, r4
 8005008:	4630      	mov	r0, r6
 800500a:	f000 faa9 	bl	8005560 <_fflush_r>
 800500e:	89a1      	ldrh	r1, [r4, #12]
 8005010:	2300      	movs	r3, #0
 8005012:	6063      	str	r3, [r4, #4]
 8005014:	61a3      	str	r3, [r4, #24]
 8005016:	060b      	lsls	r3, r1, #24
 8005018:	d427      	bmi.n	800506a <setvbuf+0x86>
 800501a:	f021 0183 	bic.w	r1, r1, #131	; 0x83
 800501e:	b289      	uxth	r1, r1
 8005020:	f1b8 0f02 	cmp.w	r8, #2
 8005024:	81a1      	strh	r1, [r4, #12]
 8005026:	d02a      	beq.n	800507e <setvbuf+0x9a>
 8005028:	2d00      	cmp	r5, #0
 800502a:	d036      	beq.n	800509a <setvbuf+0xb6>
 800502c:	f1b8 0f01 	cmp.w	r8, #1
 8005030:	d011      	beq.n	8005056 <setvbuf+0x72>
 8005032:	b289      	uxth	r1, r1
 8005034:	f001 0008 	and.w	r0, r1, #8
 8005038:	4b27      	ldr	r3, [pc, #156]	; (80050d8 <setvbuf+0xf4>)
 800503a:	63f3      	str	r3, [r6, #60]	; 0x3c
 800503c:	b280      	uxth	r0, r0
 800503e:	6025      	str	r5, [r4, #0]
 8005040:	6125      	str	r5, [r4, #16]
 8005042:	6167      	str	r7, [r4, #20]
 8005044:	b178      	cbz	r0, 8005066 <setvbuf+0x82>
 8005046:	f011 0f03 	tst.w	r1, #3
 800504a:	bf18      	it	ne
 800504c:	2700      	movne	r7, #0
 800504e:	60a7      	str	r7, [r4, #8]
 8005050:	2000      	movs	r0, #0
 8005052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005056:	f041 0101 	orr.w	r1, r1, #1
 800505a:	427b      	negs	r3, r7
 800505c:	81a1      	strh	r1, [r4, #12]
 800505e:	61a3      	str	r3, [r4, #24]
 8005060:	e7e7      	b.n	8005032 <setvbuf+0x4e>
 8005062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800506a:	6921      	ldr	r1, [r4, #16]
 800506c:	4630      	mov	r0, r6
 800506e:	f000 fb79 	bl	8005764 <_free_r>
 8005072:	89a1      	ldrh	r1, [r4, #12]
 8005074:	e7d1      	b.n	800501a <setvbuf+0x36>
 8005076:	4630      	mov	r0, r6
 8005078:	f000 fb06 	bl	8005688 <__sinit>
 800507c:	e7be      	b.n	8004ffc <setvbuf+0x18>
 800507e:	2000      	movs	r0, #0
 8005080:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8005084:	f041 0102 	orr.w	r1, r1, #2
 8005088:	2500      	movs	r5, #0
 800508a:	2201      	movs	r2, #1
 800508c:	81a1      	strh	r1, [r4, #12]
 800508e:	60a5      	str	r5, [r4, #8]
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	6123      	str	r3, [r4, #16]
 8005094:	6162      	str	r2, [r4, #20]
 8005096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800509a:	2f00      	cmp	r7, #0
 800509c:	bf08      	it	eq
 800509e:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 80050a2:	4638      	mov	r0, r7
 80050a4:	f000 fdec 	bl	8005c80 <malloc>
 80050a8:	4605      	mov	r5, r0
 80050aa:	b128      	cbz	r0, 80050b8 <setvbuf+0xd4>
 80050ac:	89a1      	ldrh	r1, [r4, #12]
 80050ae:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80050b2:	b289      	uxth	r1, r1
 80050b4:	81a1      	strh	r1, [r4, #12]
 80050b6:	e7b9      	b.n	800502c <setvbuf+0x48>
 80050b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80050bc:	f000 fde0 	bl	8005c80 <malloc>
 80050c0:	4605      	mov	r5, r0
 80050c2:	b918      	cbnz	r0, 80050cc <setvbuf+0xe8>
 80050c4:	89a1      	ldrh	r1, [r4, #12]
 80050c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050ca:	e7d9      	b.n	8005080 <setvbuf+0x9c>
 80050cc:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80050d0:	e7ec      	b.n	80050ac <setvbuf+0xc8>
 80050d2:	bf00      	nop
 80050d4:	20000628 	.word	0x20000628
 80050d8:	0800558d 	.word	0x0800558d

080050dc <strcasecmp>:
 80050dc:	4b0f      	ldr	r3, [pc, #60]	; (800511c <strcasecmp+0x40>)
 80050de:	b430      	push	{r4, r5}
 80050e0:	681d      	ldr	r5, [r3, #0]
 80050e2:	e002      	b.n	80050ea <strcasecmp+0xe>
 80050e4:	1ad2      	subs	r2, r2, r3
 80050e6:	d116      	bne.n	8005116 <strcasecmp+0x3a>
 80050e8:	b1ab      	cbz	r3, 8005116 <strcasecmp+0x3a>
 80050ea:	f810 4b01 	ldrb.w	r4, [r0], #1
 80050ee:	192b      	adds	r3, r5, r4
 80050f0:	4622      	mov	r2, r4
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050fe:	bf08      	it	eq
 8005100:	f104 0220 	addeq.w	r2, r4, #32
 8005104:	18ec      	adds	r4, r5, r3
 8005106:	7864      	ldrb	r4, [r4, #1]
 8005108:	f004 0403 	and.w	r4, r4, #3
 800510c:	2c01      	cmp	r4, #1
 800510e:	d1e9      	bne.n	80050e4 <strcasecmp+0x8>
 8005110:	3320      	adds	r3, #32
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	d0e9      	beq.n	80050ea <strcasecmp+0xe>
 8005116:	4610      	mov	r0, r2
 8005118:	bc30      	pop	{r4, r5}
 800511a:	4770      	bx	lr
 800511c:	200001fc 	.word	0x200001fc

08005120 <strcpy>:
 8005120:	ea80 0201 	eor.w	r2, r0, r1
 8005124:	4684      	mov	ip, r0
 8005126:	f012 0f03 	tst.w	r2, #3
 800512a:	d14f      	bne.n	80051cc <strcpy+0xac>
 800512c:	f011 0f03 	tst.w	r1, #3
 8005130:	d132      	bne.n	8005198 <strcpy+0x78>
 8005132:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8005136:	f011 0f04 	tst.w	r1, #4
 800513a:	f851 3b04 	ldr.w	r3, [r1], #4
 800513e:	d00b      	beq.n	8005158 <strcpy+0x38>
 8005140:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8005144:	439a      	bics	r2, r3
 8005146:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800514a:	bf04      	itt	eq
 800514c:	f84c 3b04 	streq.w	r3, [ip], #4
 8005150:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005154:	d116      	bne.n	8005184 <strcpy+0x64>
 8005156:	bf00      	nop
 8005158:	f851 4b04 	ldr.w	r4, [r1], #4
 800515c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8005160:	439a      	bics	r2, r3
 8005162:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005166:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800516a:	d10b      	bne.n	8005184 <strcpy+0x64>
 800516c:	f84c 3b04 	str.w	r3, [ip], #4
 8005170:	43a2      	bics	r2, r4
 8005172:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005176:	bf04      	itt	eq
 8005178:	f851 3b04 	ldreq.w	r3, [r1], #4
 800517c:	f84c 4b04 	streq.w	r4, [ip], #4
 8005180:	d0ea      	beq.n	8005158 <strcpy+0x38>
 8005182:	4623      	mov	r3, r4
 8005184:	f80c 3b01 	strb.w	r3, [ip], #1
 8005188:	f013 0fff 	tst.w	r3, #255	; 0xff
 800518c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8005190:	d1f8      	bne.n	8005184 <strcpy+0x64>
 8005192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	f011 0f01 	tst.w	r1, #1
 800519c:	d006      	beq.n	80051ac <strcpy+0x8c>
 800519e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051a2:	f80c 2b01 	strb.w	r2, [ip], #1
 80051a6:	2a00      	cmp	r2, #0
 80051a8:	bf08      	it	eq
 80051aa:	4770      	bxeq	lr
 80051ac:	f011 0f02 	tst.w	r1, #2
 80051b0:	d0bf      	beq.n	8005132 <strcpy+0x12>
 80051b2:	f831 2b02 	ldrh.w	r2, [r1], #2
 80051b6:	f012 0fff 	tst.w	r2, #255	; 0xff
 80051ba:	bf16      	itet	ne
 80051bc:	f82c 2b02 	strhne.w	r2, [ip], #2
 80051c0:	f88c 2000 	strbeq.w	r2, [ip]
 80051c4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 80051c8:	d1b3      	bne.n	8005132 <strcpy+0x12>
 80051ca:	4770      	bx	lr
 80051cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051d0:	f80c 2b01 	strb.w	r2, [ip], #1
 80051d4:	2a00      	cmp	r2, #0
 80051d6:	d1f9      	bne.n	80051cc <strcpy+0xac>
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop

080051dc <strlen>:
 80051dc:	f020 0103 	bic.w	r1, r0, #3
 80051e0:	f010 0003 	ands.w	r0, r0, #3
 80051e4:	f1c0 0000 	rsb	r0, r0, #0
 80051e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80051ec:	f100 0c04 	add.w	ip, r0, #4
 80051f0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80051f4:	f06f 0200 	mvn.w	r2, #0
 80051f8:	bf1c      	itt	ne
 80051fa:	fa22 f20c 	lsrne.w	r2, r2, ip
 80051fe:	4313      	orrne	r3, r2
 8005200:	f04f 0c01 	mov.w	ip, #1
 8005204:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8005208:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800520c:	eba3 020c 	sub.w	r2, r3, ip
 8005210:	ea22 0203 	bic.w	r2, r2, r3
 8005214:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8005218:	bf04      	itt	eq
 800521a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800521e:	3004      	addeq	r0, #4
 8005220:	d0f4      	beq.n	800520c <strlen+0x30>
 8005222:	f1c2 0100 	rsb	r1, r2, #0
 8005226:	ea02 0201 	and.w	r2, r2, r1
 800522a:	fab2 f282 	clz	r2, r2
 800522e:	f1c2 021f 	rsb	r2, r2, #31
 8005232:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8005236:	4770      	bx	lr

08005238 <strtok>:
 8005238:	4b02      	ldr	r3, [pc, #8]	; (8005244 <strtok+0xc>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	2301      	movs	r3, #1
 800523e:	325c      	adds	r2, #92	; 0x5c
 8005240:	f000 b802 	b.w	8005248 <__strtok_r>
 8005244:	20000628 	.word	0x20000628

08005248 <__strtok_r>:
 8005248:	b4f0      	push	{r4, r5, r6, r7}
 800524a:	b320      	cbz	r0, 8005296 <__strtok_r+0x4e>
 800524c:	4607      	mov	r7, r0
 800524e:	460d      	mov	r5, r1
 8005250:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005254:	e001      	b.n	800525a <__strtok_r+0x12>
 8005256:	42a6      	cmp	r6, r4
 8005258:	d016      	beq.n	8005288 <__strtok_r+0x40>
 800525a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800525e:	2c00      	cmp	r4, #0
 8005260:	d1f9      	bne.n	8005256 <__strtok_r+0xe>
 8005262:	b1ee      	cbz	r6, 80052a0 <__strtok_r+0x58>
 8005264:	463e      	mov	r6, r7
 8005266:	460c      	mov	r4, r1
 8005268:	f816 5b01 	ldrb.w	r5, [r6], #1
 800526c:	e000      	b.n	8005270 <__strtok_r+0x28>
 800526e:	b173      	cbz	r3, 800528e <__strtok_r+0x46>
 8005270:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005274:	42ab      	cmp	r3, r5
 8005276:	d1fa      	bne.n	800526e <__strtok_r+0x26>
 8005278:	b15d      	cbz	r5, 8005292 <__strtok_r+0x4a>
 800527a:	2300      	movs	r3, #0
 800527c:	703b      	strb	r3, [r7, #0]
 800527e:	6016      	str	r6, [r2, #0]
 8005280:	4606      	mov	r6, r0
 8005282:	4630      	mov	r0, r6
 8005284:	bcf0      	pop	{r4, r5, r6, r7}
 8005286:	4770      	bx	lr
 8005288:	b163      	cbz	r3, 80052a4 <__strtok_r+0x5c>
 800528a:	4638      	mov	r0, r7
 800528c:	e7de      	b.n	800524c <__strtok_r+0x4>
 800528e:	4637      	mov	r7, r6
 8005290:	e7e8      	b.n	8005264 <__strtok_r+0x1c>
 8005292:	462e      	mov	r6, r5
 8005294:	e7f3      	b.n	800527e <__strtok_r+0x36>
 8005296:	6810      	ldr	r0, [r2, #0]
 8005298:	2800      	cmp	r0, #0
 800529a:	d1d7      	bne.n	800524c <__strtok_r+0x4>
 800529c:	4606      	mov	r6, r0
 800529e:	e7f0      	b.n	8005282 <__strtok_r+0x3a>
 80052a0:	6016      	str	r6, [r2, #0]
 80052a2:	e7ee      	b.n	8005282 <__strtok_r+0x3a>
 80052a4:	6017      	str	r7, [r2, #0]
 80052a6:	4606      	mov	r6, r0
 80052a8:	7003      	strb	r3, [r0, #0]
 80052aa:	e7ea      	b.n	8005282 <__strtok_r+0x3a>

080052ac <_strtoul_r>:
 80052ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b0:	4c46      	ldr	r4, [pc, #280]	; (80053cc <_strtoul_r+0x120>)
 80052b2:	460f      	mov	r7, r1
 80052b4:	f8d4 e000 	ldr.w	lr, [r4]
 80052b8:	e000      	b.n	80052bc <_strtoul_r+0x10>
 80052ba:	4627      	mov	r7, r4
 80052bc:	463c      	mov	r4, r7
 80052be:	f814 5b01 	ldrb.w	r5, [r4], #1
 80052c2:	eb0e 0605 	add.w	r6, lr, r5
 80052c6:	7876      	ldrb	r6, [r6, #1]
 80052c8:	f006 0608 	and.w	r6, r6, #8
 80052cc:	f006 08ff 	and.w	r8, r6, #255	; 0xff
 80052d0:	2e00      	cmp	r6, #0
 80052d2:	d1f2      	bne.n	80052ba <_strtoul_r+0xe>
 80052d4:	2d2d      	cmp	r5, #45	; 0x2d
 80052d6:	d051      	beq.n	800537c <_strtoul_r+0xd0>
 80052d8:	2d2b      	cmp	r5, #43	; 0x2b
 80052da:	bf04      	itt	eq
 80052dc:	787d      	ldrbeq	r5, [r7, #1]
 80052de:	1cbc      	addeq	r4, r7, #2
 80052e0:	b15b      	cbz	r3, 80052fa <_strtoul_r+0x4e>
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d05b      	beq.n	800539e <_strtoul_r+0xf2>
 80052e6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80052ea:	fbb9 f9f3 	udiv	r9, r9, r3
 80052ee:	fb03 fb09 	mul.w	fp, r3, r9
 80052f2:	ea6f 0b0b 	mvn.w	fp, fp
 80052f6:	469a      	mov	sl, r3
 80052f8:	e007      	b.n	800530a <_strtoul_r+0x5e>
 80052fa:	2d30      	cmp	r5, #48	; 0x30
 80052fc:	d043      	beq.n	8005386 <_strtoul_r+0xda>
 80052fe:	230a      	movs	r3, #10
 8005300:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80053d0 <_strtoul_r+0x124>
 8005304:	469a      	mov	sl, r3
 8005306:	f04f 0b05 	mov.w	fp, #5
 800530a:	2700      	movs	r7, #0
 800530c:	46bc      	mov	ip, r7
 800530e:	e00c      	b.n	800532a <_strtoul_r+0x7e>
 8005310:	3d30      	subs	r5, #48	; 0x30
 8005312:	42ab      	cmp	r3, r5
 8005314:	dd19      	ble.n	800534a <_strtoul_r+0x9e>
 8005316:	1c7e      	adds	r6, r7, #1
 8005318:	d005      	beq.n	8005326 <_strtoul_r+0x7a>
 800531a:	45cc      	cmp	ip, r9
 800531c:	d824      	bhi.n	8005368 <_strtoul_r+0xbc>
 800531e:	d021      	beq.n	8005364 <_strtoul_r+0xb8>
 8005320:	fb0a 5c0c 	mla	ip, sl, ip, r5
 8005324:	2701      	movs	r7, #1
 8005326:	f814 5b01 	ldrb.w	r5, [r4], #1
 800532a:	eb0e 0605 	add.w	r6, lr, r5
 800532e:	7876      	ldrb	r6, [r6, #1]
 8005330:	f016 0f04 	tst.w	r6, #4
 8005334:	d1ec      	bne.n	8005310 <_strtoul_r+0x64>
 8005336:	f016 0603 	ands.w	r6, r6, #3
 800533a:	d006      	beq.n	800534a <_strtoul_r+0x9e>
 800533c:	2e01      	cmp	r6, #1
 800533e:	bf0c      	ite	eq
 8005340:	2637      	moveq	r6, #55	; 0x37
 8005342:	2657      	movne	r6, #87	; 0x57
 8005344:	1bad      	subs	r5, r5, r6
 8005346:	42ab      	cmp	r3, r5
 8005348:	dce5      	bgt.n	8005316 <_strtoul_r+0x6a>
 800534a:	2f00      	cmp	r7, #0
 800534c:	db11      	blt.n	8005372 <_strtoul_r+0xc6>
 800534e:	f1c8 0000 	rsb	r0, r8, #0
 8005352:	ea8c 0000 	eor.w	r0, ip, r0
 8005356:	4440      	add	r0, r8
 8005358:	b14a      	cbz	r2, 800536e <_strtoul_r+0xc2>
 800535a:	b107      	cbz	r7, 800535e <_strtoul_r+0xb2>
 800535c:	1e61      	subs	r1, r4, #1
 800535e:	6011      	str	r1, [r2, #0]
 8005360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005364:	455d      	cmp	r5, fp
 8005366:	dddb      	ble.n	8005320 <_strtoul_r+0x74>
 8005368:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800536c:	e7db      	b.n	8005326 <_strtoul_r+0x7a>
 800536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005372:	2322      	movs	r3, #34	; 0x22
 8005374:	6003      	str	r3, [r0, #0]
 8005376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800537a:	e7ed      	b.n	8005358 <_strtoul_r+0xac>
 800537c:	1cbc      	adds	r4, r7, #2
 800537e:	787d      	ldrb	r5, [r7, #1]
 8005380:	f04f 0801 	mov.w	r8, #1
 8005384:	e7ac      	b.n	80052e0 <_strtoul_r+0x34>
 8005386:	7823      	ldrb	r3, [r4, #0]
 8005388:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800538c:	2b58      	cmp	r3, #88	; 0x58
 800538e:	d013      	beq.n	80053b8 <_strtoul_r+0x10c>
 8005390:	2308      	movs	r3, #8
 8005392:	469a      	mov	sl, r3
 8005394:	f04f 0b07 	mov.w	fp, #7
 8005398:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 800539c:	e7b5      	b.n	800530a <_strtoul_r+0x5e>
 800539e:	2d30      	cmp	r5, #48	; 0x30
 80053a0:	d005      	beq.n	80053ae <_strtoul_r+0x102>
 80053a2:	f04f 0b0f 	mov.w	fp, #15
 80053a6:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 80053aa:	469a      	mov	sl, r3
 80053ac:	e7ad      	b.n	800530a <_strtoul_r+0x5e>
 80053ae:	7826      	ldrb	r6, [r4, #0]
 80053b0:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 80053b4:	2e58      	cmp	r6, #88	; 0x58
 80053b6:	d1f4      	bne.n	80053a2 <_strtoul_r+0xf6>
 80053b8:	f04f 0a10 	mov.w	sl, #16
 80053bc:	7865      	ldrb	r5, [r4, #1]
 80053be:	4653      	mov	r3, sl
 80053c0:	f04f 0b0f 	mov.w	fp, #15
 80053c4:	3402      	adds	r4, #2
 80053c6:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 80053ca:	e79e      	b.n	800530a <_strtoul_r+0x5e>
 80053cc:	200001fc 	.word	0x200001fc
 80053d0:	19999999 	.word	0x19999999

080053d4 <strtoul>:
 80053d4:	b430      	push	{r4, r5}
 80053d6:	4c04      	ldr	r4, [pc, #16]	; (80053e8 <strtoul+0x14>)
 80053d8:	460d      	mov	r5, r1
 80053da:	4613      	mov	r3, r2
 80053dc:	4601      	mov	r1, r0
 80053de:	462a      	mov	r2, r5
 80053e0:	6820      	ldr	r0, [r4, #0]
 80053e2:	bc30      	pop	{r4, r5}
 80053e4:	f7ff bf62 	b.w	80052ac <_strtoul_r>
 80053e8:	20000628 	.word	0x20000628

080053ec <register_fini>:
 80053ec:	4b02      	ldr	r3, [pc, #8]	; (80053f8 <register_fini+0xc>)
 80053ee:	b113      	cbz	r3, 80053f6 <register_fini+0xa>
 80053f0:	4802      	ldr	r0, [pc, #8]	; (80053fc <register_fini+0x10>)
 80053f2:	f000 b805 	b.w	8005400 <atexit>
 80053f6:	4770      	bx	lr
 80053f8:	00000000 	.word	0x00000000
 80053fc:	0800569d 	.word	0x0800569d

08005400 <atexit>:
 8005400:	4601      	mov	r1, r0
 8005402:	2000      	movs	r0, #0
 8005404:	4602      	mov	r2, r0
 8005406:	4603      	mov	r3, r0
 8005408:	f001 baa0 	b.w	800694c <__register_exitproc>

0800540c <__sflush_r>:
 800540c:	898b      	ldrh	r3, [r1, #12]
 800540e:	b29a      	uxth	r2, r3
 8005410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005414:	460d      	mov	r5, r1
 8005416:	0711      	lsls	r1, r2, #28
 8005418:	4680      	mov	r8, r0
 800541a:	d43c      	bmi.n	8005496 <__sflush_r+0x8a>
 800541c:	686a      	ldr	r2, [r5, #4]
 800541e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005422:	2a00      	cmp	r2, #0
 8005424:	81ab      	strh	r3, [r5, #12]
 8005426:	dd65      	ble.n	80054f4 <__sflush_r+0xe8>
 8005428:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800542a:	2e00      	cmp	r6, #0
 800542c:	d04b      	beq.n	80054c6 <__sflush_r+0xba>
 800542e:	b29b      	uxth	r3, r3
 8005430:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005434:	2100      	movs	r1, #0
 8005436:	b292      	uxth	r2, r2
 8005438:	f8d8 4000 	ldr.w	r4, [r8]
 800543c:	f8c8 1000 	str.w	r1, [r8]
 8005440:	2a00      	cmp	r2, #0
 8005442:	d05b      	beq.n	80054fc <__sflush_r+0xf0>
 8005444:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8005446:	075f      	lsls	r7, r3, #29
 8005448:	d505      	bpl.n	8005456 <__sflush_r+0x4a>
 800544a:	6869      	ldr	r1, [r5, #4]
 800544c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800544e:	1a52      	subs	r2, r2, r1
 8005450:	b10b      	cbz	r3, 8005456 <__sflush_r+0x4a>
 8005452:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005454:	1ad2      	subs	r2, r2, r3
 8005456:	4640      	mov	r0, r8
 8005458:	69e9      	ldr	r1, [r5, #28]
 800545a:	2300      	movs	r3, #0
 800545c:	47b0      	blx	r6
 800545e:	1c46      	adds	r6, r0, #1
 8005460:	d056      	beq.n	8005510 <__sflush_r+0x104>
 8005462:	89ab      	ldrh	r3, [r5, #12]
 8005464:	692a      	ldr	r2, [r5, #16]
 8005466:	602a      	str	r2, [r5, #0]
 8005468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800546c:	b29b      	uxth	r3, r3
 800546e:	2200      	movs	r2, #0
 8005470:	606a      	str	r2, [r5, #4]
 8005472:	04da      	lsls	r2, r3, #19
 8005474:	81ab      	strh	r3, [r5, #12]
 8005476:	d43b      	bmi.n	80054f0 <__sflush_r+0xe4>
 8005478:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800547a:	f8c8 4000 	str.w	r4, [r8]
 800547e:	b311      	cbz	r1, 80054c6 <__sflush_r+0xba>
 8005480:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005484:	4299      	cmp	r1, r3
 8005486:	d002      	beq.n	800548e <__sflush_r+0x82>
 8005488:	4640      	mov	r0, r8
 800548a:	f000 f96b 	bl	8005764 <_free_r>
 800548e:	2000      	movs	r0, #0
 8005490:	6328      	str	r0, [r5, #48]	; 0x30
 8005492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005496:	692e      	ldr	r6, [r5, #16]
 8005498:	b1ae      	cbz	r6, 80054c6 <__sflush_r+0xba>
 800549a:	682c      	ldr	r4, [r5, #0]
 800549c:	602e      	str	r6, [r5, #0]
 800549e:	0791      	lsls	r1, r2, #30
 80054a0:	bf0c      	ite	eq
 80054a2:	696b      	ldreq	r3, [r5, #20]
 80054a4:	2300      	movne	r3, #0
 80054a6:	1ba4      	subs	r4, r4, r6
 80054a8:	60ab      	str	r3, [r5, #8]
 80054aa:	e00a      	b.n	80054c2 <__sflush_r+0xb6>
 80054ac:	4632      	mov	r2, r6
 80054ae:	4623      	mov	r3, r4
 80054b0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80054b2:	69e9      	ldr	r1, [r5, #28]
 80054b4:	4640      	mov	r0, r8
 80054b6:	47b8      	blx	r7
 80054b8:	2800      	cmp	r0, #0
 80054ba:	eba4 0400 	sub.w	r4, r4, r0
 80054be:	4406      	add	r6, r0
 80054c0:	dd04      	ble.n	80054cc <__sflush_r+0xc0>
 80054c2:	2c00      	cmp	r4, #0
 80054c4:	dcf2      	bgt.n	80054ac <__sflush_r+0xa0>
 80054c6:	2000      	movs	r0, #0
 80054c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054cc:	89ab      	ldrh	r3, [r5, #12]
 80054ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d2:	81ab      	strh	r3, [r5, #12]
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054dc:	89ab      	ldrh	r3, [r5, #12]
 80054de:	692a      	ldr	r2, [r5, #16]
 80054e0:	6069      	str	r1, [r5, #4]
 80054e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	81ab      	strh	r3, [r5, #12]
 80054ea:	04db      	lsls	r3, r3, #19
 80054ec:	602a      	str	r2, [r5, #0]
 80054ee:	d5c3      	bpl.n	8005478 <__sflush_r+0x6c>
 80054f0:	6528      	str	r0, [r5, #80]	; 0x50
 80054f2:	e7c1      	b.n	8005478 <__sflush_r+0x6c>
 80054f4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	dc96      	bgt.n	8005428 <__sflush_r+0x1c>
 80054fa:	e7e4      	b.n	80054c6 <__sflush_r+0xba>
 80054fc:	2301      	movs	r3, #1
 80054fe:	4640      	mov	r0, r8
 8005500:	69e9      	ldr	r1, [r5, #28]
 8005502:	47b0      	blx	r6
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	4602      	mov	r2, r0
 8005508:	d019      	beq.n	800553e <__sflush_r+0x132>
 800550a:	89ab      	ldrh	r3, [r5, #12]
 800550c:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800550e:	e79a      	b.n	8005446 <__sflush_r+0x3a>
 8005510:	f8d8 1000 	ldr.w	r1, [r8]
 8005514:	2900      	cmp	r1, #0
 8005516:	d0e1      	beq.n	80054dc <__sflush_r+0xd0>
 8005518:	291d      	cmp	r1, #29
 800551a:	d007      	beq.n	800552c <__sflush_r+0x120>
 800551c:	2916      	cmp	r1, #22
 800551e:	d005      	beq.n	800552c <__sflush_r+0x120>
 8005520:	89ab      	ldrh	r3, [r5, #12]
 8005522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005526:	81ab      	strh	r3, [r5, #12]
 8005528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800552c:	89ab      	ldrh	r3, [r5, #12]
 800552e:	692a      	ldr	r2, [r5, #16]
 8005530:	602a      	str	r2, [r5, #0]
 8005532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005536:	2200      	movs	r2, #0
 8005538:	81ab      	strh	r3, [r5, #12]
 800553a:	606a      	str	r2, [r5, #4]
 800553c:	e79c      	b.n	8005478 <__sflush_r+0x6c>
 800553e:	f8d8 3000 	ldr.w	r3, [r8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0e1      	beq.n	800550a <__sflush_r+0xfe>
 8005546:	2b1d      	cmp	r3, #29
 8005548:	d007      	beq.n	800555a <__sflush_r+0x14e>
 800554a:	2b16      	cmp	r3, #22
 800554c:	d005      	beq.n	800555a <__sflush_r+0x14e>
 800554e:	89ab      	ldrh	r3, [r5, #12]
 8005550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005554:	81ab      	strh	r3, [r5, #12]
 8005556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800555a:	f8c8 4000 	str.w	r4, [r8]
 800555e:	e7b2      	b.n	80054c6 <__sflush_r+0xba>

08005560 <_fflush_r>:
 8005560:	b510      	push	{r4, lr}
 8005562:	4604      	mov	r4, r0
 8005564:	b082      	sub	sp, #8
 8005566:	b108      	cbz	r0, 800556c <_fflush_r+0xc>
 8005568:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800556a:	b153      	cbz	r3, 8005582 <_fflush_r+0x22>
 800556c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8005570:	b908      	cbnz	r0, 8005576 <_fflush_r+0x16>
 8005572:	b002      	add	sp, #8
 8005574:	bd10      	pop	{r4, pc}
 8005576:	4620      	mov	r0, r4
 8005578:	b002      	add	sp, #8
 800557a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800557e:	f7ff bf45 	b.w	800540c <__sflush_r>
 8005582:	9101      	str	r1, [sp, #4]
 8005584:	f000 f880 	bl	8005688 <__sinit>
 8005588:	9901      	ldr	r1, [sp, #4]
 800558a:	e7ef      	b.n	800556c <_fflush_r+0xc>

0800558c <_cleanup_r>:
 800558c:	4901      	ldr	r1, [pc, #4]	; (8005594 <_cleanup_r+0x8>)
 800558e:	f000 bb4d 	b.w	8005c2c <_fwalk_reent>
 8005592:	bf00      	nop
 8005594:	080069f1 	.word	0x080069f1

08005598 <__sinit.part.1>:
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	4b35      	ldr	r3, [pc, #212]	; (8005674 <__sinit.part.1+0xdc>)
 800559e:	6845      	ldr	r5, [r0, #4]
 80055a0:	63c3      	str	r3, [r0, #60]	; 0x3c
 80055a2:	2400      	movs	r4, #0
 80055a4:	4607      	mov	r7, r0
 80055a6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 80055aa:	2304      	movs	r3, #4
 80055ac:	2103      	movs	r1, #3
 80055ae:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 80055b2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 80055b6:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 80055ba:	b083      	sub	sp, #12
 80055bc:	602c      	str	r4, [r5, #0]
 80055be:	606c      	str	r4, [r5, #4]
 80055c0:	60ac      	str	r4, [r5, #8]
 80055c2:	666c      	str	r4, [r5, #100]	; 0x64
 80055c4:	81ec      	strh	r4, [r5, #14]
 80055c6:	612c      	str	r4, [r5, #16]
 80055c8:	616c      	str	r4, [r5, #20]
 80055ca:	61ac      	str	r4, [r5, #24]
 80055cc:	81ab      	strh	r3, [r5, #12]
 80055ce:	4621      	mov	r1, r4
 80055d0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80055d4:	2208      	movs	r2, #8
 80055d6:	f7ff fc73 	bl	8004ec0 <memset>
 80055da:	68be      	ldr	r6, [r7, #8]
 80055dc:	f8df b098 	ldr.w	fp, [pc, #152]	; 8005678 <__sinit.part.1+0xe0>
 80055e0:	f8df a098 	ldr.w	sl, [pc, #152]	; 800567c <__sinit.part.1+0xe4>
 80055e4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8005680 <__sinit.part.1+0xe8>
 80055e8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005684 <__sinit.part.1+0xec>
 80055ec:	f8c5 b020 	str.w	fp, [r5, #32]
 80055f0:	2301      	movs	r3, #1
 80055f2:	2209      	movs	r2, #9
 80055f4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80055f8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80055fc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8005600:	61ed      	str	r5, [r5, #28]
 8005602:	4621      	mov	r1, r4
 8005604:	81f3      	strh	r3, [r6, #14]
 8005606:	81b2      	strh	r2, [r6, #12]
 8005608:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800560c:	6034      	str	r4, [r6, #0]
 800560e:	6074      	str	r4, [r6, #4]
 8005610:	60b4      	str	r4, [r6, #8]
 8005612:	6674      	str	r4, [r6, #100]	; 0x64
 8005614:	6134      	str	r4, [r6, #16]
 8005616:	6174      	str	r4, [r6, #20]
 8005618:	61b4      	str	r4, [r6, #24]
 800561a:	2208      	movs	r2, #8
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	f7ff fc4f 	bl	8004ec0 <memset>
 8005622:	68fd      	ldr	r5, [r7, #12]
 8005624:	61f6      	str	r6, [r6, #28]
 8005626:	2012      	movs	r0, #18
 8005628:	2202      	movs	r2, #2
 800562a:	f8c6 b020 	str.w	fp, [r6, #32]
 800562e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8005632:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8005636:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800563a:	4621      	mov	r1, r4
 800563c:	81a8      	strh	r0, [r5, #12]
 800563e:	81ea      	strh	r2, [r5, #14]
 8005640:	602c      	str	r4, [r5, #0]
 8005642:	606c      	str	r4, [r5, #4]
 8005644:	60ac      	str	r4, [r5, #8]
 8005646:	666c      	str	r4, [r5, #100]	; 0x64
 8005648:	612c      	str	r4, [r5, #16]
 800564a:	616c      	str	r4, [r5, #20]
 800564c:	61ac      	str	r4, [r5, #24]
 800564e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8005652:	2208      	movs	r2, #8
 8005654:	f7ff fc34 	bl	8004ec0 <memset>
 8005658:	9b01      	ldr	r3, [sp, #4]
 800565a:	61ed      	str	r5, [r5, #28]
 800565c:	f8c5 b020 	str.w	fp, [r5, #32]
 8005660:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8005664:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8005668:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800566c:	63bb      	str	r3, [r7, #56]	; 0x38
 800566e:	b003      	add	sp, #12
 8005670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005674:	0800558d 	.word	0x0800558d
 8005678:	0800675d 	.word	0x0800675d
 800567c:	08006781 	.word	0x08006781
 8005680:	080067b9 	.word	0x080067b9
 8005684:	080067d9 	.word	0x080067d9

08005688 <__sinit>:
 8005688:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800568a:	b103      	cbz	r3, 800568e <__sinit+0x6>
 800568c:	4770      	bx	lr
 800568e:	f7ff bf83 	b.w	8005598 <__sinit.part.1>
 8005692:	bf00      	nop

08005694 <__sfp_lock_acquire>:
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop

08005698 <__sfp_lock_release>:
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop

0800569c <__libc_fini_array>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <__libc_fini_array+0x24>)
 80056a0:	4d08      	ldr	r5, [pc, #32]	; (80056c4 <__libc_fini_array+0x28>)
 80056a2:	1aed      	subs	r5, r5, r3
 80056a4:	10ac      	asrs	r4, r5, #2
 80056a6:	bf18      	it	ne
 80056a8:	18ed      	addne	r5, r5, r3
 80056aa:	d005      	beq.n	80056b8 <__libc_fini_array+0x1c>
 80056ac:	3c01      	subs	r4, #1
 80056ae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80056b2:	4798      	blx	r3
 80056b4:	2c00      	cmp	r4, #0
 80056b6:	d1f9      	bne.n	80056ac <__libc_fini_array+0x10>
 80056b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056bc:	f001 ba50 	b.w	8006b60 <_fini>
 80056c0:	0801724c 	.word	0x0801724c
 80056c4:	08017250 	.word	0x08017250

080056c8 <_malloc_trim_r>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	4f23      	ldr	r7, [pc, #140]	; (8005758 <_malloc_trim_r+0x90>)
 80056cc:	460c      	mov	r4, r1
 80056ce:	4606      	mov	r6, r0
 80056d0:	f000 fe1e 	bl	8006310 <__malloc_lock>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	685d      	ldr	r5, [r3, #4]
 80056d8:	f025 0503 	bic.w	r5, r5, #3
 80056dc:	1b29      	subs	r1, r5, r4
 80056de:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 80056e2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80056e6:	f021 010f 	bic.w	r1, r1, #15
 80056ea:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80056ee:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80056f2:	db07      	blt.n	8005704 <_malloc_trim_r+0x3c>
 80056f4:	4630      	mov	r0, r6
 80056f6:	2100      	movs	r1, #0
 80056f8:	f7fb f8da 	bl	80008b0 <_sbrk_r>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	442b      	add	r3, r5
 8005700:	4298      	cmp	r0, r3
 8005702:	d004      	beq.n	800570e <_malloc_trim_r+0x46>
 8005704:	4630      	mov	r0, r6
 8005706:	f000 fe05 	bl	8006314 <__malloc_unlock>
 800570a:	2000      	movs	r0, #0
 800570c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800570e:	4630      	mov	r0, r6
 8005710:	4261      	negs	r1, r4
 8005712:	f7fb f8cd 	bl	80008b0 <_sbrk_r>
 8005716:	3001      	adds	r0, #1
 8005718:	d00d      	beq.n	8005736 <_malloc_trim_r+0x6e>
 800571a:	4b10      	ldr	r3, [pc, #64]	; (800575c <_malloc_trim_r+0x94>)
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	6819      	ldr	r1, [r3, #0]
 8005720:	1b2d      	subs	r5, r5, r4
 8005722:	f045 0501 	orr.w	r5, r5, #1
 8005726:	4630      	mov	r0, r6
 8005728:	1b09      	subs	r1, r1, r4
 800572a:	6055      	str	r5, [r2, #4]
 800572c:	6019      	str	r1, [r3, #0]
 800572e:	f000 fdf1 	bl	8006314 <__malloc_unlock>
 8005732:	2001      	movs	r0, #1
 8005734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005736:	4630      	mov	r0, r6
 8005738:	2100      	movs	r1, #0
 800573a:	f7fb f8b9 	bl	80008b0 <_sbrk_r>
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	1a83      	subs	r3, r0, r2
 8005742:	2b0f      	cmp	r3, #15
 8005744:	ddde      	ble.n	8005704 <_malloc_trim_r+0x3c>
 8005746:	4c06      	ldr	r4, [pc, #24]	; (8005760 <_malloc_trim_r+0x98>)
 8005748:	4904      	ldr	r1, [pc, #16]	; (800575c <_malloc_trim_r+0x94>)
 800574a:	6824      	ldr	r4, [r4, #0]
 800574c:	f043 0301 	orr.w	r3, r3, #1
 8005750:	1b00      	subs	r0, r0, r4
 8005752:	6053      	str	r3, [r2, #4]
 8005754:	6008      	str	r0, [r1, #0]
 8005756:	e7d5      	b.n	8005704 <_malloc_trim_r+0x3c>
 8005758:	2000062c 	.word	0x2000062c
 800575c:	20000e70 	.word	0x20000e70
 8005760:	20000a38 	.word	0x20000a38

08005764 <_free_r>:
 8005764:	2900      	cmp	r1, #0
 8005766:	d04e      	beq.n	8005806 <_free_r+0xa2>
 8005768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800576c:	460c      	mov	r4, r1
 800576e:	4680      	mov	r8, r0
 8005770:	f000 fdce 	bl	8006310 <__malloc_lock>
 8005774:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8005778:	4962      	ldr	r1, [pc, #392]	; (8005904 <_free_r+0x1a0>)
 800577a:	f027 0201 	bic.w	r2, r7, #1
 800577e:	f1a4 0508 	sub.w	r5, r4, #8
 8005782:	18ab      	adds	r3, r5, r2
 8005784:	688e      	ldr	r6, [r1, #8]
 8005786:	6858      	ldr	r0, [r3, #4]
 8005788:	429e      	cmp	r6, r3
 800578a:	f020 0003 	bic.w	r0, r0, #3
 800578e:	d05a      	beq.n	8005846 <_free_r+0xe2>
 8005790:	07fe      	lsls	r6, r7, #31
 8005792:	6058      	str	r0, [r3, #4]
 8005794:	d40b      	bmi.n	80057ae <_free_r+0x4a>
 8005796:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800579a:	1bed      	subs	r5, r5, r7
 800579c:	f101 0e08 	add.w	lr, r1, #8
 80057a0:	68ac      	ldr	r4, [r5, #8]
 80057a2:	4574      	cmp	r4, lr
 80057a4:	443a      	add	r2, r7
 80057a6:	d067      	beq.n	8005878 <_free_r+0x114>
 80057a8:	68ef      	ldr	r7, [r5, #12]
 80057aa:	60e7      	str	r7, [r4, #12]
 80057ac:	60bc      	str	r4, [r7, #8]
 80057ae:	181c      	adds	r4, r3, r0
 80057b0:	6864      	ldr	r4, [r4, #4]
 80057b2:	07e4      	lsls	r4, r4, #31
 80057b4:	d40c      	bmi.n	80057d0 <_free_r+0x6c>
 80057b6:	4f54      	ldr	r7, [pc, #336]	; (8005908 <_free_r+0x1a4>)
 80057b8:	689c      	ldr	r4, [r3, #8]
 80057ba:	42bc      	cmp	r4, r7
 80057bc:	4402      	add	r2, r0
 80057be:	d07c      	beq.n	80058ba <_free_r+0x156>
 80057c0:	68d8      	ldr	r0, [r3, #12]
 80057c2:	60e0      	str	r0, [r4, #12]
 80057c4:	f042 0301 	orr.w	r3, r2, #1
 80057c8:	6084      	str	r4, [r0, #8]
 80057ca:	606b      	str	r3, [r5, #4]
 80057cc:	50aa      	str	r2, [r5, r2]
 80057ce:	e003      	b.n	80057d8 <_free_r+0x74>
 80057d0:	f042 0301 	orr.w	r3, r2, #1
 80057d4:	606b      	str	r3, [r5, #4]
 80057d6:	50aa      	str	r2, [r5, r2]
 80057d8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80057dc:	d214      	bcs.n	8005808 <_free_r+0xa4>
 80057de:	08d2      	lsrs	r2, r2, #3
 80057e0:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80057e4:	6848      	ldr	r0, [r1, #4]
 80057e6:	689f      	ldr	r7, [r3, #8]
 80057e8:	60af      	str	r7, [r5, #8]
 80057ea:	1092      	asrs	r2, r2, #2
 80057ec:	2401      	movs	r4, #1
 80057ee:	fa04 f202 	lsl.w	r2, r4, r2
 80057f2:	4310      	orrs	r0, r2
 80057f4:	60eb      	str	r3, [r5, #12]
 80057f6:	6048      	str	r0, [r1, #4]
 80057f8:	609d      	str	r5, [r3, #8]
 80057fa:	60fd      	str	r5, [r7, #12]
 80057fc:	4640      	mov	r0, r8
 80057fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005802:	f000 bd87 	b.w	8006314 <__malloc_unlock>
 8005806:	4770      	bx	lr
 8005808:	0a53      	lsrs	r3, r2, #9
 800580a:	2b04      	cmp	r3, #4
 800580c:	d847      	bhi.n	800589e <_free_r+0x13a>
 800580e:	0993      	lsrs	r3, r2, #6
 8005810:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8005814:	0060      	lsls	r0, r4, #1
 8005816:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800581a:	493a      	ldr	r1, [pc, #232]	; (8005904 <_free_r+0x1a0>)
 800581c:	6883      	ldr	r3, [r0, #8]
 800581e:	4283      	cmp	r3, r0
 8005820:	d043      	beq.n	80058aa <_free_r+0x146>
 8005822:	6859      	ldr	r1, [r3, #4]
 8005824:	f021 0103 	bic.w	r1, r1, #3
 8005828:	4291      	cmp	r1, r2
 800582a:	d902      	bls.n	8005832 <_free_r+0xce>
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	4298      	cmp	r0, r3
 8005830:	d1f7      	bne.n	8005822 <_free_r+0xbe>
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	60ea      	str	r2, [r5, #12]
 8005836:	60ab      	str	r3, [r5, #8]
 8005838:	4640      	mov	r0, r8
 800583a:	6095      	str	r5, [r2, #8]
 800583c:	60dd      	str	r5, [r3, #12]
 800583e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005842:	f000 bd67 	b.w	8006314 <__malloc_unlock>
 8005846:	07ff      	lsls	r7, r7, #31
 8005848:	4402      	add	r2, r0
 800584a:	d407      	bmi.n	800585c <_free_r+0xf8>
 800584c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8005850:	1aed      	subs	r5, r5, r3
 8005852:	441a      	add	r2, r3
 8005854:	68a8      	ldr	r0, [r5, #8]
 8005856:	68eb      	ldr	r3, [r5, #12]
 8005858:	60c3      	str	r3, [r0, #12]
 800585a:	6098      	str	r0, [r3, #8]
 800585c:	4b2b      	ldr	r3, [pc, #172]	; (800590c <_free_r+0x1a8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0001 	orr.w	r0, r2, #1
 8005864:	429a      	cmp	r2, r3
 8005866:	6068      	str	r0, [r5, #4]
 8005868:	608d      	str	r5, [r1, #8]
 800586a:	d3c7      	bcc.n	80057fc <_free_r+0x98>
 800586c:	4b28      	ldr	r3, [pc, #160]	; (8005910 <_free_r+0x1ac>)
 800586e:	4640      	mov	r0, r8
 8005870:	6819      	ldr	r1, [r3, #0]
 8005872:	f7ff ff29 	bl	80056c8 <_malloc_trim_r>
 8005876:	e7c1      	b.n	80057fc <_free_r+0x98>
 8005878:	1819      	adds	r1, r3, r0
 800587a:	6849      	ldr	r1, [r1, #4]
 800587c:	07c9      	lsls	r1, r1, #31
 800587e:	d409      	bmi.n	8005894 <_free_r+0x130>
 8005880:	68d9      	ldr	r1, [r3, #12]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	4402      	add	r2, r0
 8005886:	f042 0001 	orr.w	r0, r2, #1
 800588a:	60d9      	str	r1, [r3, #12]
 800588c:	608b      	str	r3, [r1, #8]
 800588e:	6068      	str	r0, [r5, #4]
 8005890:	50aa      	str	r2, [r5, r2]
 8005892:	e7b3      	b.n	80057fc <_free_r+0x98>
 8005894:	f042 0301 	orr.w	r3, r2, #1
 8005898:	606b      	str	r3, [r5, #4]
 800589a:	50aa      	str	r2, [r5, r2]
 800589c:	e7ae      	b.n	80057fc <_free_r+0x98>
 800589e:	2b14      	cmp	r3, #20
 80058a0:	d814      	bhi.n	80058cc <_free_r+0x168>
 80058a2:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 80058a6:	0060      	lsls	r0, r4, #1
 80058a8:	e7b5      	b.n	8005816 <_free_r+0xb2>
 80058aa:	684a      	ldr	r2, [r1, #4]
 80058ac:	10a4      	asrs	r4, r4, #2
 80058ae:	2001      	movs	r0, #1
 80058b0:	40a0      	lsls	r0, r4
 80058b2:	4302      	orrs	r2, r0
 80058b4:	604a      	str	r2, [r1, #4]
 80058b6:	461a      	mov	r2, r3
 80058b8:	e7bc      	b.n	8005834 <_free_r+0xd0>
 80058ba:	f042 0301 	orr.w	r3, r2, #1
 80058be:	614d      	str	r5, [r1, #20]
 80058c0:	610d      	str	r5, [r1, #16]
 80058c2:	60ec      	str	r4, [r5, #12]
 80058c4:	60ac      	str	r4, [r5, #8]
 80058c6:	606b      	str	r3, [r5, #4]
 80058c8:	50aa      	str	r2, [r5, r2]
 80058ca:	e797      	b.n	80057fc <_free_r+0x98>
 80058cc:	2b54      	cmp	r3, #84	; 0x54
 80058ce:	d804      	bhi.n	80058da <_free_r+0x176>
 80058d0:	0b13      	lsrs	r3, r2, #12
 80058d2:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 80058d6:	0060      	lsls	r0, r4, #1
 80058d8:	e79d      	b.n	8005816 <_free_r+0xb2>
 80058da:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80058de:	d804      	bhi.n	80058ea <_free_r+0x186>
 80058e0:	0bd3      	lsrs	r3, r2, #15
 80058e2:	f103 0477 	add.w	r4, r3, #119	; 0x77
 80058e6:	0060      	lsls	r0, r4, #1
 80058e8:	e795      	b.n	8005816 <_free_r+0xb2>
 80058ea:	f240 5054 	movw	r0, #1364	; 0x554
 80058ee:	4283      	cmp	r3, r0
 80058f0:	d804      	bhi.n	80058fc <_free_r+0x198>
 80058f2:	0c93      	lsrs	r3, r2, #18
 80058f4:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80058f8:	0060      	lsls	r0, r4, #1
 80058fa:	e78c      	b.n	8005816 <_free_r+0xb2>
 80058fc:	20fc      	movs	r0, #252	; 0xfc
 80058fe:	247e      	movs	r4, #126	; 0x7e
 8005900:	e789      	b.n	8005816 <_free_r+0xb2>
 8005902:	bf00      	nop
 8005904:	2000062c 	.word	0x2000062c
 8005908:	20000634 	.word	0x20000634
 800590c:	20000a34 	.word	0x20000a34
 8005910:	20000e6c 	.word	0x20000e6c

08005914 <__sfvwrite_r>:
 8005914:	6893      	ldr	r3, [r2, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d07a      	beq.n	8005a10 <__sfvwrite_r+0xfc>
 800591a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8005922:	f01e 0f08 	tst.w	lr, #8
 8005926:	b083      	sub	sp, #12
 8005928:	460c      	mov	r4, r1
 800592a:	4681      	mov	r9, r0
 800592c:	4616      	mov	r6, r2
 800592e:	d026      	beq.n	800597e <__sfvwrite_r+0x6a>
 8005930:	690b      	ldr	r3, [r1, #16]
 8005932:	b323      	cbz	r3, 800597e <__sfvwrite_r+0x6a>
 8005934:	f00e 0802 	and.w	r8, lr, #2
 8005938:	fa1f f088 	uxth.w	r0, r8
 800593c:	6835      	ldr	r5, [r6, #0]
 800593e:	b370      	cbz	r0, 800599e <__sfvwrite_r+0x8a>
 8005940:	f04f 0a00 	mov.w	sl, #0
 8005944:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8005c28 <__sfvwrite_r+0x314>
 8005948:	46d0      	mov	r8, sl
 800594a:	45d8      	cmp	r8, fp
 800594c:	4643      	mov	r3, r8
 800594e:	4652      	mov	r2, sl
 8005950:	bf28      	it	cs
 8005952:	465b      	movcs	r3, fp
 8005954:	4648      	mov	r0, r9
 8005956:	f1b8 0f00 	cmp.w	r8, #0
 800595a:	d053      	beq.n	8005a04 <__sfvwrite_r+0xf0>
 800595c:	69e1      	ldr	r1, [r4, #28]
 800595e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005960:	47b8      	blx	r7
 8005962:	2800      	cmp	r0, #0
 8005964:	dd73      	ble.n	8005a4e <__sfvwrite_r+0x13a>
 8005966:	68b3      	ldr	r3, [r6, #8]
 8005968:	1a1b      	subs	r3, r3, r0
 800596a:	4482      	add	sl, r0
 800596c:	ebc0 0808 	rsb	r8, r0, r8
 8005970:	60b3      	str	r3, [r6, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e9      	bne.n	800594a <__sfvwrite_r+0x36>
 8005976:	2000      	movs	r0, #0
 8005978:	b003      	add	sp, #12
 800597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597e:	4648      	mov	r0, r9
 8005980:	4621      	mov	r1, r4
 8005982:	f000 ff81 	bl	8006888 <__swsetup_r>
 8005986:	2800      	cmp	r0, #0
 8005988:	f040 8145 	bne.w	8005c16 <__sfvwrite_r+0x302>
 800598c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8005990:	6835      	ldr	r5, [r6, #0]
 8005992:	f00e 0802 	and.w	r8, lr, #2
 8005996:	fa1f f088 	uxth.w	r0, r8
 800599a:	2800      	cmp	r0, #0
 800599c:	d1d0      	bne.n	8005940 <__sfvwrite_r+0x2c>
 800599e:	f01e 0b01 	ands.w	fp, lr, #1
 80059a2:	d15d      	bne.n	8005a60 <__sfvwrite_r+0x14c>
 80059a4:	46d8      	mov	r8, fp
 80059a6:	f1b8 0f00 	cmp.w	r8, #0
 80059aa:	d025      	beq.n	80059f8 <__sfvwrite_r+0xe4>
 80059ac:	f41e 7f00 	tst.w	lr, #512	; 0x200
 80059b0:	68a7      	ldr	r7, [r4, #8]
 80059b2:	d02f      	beq.n	8005a14 <__sfvwrite_r+0x100>
 80059b4:	45b8      	cmp	r8, r7
 80059b6:	46ba      	mov	sl, r7
 80059b8:	f0c0 80a9 	bcc.w	8005b0e <__sfvwrite_r+0x1fa>
 80059bc:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 80059c0:	f040 80b6 	bne.w	8005b30 <__sfvwrite_r+0x21c>
 80059c4:	6820      	ldr	r0, [r4, #0]
 80059c6:	4652      	mov	r2, sl
 80059c8:	4659      	mov	r1, fp
 80059ca:	f000 fc3d 	bl	8006248 <memmove>
 80059ce:	68a0      	ldr	r0, [r4, #8]
 80059d0:	6822      	ldr	r2, [r4, #0]
 80059d2:	1bc0      	subs	r0, r0, r7
 80059d4:	eb02 030a 	add.w	r3, r2, sl
 80059d8:	60a0      	str	r0, [r4, #8]
 80059da:	6023      	str	r3, [r4, #0]
 80059dc:	4640      	mov	r0, r8
 80059de:	68b3      	ldr	r3, [r6, #8]
 80059e0:	1a1b      	subs	r3, r3, r0
 80059e2:	4483      	add	fp, r0
 80059e4:	ebc0 0808 	rsb	r8, r0, r8
 80059e8:	60b3      	str	r3, [r6, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0c3      	beq.n	8005976 <__sfvwrite_r+0x62>
 80059ee:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 80059f2:	f1b8 0f00 	cmp.w	r8, #0
 80059f6:	d1d9      	bne.n	80059ac <__sfvwrite_r+0x98>
 80059f8:	f8d5 b000 	ldr.w	fp, [r5]
 80059fc:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005a00:	3508      	adds	r5, #8
 8005a02:	e7d0      	b.n	80059a6 <__sfvwrite_r+0x92>
 8005a04:	f8d5 a000 	ldr.w	sl, [r5]
 8005a08:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005a0c:	3508      	adds	r5, #8
 8005a0e:	e79c      	b.n	800594a <__sfvwrite_r+0x36>
 8005a10:	2000      	movs	r0, #0
 8005a12:	4770      	bx	lr
 8005a14:	6820      	ldr	r0, [r4, #0]
 8005a16:	6923      	ldr	r3, [r4, #16]
 8005a18:	4298      	cmp	r0, r3
 8005a1a:	d803      	bhi.n	8005a24 <__sfvwrite_r+0x110>
 8005a1c:	6962      	ldr	r2, [r4, #20]
 8005a1e:	4590      	cmp	r8, r2
 8005a20:	f080 80b9 	bcs.w	8005b96 <__sfvwrite_r+0x282>
 8005a24:	4547      	cmp	r7, r8
 8005a26:	bf28      	it	cs
 8005a28:	4647      	movcs	r7, r8
 8005a2a:	463a      	mov	r2, r7
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	f000 fc0b 	bl	8006248 <memmove>
 8005a32:	68a3      	ldr	r3, [r4, #8]
 8005a34:	6822      	ldr	r2, [r4, #0]
 8005a36:	1bdb      	subs	r3, r3, r7
 8005a38:	443a      	add	r2, r7
 8005a3a:	60a3      	str	r3, [r4, #8]
 8005a3c:	6022      	str	r2, [r4, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d14a      	bne.n	8005ad8 <__sfvwrite_r+0x1c4>
 8005a42:	4648      	mov	r0, r9
 8005a44:	4621      	mov	r1, r4
 8005a46:	f7ff fd8b 	bl	8005560 <_fflush_r>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d044      	beq.n	8005ad8 <__sfvwrite_r+0x1c4>
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	b003      	add	sp, #12
 8005a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a60:	4680      	mov	r8, r0
 8005a62:	9000      	str	r0, [sp, #0]
 8005a64:	4683      	mov	fp, r0
 8005a66:	4682      	mov	sl, r0
 8005a68:	f1ba 0f00 	cmp.w	sl, #0
 8005a6c:	d02c      	beq.n	8005ac8 <__sfvwrite_r+0x1b4>
 8005a6e:	9b00      	ldr	r3, [sp, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d050      	beq.n	8005b16 <__sfvwrite_r+0x202>
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	6921      	ldr	r1, [r4, #16]
 8005a78:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8005a7c:	6962      	ldr	r2, [r4, #20]
 8005a7e:	45d0      	cmp	r8, sl
 8005a80:	4643      	mov	r3, r8
 8005a82:	bf28      	it	cs
 8005a84:	4653      	movcs	r3, sl
 8005a86:	4288      	cmp	r0, r1
 8005a88:	461f      	mov	r7, r3
 8005a8a:	d904      	bls.n	8005a96 <__sfvwrite_r+0x182>
 8005a8c:	eb0e 0c02 	add.w	ip, lr, r2
 8005a90:	4563      	cmp	r3, ip
 8005a92:	f300 8092 	bgt.w	8005bba <__sfvwrite_r+0x2a6>
 8005a96:	4293      	cmp	r3, r2
 8005a98:	db20      	blt.n	8005adc <__sfvwrite_r+0x1c8>
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005a9e:	69e1      	ldr	r1, [r4, #28]
 8005aa0:	4648      	mov	r0, r9
 8005aa2:	465a      	mov	r2, fp
 8005aa4:	47b8      	blx	r7
 8005aa6:	1e07      	subs	r7, r0, #0
 8005aa8:	ddd1      	ble.n	8005a4e <__sfvwrite_r+0x13a>
 8005aaa:	ebb8 0807 	subs.w	r8, r8, r7
 8005aae:	d025      	beq.n	8005afc <__sfvwrite_r+0x1e8>
 8005ab0:	68b3      	ldr	r3, [r6, #8]
 8005ab2:	1bdb      	subs	r3, r3, r7
 8005ab4:	44bb      	add	fp, r7
 8005ab6:	ebc7 0a0a 	rsb	sl, r7, sl
 8005aba:	60b3      	str	r3, [r6, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f43f af5a 	beq.w	8005976 <__sfvwrite_r+0x62>
 8005ac2:	f1ba 0f00 	cmp.w	sl, #0
 8005ac6:	d1d2      	bne.n	8005a6e <__sfvwrite_r+0x15a>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f8d5 b000 	ldr.w	fp, [r5]
 8005ace:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	3508      	adds	r5, #8
 8005ad6:	e7c7      	b.n	8005a68 <__sfvwrite_r+0x154>
 8005ad8:	4638      	mov	r0, r7
 8005ada:	e780      	b.n	80059de <__sfvwrite_r+0xca>
 8005adc:	461a      	mov	r2, r3
 8005ade:	4659      	mov	r1, fp
 8005ae0:	9301      	str	r3, [sp, #4]
 8005ae2:	f000 fbb1 	bl	8006248 <memmove>
 8005ae6:	68a2      	ldr	r2, [r4, #8]
 8005ae8:	6821      	ldr	r1, [r4, #0]
 8005aea:	9b01      	ldr	r3, [sp, #4]
 8005aec:	ebb8 0807 	subs.w	r8, r8, r7
 8005af0:	eba2 0203 	sub.w	r2, r2, r3
 8005af4:	440b      	add	r3, r1
 8005af6:	60a2      	str	r2, [r4, #8]
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	d1d9      	bne.n	8005ab0 <__sfvwrite_r+0x19c>
 8005afc:	4648      	mov	r0, r9
 8005afe:	4621      	mov	r1, r4
 8005b00:	f7ff fd2e 	bl	8005560 <_fflush_r>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d1a2      	bne.n	8005a4e <__sfvwrite_r+0x13a>
 8005b08:	f8cd 8000 	str.w	r8, [sp]
 8005b0c:	e7d0      	b.n	8005ab0 <__sfvwrite_r+0x19c>
 8005b0e:	6820      	ldr	r0, [r4, #0]
 8005b10:	4647      	mov	r7, r8
 8005b12:	46c2      	mov	sl, r8
 8005b14:	e757      	b.n	80059c6 <__sfvwrite_r+0xb2>
 8005b16:	4658      	mov	r0, fp
 8005b18:	210a      	movs	r1, #10
 8005b1a:	4652      	mov	r2, sl
 8005b1c:	f000 fb4a 	bl	80061b4 <memchr>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d073      	beq.n	8005c0c <__sfvwrite_r+0x2f8>
 8005b24:	3001      	adds	r0, #1
 8005b26:	2301      	movs	r3, #1
 8005b28:	ebcb 0800 	rsb	r8, fp, r0
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	e7a1      	b.n	8005a74 <__sfvwrite_r+0x160>
 8005b30:	6967      	ldr	r7, [r4, #20]
 8005b32:	6921      	ldr	r1, [r4, #16]
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8005b3a:	1a5b      	subs	r3, r3, r1
 8005b3c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8005b40:	1c58      	adds	r0, r3, #1
 8005b42:	107f      	asrs	r7, r7, #1
 8005b44:	4440      	add	r0, r8
 8005b46:	4287      	cmp	r7, r0
 8005b48:	463a      	mov	r2, r7
 8005b4a:	bf3c      	itt	cc
 8005b4c:	4607      	movcc	r7, r0
 8005b4e:	463a      	movcc	r2, r7
 8005b50:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	d046      	beq.n	8005be6 <__sfvwrite_r+0x2d2>
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4648      	mov	r0, r9
 8005b5c:	f000 f898 	bl	8005c90 <_malloc_r>
 8005b60:	9b00      	ldr	r3, [sp, #0]
 8005b62:	4682      	mov	sl, r0
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d059      	beq.n	8005c1c <__sfvwrite_r+0x308>
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6921      	ldr	r1, [r4, #16]
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	f7fa fb57 	bl	8000220 <memcpy>
 8005b72:	89a2      	ldrh	r2, [r4, #12]
 8005b74:	9b00      	ldr	r3, [sp, #0]
 8005b76:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8005b7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b7e:	81a2      	strh	r2, [r4, #12]
 8005b80:	eb0a 0003 	add.w	r0, sl, r3
 8005b84:	1afb      	subs	r3, r7, r3
 8005b86:	f8c4 a010 	str.w	sl, [r4, #16]
 8005b8a:	6167      	str	r7, [r4, #20]
 8005b8c:	6020      	str	r0, [r4, #0]
 8005b8e:	60a3      	str	r3, [r4, #8]
 8005b90:	4647      	mov	r7, r8
 8005b92:	46c2      	mov	sl, r8
 8005b94:	e717      	b.n	80059c6 <__sfvwrite_r+0xb2>
 8005b96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005b9a:	4543      	cmp	r3, r8
 8005b9c:	bf28      	it	cs
 8005b9e:	4643      	movcs	r3, r8
 8005ba0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005ba2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ba6:	4648      	mov	r0, r9
 8005ba8:	fb03 f302 	mul.w	r3, r3, r2
 8005bac:	69e1      	ldr	r1, [r4, #28]
 8005bae:	465a      	mov	r2, fp
 8005bb0:	47b8      	blx	r7
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	f73f af13 	bgt.w	80059de <__sfvwrite_r+0xca>
 8005bb8:	e749      	b.n	8005a4e <__sfvwrite_r+0x13a>
 8005bba:	4662      	mov	r2, ip
 8005bbc:	4659      	mov	r1, fp
 8005bbe:	f8cd c004 	str.w	ip, [sp, #4]
 8005bc2:	f000 fb41 	bl	8006248 <memmove>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005bcc:	4463      	add	r3, ip
 8005bce:	6023      	str	r3, [r4, #0]
 8005bd0:	4648      	mov	r0, r9
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	f7ff fcc4 	bl	8005560 <_fflush_r>
 8005bd8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	f47f af36 	bne.w	8005a4e <__sfvwrite_r+0x13a>
 8005be2:	4667      	mov	r7, ip
 8005be4:	e761      	b.n	8005aaa <__sfvwrite_r+0x196>
 8005be6:	4648      	mov	r0, r9
 8005be8:	f000 fbc2 	bl	8006370 <_realloc_r>
 8005bec:	9b00      	ldr	r3, [sp, #0]
 8005bee:	4682      	mov	sl, r0
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d1c5      	bne.n	8005b80 <__sfvwrite_r+0x26c>
 8005bf4:	4648      	mov	r0, r9
 8005bf6:	6921      	ldr	r1, [r4, #16]
 8005bf8:	f7ff fdb4 	bl	8005764 <_free_r>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	220c      	movs	r2, #12
 8005c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f8c9 2000 	str.w	r2, [r9]
 8005c0a:	e721      	b.n	8005a50 <__sfvwrite_r+0x13c>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f10a 0801 	add.w	r8, sl, #1
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	e72e      	b.n	8005a74 <__sfvwrite_r+0x160>
 8005c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c1a:	e6ad      	b.n	8005978 <__sfvwrite_r+0x64>
 8005c1c:	230c      	movs	r3, #12
 8005c1e:	f8c9 3000 	str.w	r3, [r9]
 8005c22:	89a3      	ldrh	r3, [r4, #12]
 8005c24:	e714      	b.n	8005a50 <__sfvwrite_r+0x13c>
 8005c26:	bf00      	nop
 8005c28:	7ffffc00 	.word	0x7ffffc00

08005c2c <_fwalk_reent>:
 8005c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c30:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8005c34:	d01f      	beq.n	8005c76 <_fwalk_reent+0x4a>
 8005c36:	4688      	mov	r8, r1
 8005c38:	4606      	mov	r6, r0
 8005c3a:	f04f 0900 	mov.w	r9, #0
 8005c3e:	687d      	ldr	r5, [r7, #4]
 8005c40:	68bc      	ldr	r4, [r7, #8]
 8005c42:	3d01      	subs	r5, #1
 8005c44:	d411      	bmi.n	8005c6a <_fwalk_reent+0x3e>
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005c4e:	d908      	bls.n	8005c62 <_fwalk_reent+0x36>
 8005c50:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8005c54:	3301      	adds	r3, #1
 8005c56:	4621      	mov	r1, r4
 8005c58:	4630      	mov	r0, r6
 8005c5a:	d002      	beq.n	8005c62 <_fwalk_reent+0x36>
 8005c5c:	47c0      	blx	r8
 8005c5e:	ea49 0900 	orr.w	r9, r9, r0
 8005c62:	1c6b      	adds	r3, r5, #1
 8005c64:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8005c68:	d1ed      	bne.n	8005c46 <_fwalk_reent+0x1a>
 8005c6a:	683f      	ldr	r7, [r7, #0]
 8005c6c:	2f00      	cmp	r7, #0
 8005c6e:	d1e6      	bne.n	8005c3e <_fwalk_reent+0x12>
 8005c70:	4648      	mov	r0, r9
 8005c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c76:	46b9      	mov	r9, r7
 8005c78:	4648      	mov	r0, r9
 8005c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7e:	bf00      	nop

08005c80 <malloc>:
 8005c80:	4b02      	ldr	r3, [pc, #8]	; (8005c8c <malloc+0xc>)
 8005c82:	4601      	mov	r1, r0
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	f000 b803 	b.w	8005c90 <_malloc_r>
 8005c8a:	bf00      	nop
 8005c8c:	20000628 	.word	0x20000628

08005c90 <_malloc_r>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	f101 050b 	add.w	r5, r1, #11
 8005c98:	2d16      	cmp	r5, #22
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	d927      	bls.n	8005cf0 <_malloc_r+0x60>
 8005ca0:	f035 0507 	bics.w	r5, r5, #7
 8005ca4:	f100 80b6 	bmi.w	8005e14 <_malloc_r+0x184>
 8005ca8:	42a9      	cmp	r1, r5
 8005caa:	f200 80b3 	bhi.w	8005e14 <_malloc_r+0x184>
 8005cae:	f000 fb2f 	bl	8006310 <__malloc_lock>
 8005cb2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8005cb6:	d222      	bcs.n	8005cfe <_malloc_r+0x6e>
 8005cb8:	4fc2      	ldr	r7, [pc, #776]	; (8005fc4 <_malloc_r+0x334>)
 8005cba:	08e8      	lsrs	r0, r5, #3
 8005cbc:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8005cc0:	68dc      	ldr	r4, [r3, #12]
 8005cc2:	429c      	cmp	r4, r3
 8005cc4:	f000 81c8 	beq.w	8006058 <_malloc_r+0x3c8>
 8005cc8:	6863      	ldr	r3, [r4, #4]
 8005cca:	68e1      	ldr	r1, [r4, #12]
 8005ccc:	68a5      	ldr	r5, [r4, #8]
 8005cce:	f023 0303 	bic.w	r3, r3, #3
 8005cd2:	4423      	add	r3, r4
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	60e9      	str	r1, [r5, #12]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	608d      	str	r5, [r1, #8]
 8005ce0:	605a      	str	r2, [r3, #4]
 8005ce2:	f000 fb17 	bl	8006314 <__malloc_unlock>
 8005ce6:	3408      	adds	r4, #8
 8005ce8:	4620      	mov	r0, r4
 8005cea:	b003      	add	sp, #12
 8005cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf0:	2910      	cmp	r1, #16
 8005cf2:	f200 808f 	bhi.w	8005e14 <_malloc_r+0x184>
 8005cf6:	f000 fb0b 	bl	8006310 <__malloc_lock>
 8005cfa:	2510      	movs	r5, #16
 8005cfc:	e7dc      	b.n	8005cb8 <_malloc_r+0x28>
 8005cfe:	0a68      	lsrs	r0, r5, #9
 8005d00:	f000 808f 	beq.w	8005e22 <_malloc_r+0x192>
 8005d04:	2804      	cmp	r0, #4
 8005d06:	f200 8154 	bhi.w	8005fb2 <_malloc_r+0x322>
 8005d0a:	09a8      	lsrs	r0, r5, #6
 8005d0c:	3038      	adds	r0, #56	; 0x38
 8005d0e:	0041      	lsls	r1, r0, #1
 8005d10:	4fac      	ldr	r7, [pc, #688]	; (8005fc4 <_malloc_r+0x334>)
 8005d12:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8005d16:	68cc      	ldr	r4, [r1, #12]
 8005d18:	42a1      	cmp	r1, r4
 8005d1a:	d106      	bne.n	8005d2a <_malloc_r+0x9a>
 8005d1c:	e00c      	b.n	8005d38 <_malloc_r+0xa8>
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	f280 8082 	bge.w	8005e28 <_malloc_r+0x198>
 8005d24:	68e4      	ldr	r4, [r4, #12]
 8005d26:	42a1      	cmp	r1, r4
 8005d28:	d006      	beq.n	8005d38 <_malloc_r+0xa8>
 8005d2a:	6863      	ldr	r3, [r4, #4]
 8005d2c:	f023 0303 	bic.w	r3, r3, #3
 8005d30:	1b5a      	subs	r2, r3, r5
 8005d32:	2a0f      	cmp	r2, #15
 8005d34:	ddf3      	ble.n	8005d1e <_malloc_r+0x8e>
 8005d36:	3801      	subs	r0, #1
 8005d38:	3001      	adds	r0, #1
 8005d3a:	49a2      	ldr	r1, [pc, #648]	; (8005fc4 <_malloc_r+0x334>)
 8005d3c:	693c      	ldr	r4, [r7, #16]
 8005d3e:	f101 0e08 	add.w	lr, r1, #8
 8005d42:	4574      	cmp	r4, lr
 8005d44:	f000 817d 	beq.w	8006042 <_malloc_r+0x3b2>
 8005d48:	6863      	ldr	r3, [r4, #4]
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	1b5a      	subs	r2, r3, r5
 8005d50:	2a0f      	cmp	r2, #15
 8005d52:	f300 8163 	bgt.w	800601c <_malloc_r+0x38c>
 8005d56:	2a00      	cmp	r2, #0
 8005d58:	f8c1 e014 	str.w	lr, [r1, #20]
 8005d5c:	f8c1 e010 	str.w	lr, [r1, #16]
 8005d60:	da73      	bge.n	8005e4a <_malloc_r+0x1ba>
 8005d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d66:	f080 8139 	bcs.w	8005fdc <_malloc_r+0x34c>
 8005d6a:	08db      	lsrs	r3, r3, #3
 8005d6c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8005d70:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8005d74:	684a      	ldr	r2, [r1, #4]
 8005d76:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8005d7a:	f8c4 9008 	str.w	r9, [r4, #8]
 8005d7e:	2301      	movs	r3, #1
 8005d80:	fa03 f30c 	lsl.w	r3, r3, ip
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c4 800c 	str.w	r8, [r4, #12]
 8005d8a:	604b      	str	r3, [r1, #4]
 8005d8c:	f8c8 4008 	str.w	r4, [r8, #8]
 8005d90:	f8c9 400c 	str.w	r4, [r9, #12]
 8005d94:	1082      	asrs	r2, r0, #2
 8005d96:	2401      	movs	r4, #1
 8005d98:	4094      	lsls	r4, r2
 8005d9a:	429c      	cmp	r4, r3
 8005d9c:	d862      	bhi.n	8005e64 <_malloc_r+0x1d4>
 8005d9e:	4223      	tst	r3, r4
 8005da0:	d106      	bne.n	8005db0 <_malloc_r+0x120>
 8005da2:	f020 0003 	bic.w	r0, r0, #3
 8005da6:	0064      	lsls	r4, r4, #1
 8005da8:	4223      	tst	r3, r4
 8005daa:	f100 0004 	add.w	r0, r0, #4
 8005dae:	d0fa      	beq.n	8005da6 <_malloc_r+0x116>
 8005db0:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8005db4:	46c4      	mov	ip, r8
 8005db6:	4681      	mov	r9, r0
 8005db8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8005dbc:	459c      	cmp	ip, r3
 8005dbe:	d107      	bne.n	8005dd0 <_malloc_r+0x140>
 8005dc0:	e141      	b.n	8006046 <_malloc_r+0x3b6>
 8005dc2:	2900      	cmp	r1, #0
 8005dc4:	f280 8151 	bge.w	800606a <_malloc_r+0x3da>
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	459c      	cmp	ip, r3
 8005dcc:	f000 813b 	beq.w	8006046 <_malloc_r+0x3b6>
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	f022 0203 	bic.w	r2, r2, #3
 8005dd6:	1b51      	subs	r1, r2, r5
 8005dd8:	290f      	cmp	r1, #15
 8005dda:	ddf2      	ble.n	8005dc2 <_malloc_r+0x132>
 8005ddc:	461c      	mov	r4, r3
 8005dde:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005de2:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8005de6:	195a      	adds	r2, r3, r5
 8005de8:	f045 0901 	orr.w	r9, r5, #1
 8005dec:	f041 0501 	orr.w	r5, r1, #1
 8005df0:	f8c3 9004 	str.w	r9, [r3, #4]
 8005df4:	4630      	mov	r0, r6
 8005df6:	f8c8 c00c 	str.w	ip, [r8, #12]
 8005dfa:	f8cc 8008 	str.w	r8, [ip, #8]
 8005dfe:	617a      	str	r2, [r7, #20]
 8005e00:	613a      	str	r2, [r7, #16]
 8005e02:	f8c2 e00c 	str.w	lr, [r2, #12]
 8005e06:	f8c2 e008 	str.w	lr, [r2, #8]
 8005e0a:	6055      	str	r5, [r2, #4]
 8005e0c:	5051      	str	r1, [r2, r1]
 8005e0e:	f000 fa81 	bl	8006314 <__malloc_unlock>
 8005e12:	e769      	b.n	8005ce8 <_malloc_r+0x58>
 8005e14:	2400      	movs	r4, #0
 8005e16:	230c      	movs	r3, #12
 8005e18:	4620      	mov	r0, r4
 8005e1a:	6033      	str	r3, [r6, #0]
 8005e1c:	b003      	add	sp, #12
 8005e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e22:	217e      	movs	r1, #126	; 0x7e
 8005e24:	203f      	movs	r0, #63	; 0x3f
 8005e26:	e773      	b.n	8005d10 <_malloc_r+0x80>
 8005e28:	4423      	add	r3, r4
 8005e2a:	68e1      	ldr	r1, [r4, #12]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	68a5      	ldr	r5, [r4, #8]
 8005e30:	f042 0201 	orr.w	r2, r2, #1
 8005e34:	60e9      	str	r1, [r5, #12]
 8005e36:	4630      	mov	r0, r6
 8005e38:	608d      	str	r5, [r1, #8]
 8005e3a:	605a      	str	r2, [r3, #4]
 8005e3c:	f000 fa6a 	bl	8006314 <__malloc_unlock>
 8005e40:	3408      	adds	r4, #8
 8005e42:	4620      	mov	r0, r4
 8005e44:	b003      	add	sp, #12
 8005e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4a:	4423      	add	r3, r4
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	f042 0201 	orr.w	r2, r2, #1
 8005e54:	605a      	str	r2, [r3, #4]
 8005e56:	f000 fa5d 	bl	8006314 <__malloc_unlock>
 8005e5a:	3408      	adds	r4, #8
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	b003      	add	sp, #12
 8005e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e64:	68bc      	ldr	r4, [r7, #8]
 8005e66:	6863      	ldr	r3, [r4, #4]
 8005e68:	f023 0803 	bic.w	r8, r3, #3
 8005e6c:	4545      	cmp	r5, r8
 8005e6e:	d804      	bhi.n	8005e7a <_malloc_r+0x1ea>
 8005e70:	ebc5 0308 	rsb	r3, r5, r8
 8005e74:	2b0f      	cmp	r3, #15
 8005e76:	f300 808c 	bgt.w	8005f92 <_malloc_r+0x302>
 8005e7a:	4b53      	ldr	r3, [pc, #332]	; (8005fc8 <_malloc_r+0x338>)
 8005e7c:	f8df a158 	ldr.w	sl, [pc, #344]	; 8005fd8 <_malloc_r+0x348>
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	f8da 3000 	ldr.w	r3, [sl]
 8005e86:	3301      	adds	r3, #1
 8005e88:	442a      	add	r2, r5
 8005e8a:	eb04 0b08 	add.w	fp, r4, r8
 8005e8e:	f000 8150 	beq.w	8006132 <_malloc_r+0x4a2>
 8005e92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e96:	320f      	adds	r2, #15
 8005e98:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005e9c:	f022 020f 	bic.w	r2, r2, #15
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	9201      	str	r2, [sp, #4]
 8005ea6:	f7fa fd03 	bl	80008b0 <_sbrk_r>
 8005eaa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005eae:	4681      	mov	r9, r0
 8005eb0:	9a01      	ldr	r2, [sp, #4]
 8005eb2:	f000 8147 	beq.w	8006144 <_malloc_r+0x4b4>
 8005eb6:	4583      	cmp	fp, r0
 8005eb8:	f200 80ee 	bhi.w	8006098 <_malloc_r+0x408>
 8005ebc:	4b43      	ldr	r3, [pc, #268]	; (8005fcc <_malloc_r+0x33c>)
 8005ebe:	6819      	ldr	r1, [r3, #0]
 8005ec0:	45cb      	cmp	fp, r9
 8005ec2:	4411      	add	r1, r2
 8005ec4:	6019      	str	r1, [r3, #0]
 8005ec6:	f000 8142 	beq.w	800614e <_malloc_r+0x4be>
 8005eca:	f8da 0000 	ldr.w	r0, [sl]
 8005ece:	f8df e108 	ldr.w	lr, [pc, #264]	; 8005fd8 <_malloc_r+0x348>
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	bf1b      	ittet	ne
 8005ed6:	ebcb 0b09 	rsbne	fp, fp, r9
 8005eda:	4459      	addne	r1, fp
 8005edc:	f8ce 9000 	streq.w	r9, [lr]
 8005ee0:	6019      	strne	r1, [r3, #0]
 8005ee2:	f019 0107 	ands.w	r1, r9, #7
 8005ee6:	f000 8107 	beq.w	80060f8 <_malloc_r+0x468>
 8005eea:	f1c1 0008 	rsb	r0, r1, #8
 8005eee:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8005ef2:	4481      	add	r9, r0
 8005ef4:	3108      	adds	r1, #8
 8005ef6:	444a      	add	r2, r9
 8005ef8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005efc:	ebc2 0a01 	rsb	sl, r2, r1
 8005f00:	4651      	mov	r1, sl
 8005f02:	4630      	mov	r0, r6
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	f7fa fcd3 	bl	80008b0 <_sbrk_r>
 8005f0a:	1c43      	adds	r3, r0, #1
 8005f0c:	9b01      	ldr	r3, [sp, #4]
 8005f0e:	f000 812c 	beq.w	800616a <_malloc_r+0x4da>
 8005f12:	ebc9 0200 	rsb	r2, r9, r0
 8005f16:	4452      	add	r2, sl
 8005f18:	f042 0201 	orr.w	r2, r2, #1
 8005f1c:	6819      	ldr	r1, [r3, #0]
 8005f1e:	f8c7 9008 	str.w	r9, [r7, #8]
 8005f22:	4451      	add	r1, sl
 8005f24:	42bc      	cmp	r4, r7
 8005f26:	f8c9 2004 	str.w	r2, [r9, #4]
 8005f2a:	6019      	str	r1, [r3, #0]
 8005f2c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8005fcc <_malloc_r+0x33c>
 8005f30:	d016      	beq.n	8005f60 <_malloc_r+0x2d0>
 8005f32:	f1b8 0f0f 	cmp.w	r8, #15
 8005f36:	f240 80ee 	bls.w	8006116 <_malloc_r+0x486>
 8005f3a:	6862      	ldr	r2, [r4, #4]
 8005f3c:	f1a8 030c 	sub.w	r3, r8, #12
 8005f40:	f023 0307 	bic.w	r3, r3, #7
 8005f44:	18e0      	adds	r0, r4, r3
 8005f46:	f002 0201 	and.w	r2, r2, #1
 8005f4a:	f04f 0e05 	mov.w	lr, #5
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	2b0f      	cmp	r3, #15
 8005f52:	6062      	str	r2, [r4, #4]
 8005f54:	f8c0 e004 	str.w	lr, [r0, #4]
 8005f58:	f8c0 e008 	str.w	lr, [r0, #8]
 8005f5c:	f200 8109 	bhi.w	8006172 <_malloc_r+0x4e2>
 8005f60:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <_malloc_r+0x340>)
 8005f62:	68bc      	ldr	r4, [r7, #8]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4291      	cmp	r1, r2
 8005f68:	bf88      	it	hi
 8005f6a:	6019      	strhi	r1, [r3, #0]
 8005f6c:	4b19      	ldr	r3, [pc, #100]	; (8005fd4 <_malloc_r+0x344>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	4291      	cmp	r1, r2
 8005f72:	6862      	ldr	r2, [r4, #4]
 8005f74:	bf88      	it	hi
 8005f76:	6019      	strhi	r1, [r3, #0]
 8005f78:	f022 0203 	bic.w	r2, r2, #3
 8005f7c:	4295      	cmp	r5, r2
 8005f7e:	eba2 0305 	sub.w	r3, r2, r5
 8005f82:	d801      	bhi.n	8005f88 <_malloc_r+0x2f8>
 8005f84:	2b0f      	cmp	r3, #15
 8005f86:	dc04      	bgt.n	8005f92 <_malloc_r+0x302>
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f000 f9c3 	bl	8006314 <__malloc_unlock>
 8005f8e:	2400      	movs	r4, #0
 8005f90:	e6aa      	b.n	8005ce8 <_malloc_r+0x58>
 8005f92:	1962      	adds	r2, r4, r5
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	f045 0501 	orr.w	r5, r5, #1
 8005f9c:	6065      	str	r5, [r4, #4]
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	60ba      	str	r2, [r7, #8]
 8005fa2:	6053      	str	r3, [r2, #4]
 8005fa4:	f000 f9b6 	bl	8006314 <__malloc_unlock>
 8005fa8:	3408      	adds	r4, #8
 8005faa:	4620      	mov	r0, r4
 8005fac:	b003      	add	sp, #12
 8005fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb2:	2814      	cmp	r0, #20
 8005fb4:	d968      	bls.n	8006088 <_malloc_r+0x3f8>
 8005fb6:	2854      	cmp	r0, #84	; 0x54
 8005fb8:	f200 8097 	bhi.w	80060ea <_malloc_r+0x45a>
 8005fbc:	0b28      	lsrs	r0, r5, #12
 8005fbe:	306e      	adds	r0, #110	; 0x6e
 8005fc0:	0041      	lsls	r1, r0, #1
 8005fc2:	e6a5      	b.n	8005d10 <_malloc_r+0x80>
 8005fc4:	2000062c 	.word	0x2000062c
 8005fc8:	20000e6c 	.word	0x20000e6c
 8005fcc:	20000e70 	.word	0x20000e70
 8005fd0:	20000e68 	.word	0x20000e68
 8005fd4:	20000e64 	.word	0x20000e64
 8005fd8:	20000a38 	.word	0x20000a38
 8005fdc:	0a5a      	lsrs	r2, r3, #9
 8005fde:	2a04      	cmp	r2, #4
 8005fe0:	d955      	bls.n	800608e <_malloc_r+0x3fe>
 8005fe2:	2a14      	cmp	r2, #20
 8005fe4:	f200 80a7 	bhi.w	8006136 <_malloc_r+0x4a6>
 8005fe8:	325b      	adds	r2, #91	; 0x5b
 8005fea:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8005fee:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8005ff2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80061b0 <_malloc_r+0x520>
 8005ff6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8005ffa:	4561      	cmp	r1, ip
 8005ffc:	d07f      	beq.n	80060fe <_malloc_r+0x46e>
 8005ffe:	684a      	ldr	r2, [r1, #4]
 8006000:	f022 0203 	bic.w	r2, r2, #3
 8006004:	4293      	cmp	r3, r2
 8006006:	d202      	bcs.n	800600e <_malloc_r+0x37e>
 8006008:	6889      	ldr	r1, [r1, #8]
 800600a:	458c      	cmp	ip, r1
 800600c:	d1f7      	bne.n	8005ffe <_malloc_r+0x36e>
 800600e:	68ca      	ldr	r2, [r1, #12]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60e2      	str	r2, [r4, #12]
 8006014:	60a1      	str	r1, [r4, #8]
 8006016:	6094      	str	r4, [r2, #8]
 8006018:	60cc      	str	r4, [r1, #12]
 800601a:	e6bb      	b.n	8005d94 <_malloc_r+0x104>
 800601c:	1963      	adds	r3, r4, r5
 800601e:	f042 0701 	orr.w	r7, r2, #1
 8006022:	f045 0501 	orr.w	r5, r5, #1
 8006026:	6065      	str	r5, [r4, #4]
 8006028:	4630      	mov	r0, r6
 800602a:	614b      	str	r3, [r1, #20]
 800602c:	610b      	str	r3, [r1, #16]
 800602e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8006032:	f8c3 e008 	str.w	lr, [r3, #8]
 8006036:	605f      	str	r7, [r3, #4]
 8006038:	509a      	str	r2, [r3, r2]
 800603a:	3408      	adds	r4, #8
 800603c:	f000 f96a 	bl	8006314 <__malloc_unlock>
 8006040:	e652      	b.n	8005ce8 <_malloc_r+0x58>
 8006042:	684b      	ldr	r3, [r1, #4]
 8006044:	e6a6      	b.n	8005d94 <_malloc_r+0x104>
 8006046:	f109 0901 	add.w	r9, r9, #1
 800604a:	f019 0f03 	tst.w	r9, #3
 800604e:	f10c 0c08 	add.w	ip, ip, #8
 8006052:	f47f aeb1 	bne.w	8005db8 <_malloc_r+0x128>
 8006056:	e02c      	b.n	80060b2 <_malloc_r+0x422>
 8006058:	f104 0308 	add.w	r3, r4, #8
 800605c:	6964      	ldr	r4, [r4, #20]
 800605e:	42a3      	cmp	r3, r4
 8006060:	bf08      	it	eq
 8006062:	3002      	addeq	r0, #2
 8006064:	f43f ae69 	beq.w	8005d3a <_malloc_r+0xaa>
 8006068:	e62e      	b.n	8005cc8 <_malloc_r+0x38>
 800606a:	441a      	add	r2, r3
 800606c:	461c      	mov	r4, r3
 800606e:	6851      	ldr	r1, [r2, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8006076:	f041 0101 	orr.w	r1, r1, #1
 800607a:	6051      	str	r1, [r2, #4]
 800607c:	4630      	mov	r0, r6
 800607e:	60eb      	str	r3, [r5, #12]
 8006080:	609d      	str	r5, [r3, #8]
 8006082:	f000 f947 	bl	8006314 <__malloc_unlock>
 8006086:	e62f      	b.n	8005ce8 <_malloc_r+0x58>
 8006088:	305b      	adds	r0, #91	; 0x5b
 800608a:	0041      	lsls	r1, r0, #1
 800608c:	e640      	b.n	8005d10 <_malloc_r+0x80>
 800608e:	099a      	lsrs	r2, r3, #6
 8006090:	3238      	adds	r2, #56	; 0x38
 8006092:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8006096:	e7aa      	b.n	8005fee <_malloc_r+0x35e>
 8006098:	42bc      	cmp	r4, r7
 800609a:	4b45      	ldr	r3, [pc, #276]	; (80061b0 <_malloc_r+0x520>)
 800609c:	f43f af0e 	beq.w	8005ebc <_malloc_r+0x22c>
 80060a0:	689c      	ldr	r4, [r3, #8]
 80060a2:	6862      	ldr	r2, [r4, #4]
 80060a4:	f022 0203 	bic.w	r2, r2, #3
 80060a8:	e768      	b.n	8005f7c <_malloc_r+0x2ec>
 80060aa:	f8d8 8000 	ldr.w	r8, [r8]
 80060ae:	4598      	cmp	r8, r3
 80060b0:	d17c      	bne.n	80061ac <_malloc_r+0x51c>
 80060b2:	f010 0f03 	tst.w	r0, #3
 80060b6:	f1a8 0308 	sub.w	r3, r8, #8
 80060ba:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80060be:	d1f4      	bne.n	80060aa <_malloc_r+0x41a>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	ea23 0304 	bic.w	r3, r3, r4
 80060c6:	607b      	str	r3, [r7, #4]
 80060c8:	0064      	lsls	r4, r4, #1
 80060ca:	429c      	cmp	r4, r3
 80060cc:	f63f aeca 	bhi.w	8005e64 <_malloc_r+0x1d4>
 80060d0:	2c00      	cmp	r4, #0
 80060d2:	f43f aec7 	beq.w	8005e64 <_malloc_r+0x1d4>
 80060d6:	4223      	tst	r3, r4
 80060d8:	4648      	mov	r0, r9
 80060da:	f47f ae69 	bne.w	8005db0 <_malloc_r+0x120>
 80060de:	0064      	lsls	r4, r4, #1
 80060e0:	4223      	tst	r3, r4
 80060e2:	f100 0004 	add.w	r0, r0, #4
 80060e6:	d0fa      	beq.n	80060de <_malloc_r+0x44e>
 80060e8:	e662      	b.n	8005db0 <_malloc_r+0x120>
 80060ea:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 80060ee:	d818      	bhi.n	8006122 <_malloc_r+0x492>
 80060f0:	0be8      	lsrs	r0, r5, #15
 80060f2:	3077      	adds	r0, #119	; 0x77
 80060f4:	0041      	lsls	r1, r0, #1
 80060f6:	e60b      	b.n	8005d10 <_malloc_r+0x80>
 80060f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060fc:	e6fb      	b.n	8005ef6 <_malloc_r+0x266>
 80060fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006102:	1092      	asrs	r2, r2, #2
 8006104:	f04f 0c01 	mov.w	ip, #1
 8006108:	fa0c f202 	lsl.w	r2, ip, r2
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006112:	460a      	mov	r2, r1
 8006114:	e77d      	b.n	8006012 <_malloc_r+0x382>
 8006116:	2301      	movs	r3, #1
 8006118:	f8c9 3004 	str.w	r3, [r9, #4]
 800611c:	464c      	mov	r4, r9
 800611e:	2200      	movs	r2, #0
 8006120:	e72c      	b.n	8005f7c <_malloc_r+0x2ec>
 8006122:	f240 5354 	movw	r3, #1364	; 0x554
 8006126:	4298      	cmp	r0, r3
 8006128:	d81c      	bhi.n	8006164 <_malloc_r+0x4d4>
 800612a:	0ca8      	lsrs	r0, r5, #18
 800612c:	307c      	adds	r0, #124	; 0x7c
 800612e:	0041      	lsls	r1, r0, #1
 8006130:	e5ee      	b.n	8005d10 <_malloc_r+0x80>
 8006132:	3210      	adds	r2, #16
 8006134:	e6b4      	b.n	8005ea0 <_malloc_r+0x210>
 8006136:	2a54      	cmp	r2, #84	; 0x54
 8006138:	d823      	bhi.n	8006182 <_malloc_r+0x4f2>
 800613a:	0b1a      	lsrs	r2, r3, #12
 800613c:	326e      	adds	r2, #110	; 0x6e
 800613e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8006142:	e754      	b.n	8005fee <_malloc_r+0x35e>
 8006144:	68bc      	ldr	r4, [r7, #8]
 8006146:	6862      	ldr	r2, [r4, #4]
 8006148:	f022 0203 	bic.w	r2, r2, #3
 800614c:	e716      	b.n	8005f7c <_malloc_r+0x2ec>
 800614e:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8006152:	2800      	cmp	r0, #0
 8006154:	f47f aeb9 	bne.w	8005eca <_malloc_r+0x23a>
 8006158:	4442      	add	r2, r8
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f042 0201 	orr.w	r2, r2, #1
 8006160:	605a      	str	r2, [r3, #4]
 8006162:	e6fd      	b.n	8005f60 <_malloc_r+0x2d0>
 8006164:	21fc      	movs	r1, #252	; 0xfc
 8006166:	207e      	movs	r0, #126	; 0x7e
 8006168:	e5d2      	b.n	8005d10 <_malloc_r+0x80>
 800616a:	2201      	movs	r2, #1
 800616c:	f04f 0a00 	mov.w	sl, #0
 8006170:	e6d4      	b.n	8005f1c <_malloc_r+0x28c>
 8006172:	f104 0108 	add.w	r1, r4, #8
 8006176:	4630      	mov	r0, r6
 8006178:	f7ff faf4 	bl	8005764 <_free_r>
 800617c:	f8da 1000 	ldr.w	r1, [sl]
 8006180:	e6ee      	b.n	8005f60 <_malloc_r+0x2d0>
 8006182:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006186:	d804      	bhi.n	8006192 <_malloc_r+0x502>
 8006188:	0bda      	lsrs	r2, r3, #15
 800618a:	3277      	adds	r2, #119	; 0x77
 800618c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8006190:	e72d      	b.n	8005fee <_malloc_r+0x35e>
 8006192:	f240 5154 	movw	r1, #1364	; 0x554
 8006196:	428a      	cmp	r2, r1
 8006198:	d804      	bhi.n	80061a4 <_malloc_r+0x514>
 800619a:	0c9a      	lsrs	r2, r3, #18
 800619c:	327c      	adds	r2, #124	; 0x7c
 800619e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80061a2:	e724      	b.n	8005fee <_malloc_r+0x35e>
 80061a4:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 80061a8:	227e      	movs	r2, #126	; 0x7e
 80061aa:	e720      	b.n	8005fee <_malloc_r+0x35e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	e78b      	b.n	80060c8 <_malloc_r+0x438>
 80061b0:	2000062c 	.word	0x2000062c

080061b4 <memchr>:
 80061b4:	0783      	lsls	r3, r0, #30
 80061b6:	b470      	push	{r4, r5, r6}
 80061b8:	b2c9      	uxtb	r1, r1
 80061ba:	d040      	beq.n	800623e <memchr+0x8a>
 80061bc:	1e54      	subs	r4, r2, #1
 80061be:	2a00      	cmp	r2, #0
 80061c0:	d03f      	beq.n	8006242 <memchr+0x8e>
 80061c2:	7803      	ldrb	r3, [r0, #0]
 80061c4:	428b      	cmp	r3, r1
 80061c6:	bf18      	it	ne
 80061c8:	1c43      	addne	r3, r0, #1
 80061ca:	d106      	bne.n	80061da <memchr+0x26>
 80061cc:	e01d      	b.n	800620a <memchr+0x56>
 80061ce:	b1f4      	cbz	r4, 800620e <memchr+0x5a>
 80061d0:	7802      	ldrb	r2, [r0, #0]
 80061d2:	428a      	cmp	r2, r1
 80061d4:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80061d8:	d017      	beq.n	800620a <memchr+0x56>
 80061da:	f013 0f03 	tst.w	r3, #3
 80061de:	4618      	mov	r0, r3
 80061e0:	f103 0301 	add.w	r3, r3, #1
 80061e4:	d1f3      	bne.n	80061ce <memchr+0x1a>
 80061e6:	2c03      	cmp	r4, #3
 80061e8:	d814      	bhi.n	8006214 <memchr+0x60>
 80061ea:	b184      	cbz	r4, 800620e <memchr+0x5a>
 80061ec:	7803      	ldrb	r3, [r0, #0]
 80061ee:	428b      	cmp	r3, r1
 80061f0:	d00b      	beq.n	800620a <memchr+0x56>
 80061f2:	1905      	adds	r5, r0, r4
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	e002      	b.n	80061fe <memchr+0x4a>
 80061f8:	7802      	ldrb	r2, [r0, #0]
 80061fa:	428a      	cmp	r2, r1
 80061fc:	d005      	beq.n	800620a <memchr+0x56>
 80061fe:	42ab      	cmp	r3, r5
 8006200:	4618      	mov	r0, r3
 8006202:	f103 0301 	add.w	r3, r3, #1
 8006206:	d1f7      	bne.n	80061f8 <memchr+0x44>
 8006208:	2000      	movs	r0, #0
 800620a:	bc70      	pop	{r4, r5, r6}
 800620c:	4770      	bx	lr
 800620e:	4620      	mov	r0, r4
 8006210:	bc70      	pop	{r4, r5, r6}
 8006212:	4770      	bx	lr
 8006214:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8006218:	4602      	mov	r2, r0
 800621a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800621e:	4610      	mov	r0, r2
 8006220:	3204      	adds	r2, #4
 8006222:	6803      	ldr	r3, [r0, #0]
 8006224:	4073      	eors	r3, r6
 8006226:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800622a:	ea25 0303 	bic.w	r3, r5, r3
 800622e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8006232:	d1da      	bne.n	80061ea <memchr+0x36>
 8006234:	3c04      	subs	r4, #4
 8006236:	2c03      	cmp	r4, #3
 8006238:	4610      	mov	r0, r2
 800623a:	d8f0      	bhi.n	800621e <memchr+0x6a>
 800623c:	e7d5      	b.n	80061ea <memchr+0x36>
 800623e:	4614      	mov	r4, r2
 8006240:	e7d1      	b.n	80061e6 <memchr+0x32>
 8006242:	4610      	mov	r0, r2
 8006244:	e7e1      	b.n	800620a <memchr+0x56>
 8006246:	bf00      	nop

08006248 <memmove>:
 8006248:	4288      	cmp	r0, r1
 800624a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800624c:	d90d      	bls.n	800626a <memmove+0x22>
 800624e:	188b      	adds	r3, r1, r2
 8006250:	4298      	cmp	r0, r3
 8006252:	d20a      	bcs.n	800626a <memmove+0x22>
 8006254:	1881      	adds	r1, r0, r2
 8006256:	2a00      	cmp	r2, #0
 8006258:	d054      	beq.n	8006304 <memmove+0xbc>
 800625a:	1a9a      	subs	r2, r3, r2
 800625c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006260:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006264:	4293      	cmp	r3, r2
 8006266:	d1f9      	bne.n	800625c <memmove+0x14>
 8006268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800626a:	2a0f      	cmp	r2, #15
 800626c:	d948      	bls.n	8006300 <memmove+0xb8>
 800626e:	ea40 0301 	orr.w	r3, r0, r1
 8006272:	079b      	lsls	r3, r3, #30
 8006274:	d147      	bne.n	8006306 <memmove+0xbe>
 8006276:	f100 0410 	add.w	r4, r0, #16
 800627a:	f101 0310 	add.w	r3, r1, #16
 800627e:	4615      	mov	r5, r2
 8006280:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8006284:	f844 6c10 	str.w	r6, [r4, #-16]
 8006288:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800628c:	f844 6c0c 	str.w	r6, [r4, #-12]
 8006290:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8006294:	f844 6c08 	str.w	r6, [r4, #-8]
 8006298:	3d10      	subs	r5, #16
 800629a:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800629e:	f844 6c04 	str.w	r6, [r4, #-4]
 80062a2:	2d0f      	cmp	r5, #15
 80062a4:	f103 0310 	add.w	r3, r3, #16
 80062a8:	f104 0410 	add.w	r4, r4, #16
 80062ac:	d8e8      	bhi.n	8006280 <memmove+0x38>
 80062ae:	f1a2 0310 	sub.w	r3, r2, #16
 80062b2:	f023 030f 	bic.w	r3, r3, #15
 80062b6:	f002 0e0f 	and.w	lr, r2, #15
 80062ba:	3310      	adds	r3, #16
 80062bc:	f1be 0f03 	cmp.w	lr, #3
 80062c0:	4419      	add	r1, r3
 80062c2:	4403      	add	r3, r0
 80062c4:	d921      	bls.n	800630a <memmove+0xc2>
 80062c6:	1f1e      	subs	r6, r3, #4
 80062c8:	460d      	mov	r5, r1
 80062ca:	4674      	mov	r4, lr
 80062cc:	3c04      	subs	r4, #4
 80062ce:	f855 7b04 	ldr.w	r7, [r5], #4
 80062d2:	f846 7f04 	str.w	r7, [r6, #4]!
 80062d6:	2c03      	cmp	r4, #3
 80062d8:	d8f8      	bhi.n	80062cc <memmove+0x84>
 80062da:	f1ae 0404 	sub.w	r4, lr, #4
 80062de:	f024 0403 	bic.w	r4, r4, #3
 80062e2:	3404      	adds	r4, #4
 80062e4:	4423      	add	r3, r4
 80062e6:	4421      	add	r1, r4
 80062e8:	f002 0203 	and.w	r2, r2, #3
 80062ec:	b152      	cbz	r2, 8006304 <memmove+0xbc>
 80062ee:	3b01      	subs	r3, #1
 80062f0:	440a      	add	r2, r1
 80062f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062fa:	4291      	cmp	r1, r2
 80062fc:	d1f9      	bne.n	80062f2 <memmove+0xaa>
 80062fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006300:	4603      	mov	r3, r0
 8006302:	e7f3      	b.n	80062ec <memmove+0xa4>
 8006304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006306:	4603      	mov	r3, r0
 8006308:	e7f1      	b.n	80062ee <memmove+0xa6>
 800630a:	4672      	mov	r2, lr
 800630c:	e7ee      	b.n	80062ec <memmove+0xa4>
 800630e:	bf00      	nop

08006310 <__malloc_lock>:
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop

08006314 <__malloc_unlock>:
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop

08006318 <_putc_r>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	460d      	mov	r5, r1
 800631c:	4614      	mov	r4, r2
 800631e:	4606      	mov	r6, r0
 8006320:	b108      	cbz	r0, 8006326 <_putc_r+0xe>
 8006322:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006324:	b1d3      	cbz	r3, 800635c <_putc_r+0x44>
 8006326:	68a3      	ldr	r3, [r4, #8]
 8006328:	3b01      	subs	r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	60a3      	str	r3, [r4, #8]
 800632e:	db06      	blt.n	800633e <_putc_r+0x26>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	701d      	strb	r5, [r3, #0]
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	6022      	str	r2, [r4, #0]
 800633a:	7818      	ldrb	r0, [r3, #0]
 800633c:	bd70      	pop	{r4, r5, r6, pc}
 800633e:	69a2      	ldr	r2, [r4, #24]
 8006340:	4293      	cmp	r3, r2
 8006342:	db0e      	blt.n	8006362 <_putc_r+0x4a>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	701d      	strb	r5, [r3, #0]
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	7819      	ldrb	r1, [r3, #0]
 800634c:	290a      	cmp	r1, #10
 800634e:	d1f2      	bne.n	8006336 <_putc_r+0x1e>
 8006350:	4630      	mov	r0, r6
 8006352:	4622      	mov	r2, r4
 8006354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006358:	f000 ba42 	b.w	80067e0 <__swbuf_r>
 800635c:	f7ff f994 	bl	8005688 <__sinit>
 8006360:	e7e1      	b.n	8006326 <_putc_r+0xe>
 8006362:	4630      	mov	r0, r6
 8006364:	4629      	mov	r1, r5
 8006366:	4622      	mov	r2, r4
 8006368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800636c:	f000 ba38 	b.w	80067e0 <__swbuf_r>

08006370 <_realloc_r>:
 8006370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006374:	4617      	mov	r7, r2
 8006376:	b083      	sub	sp, #12
 8006378:	460e      	mov	r6, r1
 800637a:	2900      	cmp	r1, #0
 800637c:	f000 80e7 	beq.w	800654e <_realloc_r+0x1de>
 8006380:	4681      	mov	r9, r0
 8006382:	f107 050b 	add.w	r5, r7, #11
 8006386:	f7ff ffc3 	bl	8006310 <__malloc_lock>
 800638a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800638e:	2d16      	cmp	r5, #22
 8006390:	f023 0403 	bic.w	r4, r3, #3
 8006394:	f1a6 0808 	sub.w	r8, r6, #8
 8006398:	d84c      	bhi.n	8006434 <_realloc_r+0xc4>
 800639a:	2210      	movs	r2, #16
 800639c:	4615      	mov	r5, r2
 800639e:	42af      	cmp	r7, r5
 80063a0:	d84d      	bhi.n	800643e <_realloc_r+0xce>
 80063a2:	4294      	cmp	r4, r2
 80063a4:	f280 8084 	bge.w	80064b0 <_realloc_r+0x140>
 80063a8:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8006758 <_realloc_r+0x3e8>
 80063ac:	f8db 0008 	ldr.w	r0, [fp, #8]
 80063b0:	eb08 0104 	add.w	r1, r8, r4
 80063b4:	4288      	cmp	r0, r1
 80063b6:	f000 80d6 	beq.w	8006566 <_realloc_r+0x1f6>
 80063ba:	6848      	ldr	r0, [r1, #4]
 80063bc:	f020 0e01 	bic.w	lr, r0, #1
 80063c0:	448e      	add	lr, r1
 80063c2:	f8de e004 	ldr.w	lr, [lr, #4]
 80063c6:	f01e 0f01 	tst.w	lr, #1
 80063ca:	d13f      	bne.n	800644c <_realloc_r+0xdc>
 80063cc:	f020 0003 	bic.w	r0, r0, #3
 80063d0:	4420      	add	r0, r4
 80063d2:	4290      	cmp	r0, r2
 80063d4:	f280 80c1 	bge.w	800655a <_realloc_r+0x1ea>
 80063d8:	07db      	lsls	r3, r3, #31
 80063da:	f100 808f 	bmi.w	80064fc <_realloc_r+0x18c>
 80063de:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80063e2:	ebc3 0a08 	rsb	sl, r3, r8
 80063e6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80063ea:	f023 0303 	bic.w	r3, r3, #3
 80063ee:	eb00 0e03 	add.w	lr, r0, r3
 80063f2:	4596      	cmp	lr, r2
 80063f4:	db34      	blt.n	8006460 <_realloc_r+0xf0>
 80063f6:	68cb      	ldr	r3, [r1, #12]
 80063f8:	688a      	ldr	r2, [r1, #8]
 80063fa:	4657      	mov	r7, sl
 80063fc:	60d3      	str	r3, [r2, #12]
 80063fe:	609a      	str	r2, [r3, #8]
 8006400:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8006404:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006408:	60cb      	str	r3, [r1, #12]
 800640a:	1f22      	subs	r2, r4, #4
 800640c:	2a24      	cmp	r2, #36	; 0x24
 800640e:	6099      	str	r1, [r3, #8]
 8006410:	f200 8136 	bhi.w	8006680 <_realloc_r+0x310>
 8006414:	2a13      	cmp	r2, #19
 8006416:	f240 80fd 	bls.w	8006614 <_realloc_r+0x2a4>
 800641a:	6833      	ldr	r3, [r6, #0]
 800641c:	f8ca 3008 	str.w	r3, [sl, #8]
 8006420:	6873      	ldr	r3, [r6, #4]
 8006422:	f8ca 300c 	str.w	r3, [sl, #12]
 8006426:	2a1b      	cmp	r2, #27
 8006428:	f200 8140 	bhi.w	80066ac <_realloc_r+0x33c>
 800642c:	3608      	adds	r6, #8
 800642e:	f10a 0310 	add.w	r3, sl, #16
 8006432:	e0f0      	b.n	8006616 <_realloc_r+0x2a6>
 8006434:	f025 0507 	bic.w	r5, r5, #7
 8006438:	2d00      	cmp	r5, #0
 800643a:	462a      	mov	r2, r5
 800643c:	daaf      	bge.n	800639e <_realloc_r+0x2e>
 800643e:	230c      	movs	r3, #12
 8006440:	2000      	movs	r0, #0
 8006442:	f8c9 3000 	str.w	r3, [r9]
 8006446:	b003      	add	sp, #12
 8006448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644c:	07d9      	lsls	r1, r3, #31
 800644e:	d455      	bmi.n	80064fc <_realloc_r+0x18c>
 8006450:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8006454:	ebc3 0a08 	rsb	sl, r3, r8
 8006458:	f8da 3004 	ldr.w	r3, [sl, #4]
 800645c:	f023 0303 	bic.w	r3, r3, #3
 8006460:	4423      	add	r3, r4
 8006462:	4293      	cmp	r3, r2
 8006464:	db4a      	blt.n	80064fc <_realloc_r+0x18c>
 8006466:	4657      	mov	r7, sl
 8006468:	f8da 100c 	ldr.w	r1, [sl, #12]
 800646c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8006470:	1f22      	subs	r2, r4, #4
 8006472:	2a24      	cmp	r2, #36	; 0x24
 8006474:	60c1      	str	r1, [r0, #12]
 8006476:	6088      	str	r0, [r1, #8]
 8006478:	f200 810e 	bhi.w	8006698 <_realloc_r+0x328>
 800647c:	2a13      	cmp	r2, #19
 800647e:	f240 8109 	bls.w	8006694 <_realloc_r+0x324>
 8006482:	6831      	ldr	r1, [r6, #0]
 8006484:	f8ca 1008 	str.w	r1, [sl, #8]
 8006488:	6871      	ldr	r1, [r6, #4]
 800648a:	f8ca 100c 	str.w	r1, [sl, #12]
 800648e:	2a1b      	cmp	r2, #27
 8006490:	f200 8121 	bhi.w	80066d6 <_realloc_r+0x366>
 8006494:	3608      	adds	r6, #8
 8006496:	f10a 0210 	add.w	r2, sl, #16
 800649a:	6831      	ldr	r1, [r6, #0]
 800649c:	6011      	str	r1, [r2, #0]
 800649e:	6871      	ldr	r1, [r6, #4]
 80064a0:	6051      	str	r1, [r2, #4]
 80064a2:	68b1      	ldr	r1, [r6, #8]
 80064a4:	6091      	str	r1, [r2, #8]
 80064a6:	461c      	mov	r4, r3
 80064a8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80064ac:	463e      	mov	r6, r7
 80064ae:	46d0      	mov	r8, sl
 80064b0:	1b62      	subs	r2, r4, r5
 80064b2:	2a0f      	cmp	r2, #15
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	d80e      	bhi.n	80064d8 <_realloc_r+0x168>
 80064ba:	4323      	orrs	r3, r4
 80064bc:	4444      	add	r4, r8
 80064be:	f8c8 3004 	str.w	r3, [r8, #4]
 80064c2:	6863      	ldr	r3, [r4, #4]
 80064c4:	f043 0301 	orr.w	r3, r3, #1
 80064c8:	6063      	str	r3, [r4, #4]
 80064ca:	4648      	mov	r0, r9
 80064cc:	f7ff ff22 	bl	8006314 <__malloc_unlock>
 80064d0:	4630      	mov	r0, r6
 80064d2:	b003      	add	sp, #12
 80064d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d8:	eb08 0105 	add.w	r1, r8, r5
 80064dc:	431d      	orrs	r5, r3
 80064de:	f042 0301 	orr.w	r3, r2, #1
 80064e2:	440a      	add	r2, r1
 80064e4:	f8c8 5004 	str.w	r5, [r8, #4]
 80064e8:	604b      	str	r3, [r1, #4]
 80064ea:	6853      	ldr	r3, [r2, #4]
 80064ec:	f043 0301 	orr.w	r3, r3, #1
 80064f0:	3108      	adds	r1, #8
 80064f2:	6053      	str	r3, [r2, #4]
 80064f4:	4648      	mov	r0, r9
 80064f6:	f7ff f935 	bl	8005764 <_free_r>
 80064fa:	e7e6      	b.n	80064ca <_realloc_r+0x15a>
 80064fc:	4639      	mov	r1, r7
 80064fe:	4648      	mov	r0, r9
 8006500:	f7ff fbc6 	bl	8005c90 <_malloc_r>
 8006504:	4607      	mov	r7, r0
 8006506:	b1d8      	cbz	r0, 8006540 <_realloc_r+0x1d0>
 8006508:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800650c:	f023 0201 	bic.w	r2, r3, #1
 8006510:	4442      	add	r2, r8
 8006512:	f1a0 0108 	sub.w	r1, r0, #8
 8006516:	4291      	cmp	r1, r2
 8006518:	f000 80ac 	beq.w	8006674 <_realloc_r+0x304>
 800651c:	1f22      	subs	r2, r4, #4
 800651e:	2a24      	cmp	r2, #36	; 0x24
 8006520:	f200 8099 	bhi.w	8006656 <_realloc_r+0x2e6>
 8006524:	2a13      	cmp	r2, #19
 8006526:	d86a      	bhi.n	80065fe <_realloc_r+0x28e>
 8006528:	4603      	mov	r3, r0
 800652a:	4632      	mov	r2, r6
 800652c:	6811      	ldr	r1, [r2, #0]
 800652e:	6019      	str	r1, [r3, #0]
 8006530:	6851      	ldr	r1, [r2, #4]
 8006532:	6059      	str	r1, [r3, #4]
 8006534:	6892      	ldr	r2, [r2, #8]
 8006536:	609a      	str	r2, [r3, #8]
 8006538:	4631      	mov	r1, r6
 800653a:	4648      	mov	r0, r9
 800653c:	f7ff f912 	bl	8005764 <_free_r>
 8006540:	4648      	mov	r0, r9
 8006542:	f7ff fee7 	bl	8006314 <__malloc_unlock>
 8006546:	4638      	mov	r0, r7
 8006548:	b003      	add	sp, #12
 800654a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654e:	4611      	mov	r1, r2
 8006550:	b003      	add	sp, #12
 8006552:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006556:	f7ff bb9b 	b.w	8005c90 <_malloc_r>
 800655a:	68ca      	ldr	r2, [r1, #12]
 800655c:	6889      	ldr	r1, [r1, #8]
 800655e:	4604      	mov	r4, r0
 8006560:	60ca      	str	r2, [r1, #12]
 8006562:	6091      	str	r1, [r2, #8]
 8006564:	e7a4      	b.n	80064b0 <_realloc_r+0x140>
 8006566:	6841      	ldr	r1, [r0, #4]
 8006568:	f021 0103 	bic.w	r1, r1, #3
 800656c:	4421      	add	r1, r4
 800656e:	f105 0010 	add.w	r0, r5, #16
 8006572:	4281      	cmp	r1, r0
 8006574:	da5b      	bge.n	800662e <_realloc_r+0x2be>
 8006576:	07db      	lsls	r3, r3, #31
 8006578:	d4c0      	bmi.n	80064fc <_realloc_r+0x18c>
 800657a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800657e:	ebc3 0a08 	rsb	sl, r3, r8
 8006582:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	eb01 0c03 	add.w	ip, r1, r3
 800658e:	4560      	cmp	r0, ip
 8006590:	f73f af66 	bgt.w	8006460 <_realloc_r+0xf0>
 8006594:	4657      	mov	r7, sl
 8006596:	f8da 300c 	ldr.w	r3, [sl, #12]
 800659a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800659e:	1f22      	subs	r2, r4, #4
 80065a0:	2a24      	cmp	r2, #36	; 0x24
 80065a2:	60cb      	str	r3, [r1, #12]
 80065a4:	6099      	str	r1, [r3, #8]
 80065a6:	f200 80b8 	bhi.w	800671a <_realloc_r+0x3aa>
 80065aa:	2a13      	cmp	r2, #19
 80065ac:	f240 80a9 	bls.w	8006702 <_realloc_r+0x392>
 80065b0:	6833      	ldr	r3, [r6, #0]
 80065b2:	f8ca 3008 	str.w	r3, [sl, #8]
 80065b6:	6873      	ldr	r3, [r6, #4]
 80065b8:	f8ca 300c 	str.w	r3, [sl, #12]
 80065bc:	2a1b      	cmp	r2, #27
 80065be:	f200 80b5 	bhi.w	800672c <_realloc_r+0x3bc>
 80065c2:	3608      	adds	r6, #8
 80065c4:	f10a 0310 	add.w	r3, sl, #16
 80065c8:	6832      	ldr	r2, [r6, #0]
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	6872      	ldr	r2, [r6, #4]
 80065ce:	605a      	str	r2, [r3, #4]
 80065d0:	68b2      	ldr	r2, [r6, #8]
 80065d2:	609a      	str	r2, [r3, #8]
 80065d4:	eb0a 0205 	add.w	r2, sl, r5
 80065d8:	ebc5 030c 	rsb	r3, r5, ip
 80065dc:	f043 0301 	orr.w	r3, r3, #1
 80065e0:	f8cb 2008 	str.w	r2, [fp, #8]
 80065e4:	6053      	str	r3, [r2, #4]
 80065e6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	431d      	orrs	r5, r3
 80065f0:	4648      	mov	r0, r9
 80065f2:	f8ca 5004 	str.w	r5, [sl, #4]
 80065f6:	f7ff fe8d 	bl	8006314 <__malloc_unlock>
 80065fa:	4638      	mov	r0, r7
 80065fc:	e769      	b.n	80064d2 <_realloc_r+0x162>
 80065fe:	6833      	ldr	r3, [r6, #0]
 8006600:	6003      	str	r3, [r0, #0]
 8006602:	6873      	ldr	r3, [r6, #4]
 8006604:	6043      	str	r3, [r0, #4]
 8006606:	2a1b      	cmp	r2, #27
 8006608:	d829      	bhi.n	800665e <_realloc_r+0x2ee>
 800660a:	f100 0308 	add.w	r3, r0, #8
 800660e:	f106 0208 	add.w	r2, r6, #8
 8006612:	e78b      	b.n	800652c <_realloc_r+0x1bc>
 8006614:	463b      	mov	r3, r7
 8006616:	6832      	ldr	r2, [r6, #0]
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	6872      	ldr	r2, [r6, #4]
 800661c:	605a      	str	r2, [r3, #4]
 800661e:	68b2      	ldr	r2, [r6, #8]
 8006620:	609a      	str	r2, [r3, #8]
 8006622:	463e      	mov	r6, r7
 8006624:	4674      	mov	r4, lr
 8006626:	f8da 3004 	ldr.w	r3, [sl, #4]
 800662a:	46d0      	mov	r8, sl
 800662c:	e740      	b.n	80064b0 <_realloc_r+0x140>
 800662e:	eb08 0205 	add.w	r2, r8, r5
 8006632:	1b4b      	subs	r3, r1, r5
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	f8cb 2008 	str.w	r2, [fp, #8]
 800663c:	6053      	str	r3, [r2, #4]
 800663e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	431d      	orrs	r5, r3
 8006648:	4648      	mov	r0, r9
 800664a:	f846 5c04 	str.w	r5, [r6, #-4]
 800664e:	f7ff fe61 	bl	8006314 <__malloc_unlock>
 8006652:	4630      	mov	r0, r6
 8006654:	e73d      	b.n	80064d2 <_realloc_r+0x162>
 8006656:	4631      	mov	r1, r6
 8006658:	f7ff fdf6 	bl	8006248 <memmove>
 800665c:	e76c      	b.n	8006538 <_realloc_r+0x1c8>
 800665e:	68b3      	ldr	r3, [r6, #8]
 8006660:	6083      	str	r3, [r0, #8]
 8006662:	68f3      	ldr	r3, [r6, #12]
 8006664:	60c3      	str	r3, [r0, #12]
 8006666:	2a24      	cmp	r2, #36	; 0x24
 8006668:	d02c      	beq.n	80066c4 <_realloc_r+0x354>
 800666a:	f100 0310 	add.w	r3, r0, #16
 800666e:	f106 0210 	add.w	r2, r6, #16
 8006672:	e75b      	b.n	800652c <_realloc_r+0x1bc>
 8006674:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006678:	f022 0203 	bic.w	r2, r2, #3
 800667c:	4414      	add	r4, r2
 800667e:	e717      	b.n	80064b0 <_realloc_r+0x140>
 8006680:	4631      	mov	r1, r6
 8006682:	4638      	mov	r0, r7
 8006684:	4674      	mov	r4, lr
 8006686:	463e      	mov	r6, r7
 8006688:	f7ff fdde 	bl	8006248 <memmove>
 800668c:	46d0      	mov	r8, sl
 800668e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006692:	e70d      	b.n	80064b0 <_realloc_r+0x140>
 8006694:	463a      	mov	r2, r7
 8006696:	e700      	b.n	800649a <_realloc_r+0x12a>
 8006698:	4631      	mov	r1, r6
 800669a:	4638      	mov	r0, r7
 800669c:	461c      	mov	r4, r3
 800669e:	463e      	mov	r6, r7
 80066a0:	f7ff fdd2 	bl	8006248 <memmove>
 80066a4:	46d0      	mov	r8, sl
 80066a6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80066aa:	e701      	b.n	80064b0 <_realloc_r+0x140>
 80066ac:	68b3      	ldr	r3, [r6, #8]
 80066ae:	f8ca 3010 	str.w	r3, [sl, #16]
 80066b2:	68f3      	ldr	r3, [r6, #12]
 80066b4:	f8ca 3014 	str.w	r3, [sl, #20]
 80066b8:	2a24      	cmp	r2, #36	; 0x24
 80066ba:	d018      	beq.n	80066ee <_realloc_r+0x37e>
 80066bc:	3610      	adds	r6, #16
 80066be:	f10a 0318 	add.w	r3, sl, #24
 80066c2:	e7a8      	b.n	8006616 <_realloc_r+0x2a6>
 80066c4:	6933      	ldr	r3, [r6, #16]
 80066c6:	6103      	str	r3, [r0, #16]
 80066c8:	6973      	ldr	r3, [r6, #20]
 80066ca:	6143      	str	r3, [r0, #20]
 80066cc:	f106 0218 	add.w	r2, r6, #24
 80066d0:	f100 0318 	add.w	r3, r0, #24
 80066d4:	e72a      	b.n	800652c <_realloc_r+0x1bc>
 80066d6:	68b1      	ldr	r1, [r6, #8]
 80066d8:	f8ca 1010 	str.w	r1, [sl, #16]
 80066dc:	68f1      	ldr	r1, [r6, #12]
 80066de:	f8ca 1014 	str.w	r1, [sl, #20]
 80066e2:	2a24      	cmp	r2, #36	; 0x24
 80066e4:	d00f      	beq.n	8006706 <_realloc_r+0x396>
 80066e6:	3610      	adds	r6, #16
 80066e8:	f10a 0218 	add.w	r2, sl, #24
 80066ec:	e6d5      	b.n	800649a <_realloc_r+0x12a>
 80066ee:	6933      	ldr	r3, [r6, #16]
 80066f0:	f8ca 3018 	str.w	r3, [sl, #24]
 80066f4:	6973      	ldr	r3, [r6, #20]
 80066f6:	f8ca 301c 	str.w	r3, [sl, #28]
 80066fa:	3618      	adds	r6, #24
 80066fc:	f10a 0320 	add.w	r3, sl, #32
 8006700:	e789      	b.n	8006616 <_realloc_r+0x2a6>
 8006702:	463b      	mov	r3, r7
 8006704:	e760      	b.n	80065c8 <_realloc_r+0x258>
 8006706:	6932      	ldr	r2, [r6, #16]
 8006708:	f8ca 2018 	str.w	r2, [sl, #24]
 800670c:	6972      	ldr	r2, [r6, #20]
 800670e:	f8ca 201c 	str.w	r2, [sl, #28]
 8006712:	3618      	adds	r6, #24
 8006714:	f10a 0220 	add.w	r2, sl, #32
 8006718:	e6bf      	b.n	800649a <_realloc_r+0x12a>
 800671a:	4631      	mov	r1, r6
 800671c:	4638      	mov	r0, r7
 800671e:	f8cd c004 	str.w	ip, [sp, #4]
 8006722:	f7ff fd91 	bl	8006248 <memmove>
 8006726:	f8dd c004 	ldr.w	ip, [sp, #4]
 800672a:	e753      	b.n	80065d4 <_realloc_r+0x264>
 800672c:	68b3      	ldr	r3, [r6, #8]
 800672e:	f8ca 3010 	str.w	r3, [sl, #16]
 8006732:	68f3      	ldr	r3, [r6, #12]
 8006734:	f8ca 3014 	str.w	r3, [sl, #20]
 8006738:	2a24      	cmp	r2, #36	; 0x24
 800673a:	d003      	beq.n	8006744 <_realloc_r+0x3d4>
 800673c:	3610      	adds	r6, #16
 800673e:	f10a 0318 	add.w	r3, sl, #24
 8006742:	e741      	b.n	80065c8 <_realloc_r+0x258>
 8006744:	6933      	ldr	r3, [r6, #16]
 8006746:	f8ca 3018 	str.w	r3, [sl, #24]
 800674a:	6973      	ldr	r3, [r6, #20]
 800674c:	f8ca 301c 	str.w	r3, [sl, #28]
 8006750:	3618      	adds	r6, #24
 8006752:	f10a 0320 	add.w	r3, sl, #32
 8006756:	e737      	b.n	80065c8 <_realloc_r+0x258>
 8006758:	2000062c 	.word	0x2000062c

0800675c <__sread>:
 800675c:	b510      	push	{r4, lr}
 800675e:	460c      	mov	r4, r1
 8006760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006764:	f7fa f998 	bl	8000a98 <_read_r>
 8006768:	2800      	cmp	r0, #0
 800676a:	db03      	blt.n	8006774 <__sread+0x18>
 800676c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800676e:	4403      	add	r3, r0
 8006770:	6523      	str	r3, [r4, #80]	; 0x50
 8006772:	bd10      	pop	{r4, pc}
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800677a:	81a3      	strh	r3, [r4, #12]
 800677c:	bd10      	pop	{r4, pc}
 800677e:	bf00      	nop

08006780 <__swrite>:
 8006780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006784:	4616      	mov	r6, r2
 8006786:	898a      	ldrh	r2, [r1, #12]
 8006788:	461d      	mov	r5, r3
 800678a:	05d3      	lsls	r3, r2, #23
 800678c:	460c      	mov	r4, r1
 800678e:	4607      	mov	r7, r0
 8006790:	d506      	bpl.n	80067a0 <__swrite+0x20>
 8006792:	2200      	movs	r2, #0
 8006794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006798:	2302      	movs	r3, #2
 800679a:	f7fa f8ad 	bl	80008f8 <_lseek_r>
 800679e:	89a2      	ldrh	r2, [r4, #12]
 80067a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067a8:	81a2      	strh	r2, [r4, #12]
 80067aa:	4638      	mov	r0, r7
 80067ac:	4632      	mov	r2, r6
 80067ae:	462b      	mov	r3, r5
 80067b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067b4:	f7fa b9fa 	b.w	8000bac <_write_r>

080067b8 <__sseek>:
 80067b8:	b510      	push	{r4, lr}
 80067ba:	460c      	mov	r4, r1
 80067bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c0:	f7fa f89a 	bl	80008f8 <_lseek_r>
 80067c4:	89a3      	ldrh	r3, [r4, #12]
 80067c6:	1c42      	adds	r2, r0, #1
 80067c8:	bf0e      	itee	eq
 80067ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067d2:	6520      	strne	r0, [r4, #80]	; 0x50
 80067d4:	81a3      	strh	r3, [r4, #12]
 80067d6:	bd10      	pop	{r4, pc}

080067d8 <__sclose>:
 80067d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067dc:	f7fa b882 	b.w	80008e4 <_close_r>

080067e0 <__swbuf_r>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	460d      	mov	r5, r1
 80067e4:	4614      	mov	r4, r2
 80067e6:	4606      	mov	r6, r0
 80067e8:	b110      	cbz	r0, 80067f0 <__swbuf_r+0x10>
 80067ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d048      	beq.n	8006882 <__swbuf_r+0xa2>
 80067f0:	89a2      	ldrh	r2, [r4, #12]
 80067f2:	69a3      	ldr	r3, [r4, #24]
 80067f4:	60a3      	str	r3, [r4, #8]
 80067f6:	b291      	uxth	r1, r2
 80067f8:	0708      	lsls	r0, r1, #28
 80067fa:	d538      	bpl.n	800686e <__swbuf_r+0x8e>
 80067fc:	6923      	ldr	r3, [r4, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d035      	beq.n	800686e <__swbuf_r+0x8e>
 8006802:	0489      	lsls	r1, r1, #18
 8006804:	b2ed      	uxtb	r5, r5
 8006806:	d515      	bpl.n	8006834 <__swbuf_r+0x54>
 8006808:	6822      	ldr	r2, [r4, #0]
 800680a:	6961      	ldr	r1, [r4, #20]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	428b      	cmp	r3, r1
 8006810:	da1c      	bge.n	800684c <__swbuf_r+0x6c>
 8006812:	3301      	adds	r3, #1
 8006814:	68a1      	ldr	r1, [r4, #8]
 8006816:	1c50      	adds	r0, r2, #1
 8006818:	3901      	subs	r1, #1
 800681a:	60a1      	str	r1, [r4, #8]
 800681c:	6020      	str	r0, [r4, #0]
 800681e:	7015      	strb	r5, [r2, #0]
 8006820:	6962      	ldr	r2, [r4, #20]
 8006822:	429a      	cmp	r2, r3
 8006824:	d01a      	beq.n	800685c <__swbuf_r+0x7c>
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	07db      	lsls	r3, r3, #31
 800682a:	d501      	bpl.n	8006830 <__swbuf_r+0x50>
 800682c:	2d0a      	cmp	r5, #10
 800682e:	d015      	beq.n	800685c <__swbuf_r+0x7c>
 8006830:	4628      	mov	r0, r5
 8006832:	bd70      	pop	{r4, r5, r6, pc}
 8006834:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006836:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800683a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800683e:	81a2      	strh	r2, [r4, #12]
 8006840:	6822      	ldr	r2, [r4, #0]
 8006842:	6661      	str	r1, [r4, #100]	; 0x64
 8006844:	6961      	ldr	r1, [r4, #20]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	428b      	cmp	r3, r1
 800684a:	dbe2      	blt.n	8006812 <__swbuf_r+0x32>
 800684c:	4630      	mov	r0, r6
 800684e:	4621      	mov	r1, r4
 8006850:	f7fe fe86 	bl	8005560 <_fflush_r>
 8006854:	b940      	cbnz	r0, 8006868 <__swbuf_r+0x88>
 8006856:	6822      	ldr	r2, [r4, #0]
 8006858:	2301      	movs	r3, #1
 800685a:	e7db      	b.n	8006814 <__swbuf_r+0x34>
 800685c:	4630      	mov	r0, r6
 800685e:	4621      	mov	r1, r4
 8006860:	f7fe fe7e 	bl	8005560 <_fflush_r>
 8006864:	2800      	cmp	r0, #0
 8006866:	d0e3      	beq.n	8006830 <__swbuf_r+0x50>
 8006868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800686c:	bd70      	pop	{r4, r5, r6, pc}
 800686e:	4630      	mov	r0, r6
 8006870:	4621      	mov	r1, r4
 8006872:	f000 f809 	bl	8006888 <__swsetup_r>
 8006876:	2800      	cmp	r0, #0
 8006878:	d1f6      	bne.n	8006868 <__swbuf_r+0x88>
 800687a:	89a2      	ldrh	r2, [r4, #12]
 800687c:	6923      	ldr	r3, [r4, #16]
 800687e:	b291      	uxth	r1, r2
 8006880:	e7bf      	b.n	8006802 <__swbuf_r+0x22>
 8006882:	f7fe ff01 	bl	8005688 <__sinit>
 8006886:	e7b3      	b.n	80067f0 <__swbuf_r+0x10>

08006888 <__swsetup_r>:
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	4b2f      	ldr	r3, [pc, #188]	; (8006948 <__swsetup_r+0xc0>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4605      	mov	r5, r0
 8006890:	460c      	mov	r4, r1
 8006892:	b113      	cbz	r3, 800689a <__swsetup_r+0x12>
 8006894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006896:	2a00      	cmp	r2, #0
 8006898:	d036      	beq.n	8006908 <__swsetup_r+0x80>
 800689a:	89a2      	ldrh	r2, [r4, #12]
 800689c:	b293      	uxth	r3, r2
 800689e:	0718      	lsls	r0, r3, #28
 80068a0:	d50c      	bpl.n	80068bc <__swsetup_r+0x34>
 80068a2:	6920      	ldr	r0, [r4, #16]
 80068a4:	b1a8      	cbz	r0, 80068d2 <__swsetup_r+0x4a>
 80068a6:	f013 0201 	ands.w	r2, r3, #1
 80068aa:	d01e      	beq.n	80068ea <__swsetup_r+0x62>
 80068ac:	6963      	ldr	r3, [r4, #20]
 80068ae:	2200      	movs	r2, #0
 80068b0:	425b      	negs	r3, r3
 80068b2:	61a3      	str	r3, [r4, #24]
 80068b4:	60a2      	str	r2, [r4, #8]
 80068b6:	b1f0      	cbz	r0, 80068f6 <__swsetup_r+0x6e>
 80068b8:	2000      	movs	r0, #0
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	06d9      	lsls	r1, r3, #27
 80068be:	d53b      	bpl.n	8006938 <__swsetup_r+0xb0>
 80068c0:	0758      	lsls	r0, r3, #29
 80068c2:	d425      	bmi.n	8006910 <__swsetup_r+0x88>
 80068c4:	6920      	ldr	r0, [r4, #16]
 80068c6:	f042 0308 	orr.w	r3, r2, #8
 80068ca:	81a3      	strh	r3, [r4, #12]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2800      	cmp	r0, #0
 80068d0:	d1e9      	bne.n	80068a6 <__swsetup_r+0x1e>
 80068d2:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80068d6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80068da:	d0e4      	beq.n	80068a6 <__swsetup_r+0x1e>
 80068dc:	4628      	mov	r0, r5
 80068de:	4621      	mov	r1, r4
 80068e0:	f000 f8c8 	bl	8006a74 <__smakebuf_r>
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	6920      	ldr	r0, [r4, #16]
 80068e8:	e7dd      	b.n	80068a6 <__swsetup_r+0x1e>
 80068ea:	0799      	lsls	r1, r3, #30
 80068ec:	bf58      	it	pl
 80068ee:	6962      	ldrpl	r2, [r4, #20]
 80068f0:	60a2      	str	r2, [r4, #8]
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d1e0      	bne.n	80068b8 <__swsetup_r+0x30>
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	061a      	lsls	r2, r3, #24
 80068fa:	d5de      	bpl.n	80068ba <__swsetup_r+0x32>
 80068fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006900:	81a3      	strh	r3, [r4, #12]
 8006902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe febd 	bl	8005688 <__sinit>
 800690e:	e7c4      	b.n	800689a <__swsetup_r+0x12>
 8006910:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006912:	b149      	cbz	r1, 8006928 <__swsetup_r+0xa0>
 8006914:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006918:	4299      	cmp	r1, r3
 800691a:	d003      	beq.n	8006924 <__swsetup_r+0x9c>
 800691c:	4628      	mov	r0, r5
 800691e:	f7fe ff21 	bl	8005764 <_free_r>
 8006922:	89a2      	ldrh	r2, [r4, #12]
 8006924:	2300      	movs	r3, #0
 8006926:	6323      	str	r3, [r4, #48]	; 0x30
 8006928:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800692c:	2300      	movs	r3, #0
 800692e:	6920      	ldr	r0, [r4, #16]
 8006930:	6063      	str	r3, [r4, #4]
 8006932:	b292      	uxth	r2, r2
 8006934:	6020      	str	r0, [r4, #0]
 8006936:	e7c6      	b.n	80068c6 <__swsetup_r+0x3e>
 8006938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800693c:	2309      	movs	r3, #9
 800693e:	602b      	str	r3, [r5, #0]
 8006940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006944:	81a2      	strh	r2, [r4, #12]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	20000628 	.word	0x20000628

0800694c <__register_exitproc>:
 800694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	4c25      	ldr	r4, [pc, #148]	; (80069e8 <__register_exitproc+0x9c>)
 8006952:	6825      	ldr	r5, [r4, #0]
 8006954:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8006958:	4606      	mov	r6, r0
 800695a:	4688      	mov	r8, r1
 800695c:	4692      	mov	sl, r2
 800695e:	4699      	mov	r9, r3
 8006960:	b3cc      	cbz	r4, 80069d6 <__register_exitproc+0x8a>
 8006962:	6860      	ldr	r0, [r4, #4]
 8006964:	281f      	cmp	r0, #31
 8006966:	dc18      	bgt.n	800699a <__register_exitproc+0x4e>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	b17e      	cbz	r6, 800698c <__register_exitproc+0x40>
 800696c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006970:	2101      	movs	r1, #1
 8006972:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8006976:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 800697a:	fa01 f200 	lsl.w	r2, r1, r0
 800697e:	4317      	orrs	r7, r2
 8006980:	2e02      	cmp	r6, #2
 8006982:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8006986:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 800698a:	d01e      	beq.n	80069ca <__register_exitproc+0x7e>
 800698c:	3002      	adds	r0, #2
 800698e:	6063      	str	r3, [r4, #4]
 8006990:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8006994:	2000      	movs	r0, #0
 8006996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699a:	4b14      	ldr	r3, [pc, #80]	; (80069ec <__register_exitproc+0xa0>)
 800699c:	b303      	cbz	r3, 80069e0 <__register_exitproc+0x94>
 800699e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80069a2:	f7ff f96d 	bl	8005c80 <malloc>
 80069a6:	4604      	mov	r4, r0
 80069a8:	b1d0      	cbz	r0, 80069e0 <__register_exitproc+0x94>
 80069aa:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80069ae:	2700      	movs	r7, #0
 80069b0:	e880 0088 	stmia.w	r0, {r3, r7}
 80069b4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80069b8:	4638      	mov	r0, r7
 80069ba:	2301      	movs	r3, #1
 80069bc:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 80069c0:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 80069c4:	2e00      	cmp	r6, #0
 80069c6:	d0e1      	beq.n	800698c <__register_exitproc+0x40>
 80069c8:	e7d0      	b.n	800696c <__register_exitproc+0x20>
 80069ca:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 80069ce:	430a      	orrs	r2, r1
 80069d0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80069d4:	e7da      	b.n	800698c <__register_exitproc+0x40>
 80069d6:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80069da:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80069de:	e7c0      	b.n	8006962 <__register_exitproc+0x16>
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e8:	0801723c 	.word	0x0801723c
 80069ec:	08005c81 	.word	0x08005c81

080069f0 <_fclose_r>:
 80069f0:	2900      	cmp	r1, #0
 80069f2:	d03d      	beq.n	8006a70 <_fclose_r+0x80>
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	4605      	mov	r5, r0
 80069f8:	460c      	mov	r4, r1
 80069fa:	b108      	cbz	r0, 8006a00 <_fclose_r+0x10>
 80069fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80069fe:	b37b      	cbz	r3, 8006a60 <_fclose_r+0x70>
 8006a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a04:	b90b      	cbnz	r3, 8006a0a <_fclose_r+0x1a>
 8006a06:	2000      	movs	r0, #0
 8006a08:	bd70      	pop	{r4, r5, r6, pc}
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	f7fe fcfd 	bl	800540c <__sflush_r>
 8006a12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a14:	4606      	mov	r6, r0
 8006a16:	b133      	cbz	r3, 8006a26 <_fclose_r+0x36>
 8006a18:	4628      	mov	r0, r5
 8006a1a:	69e1      	ldr	r1, [r4, #28]
 8006a1c:	4798      	blx	r3
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	bfb8      	it	lt
 8006a22:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	061b      	lsls	r3, r3, #24
 8006a2a:	d41c      	bmi.n	8006a66 <_fclose_r+0x76>
 8006a2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006a2e:	b141      	cbz	r1, 8006a42 <_fclose_r+0x52>
 8006a30:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006a34:	4299      	cmp	r1, r3
 8006a36:	d002      	beq.n	8006a3e <_fclose_r+0x4e>
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f7fe fe93 	bl	8005764 <_free_r>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	6323      	str	r3, [r4, #48]	; 0x30
 8006a42:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006a44:	b121      	cbz	r1, 8006a50 <_fclose_r+0x60>
 8006a46:	4628      	mov	r0, r5
 8006a48:	f7fe fe8c 	bl	8005764 <_free_r>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	6463      	str	r3, [r4, #68]	; 0x44
 8006a50:	f7fe fe20 	bl	8005694 <__sfp_lock_acquire>
 8006a54:	2300      	movs	r3, #0
 8006a56:	81a3      	strh	r3, [r4, #12]
 8006a58:	f7fe fe1e 	bl	8005698 <__sfp_lock_release>
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
 8006a60:	f7fe fe12 	bl	8005688 <__sinit>
 8006a64:	e7cc      	b.n	8006a00 <_fclose_r+0x10>
 8006a66:	4628      	mov	r0, r5
 8006a68:	6921      	ldr	r1, [r4, #16]
 8006a6a:	f7fe fe7b 	bl	8005764 <_free_r>
 8006a6e:	e7dd      	b.n	8006a2c <_fclose_r+0x3c>
 8006a70:	2000      	movs	r0, #0
 8006a72:	4770      	bx	lr

08006a74 <__smakebuf_r>:
 8006a74:	898b      	ldrh	r3, [r1, #12]
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	f012 0f02 	tst.w	r2, #2
 8006a7c:	d13c      	bne.n	8006af8 <__smakebuf_r+0x84>
 8006a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a80:	460c      	mov	r4, r1
 8006a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a86:	2900      	cmp	r1, #0
 8006a88:	b091      	sub	sp, #68	; 0x44
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	db19      	blt.n	8006ac2 <__smakebuf_r+0x4e>
 8006a8e:	aa01      	add	r2, sp, #4
 8006a90:	f7f9 ff2b 	bl	80008ea <_fstat_r>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	db12      	blt.n	8006abe <__smakebuf_r+0x4a>
 8006a98:	9b02      	ldr	r3, [sp, #8]
 8006a9a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa2:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8006aa6:	fab7 f787 	clz	r7, r7
 8006aaa:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8006aae:	d02a      	beq.n	8006b06 <__smakebuf_r+0x92>
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006abc:	e00b      	b.n	8006ad6 <__smakebuf_r+0x62>
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ac6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006aca:	81a3      	strh	r3, [r4, #12]
 8006acc:	bf0c      	ite	eq
 8006ace:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8006ad2:	2640      	movne	r6, #64	; 0x40
 8006ad4:	2700      	movs	r7, #0
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	4631      	mov	r1, r6
 8006ada:	f7ff f8d9 	bl	8005c90 <_malloc_r>
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	b340      	cbz	r0, 8006b34 <__smakebuf_r+0xc0>
 8006ae2:	4a1a      	ldr	r2, [pc, #104]	; (8006b4c <__smakebuf_r+0xd8>)
 8006ae4:	63ea      	str	r2, [r5, #60]	; 0x3c
 8006ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aea:	81a3      	strh	r3, [r4, #12]
 8006aec:	6020      	str	r0, [r4, #0]
 8006aee:	6120      	str	r0, [r4, #16]
 8006af0:	6166      	str	r6, [r4, #20]
 8006af2:	b99f      	cbnz	r7, 8006b1c <__smakebuf_r+0xa8>
 8006af4:	b011      	add	sp, #68	; 0x44
 8006af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006af8:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8006afc:	2201      	movs	r2, #1
 8006afe:	600b      	str	r3, [r1, #0]
 8006b00:	610b      	str	r3, [r1, #16]
 8006b02:	614a      	str	r2, [r1, #20]
 8006b04:	4770      	bx	lr
 8006b06:	4b12      	ldr	r3, [pc, #72]	; (8006b50 <__smakebuf_r+0xdc>)
 8006b08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d1d0      	bne.n	8006ab0 <__smakebuf_r+0x3c>
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006b14:	4333      	orrs	r3, r6
 8006b16:	81a3      	strh	r3, [r4, #12]
 8006b18:	64e6      	str	r6, [r4, #76]	; 0x4c
 8006b1a:	e7dc      	b.n	8006ad6 <__smakebuf_r+0x62>
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b22:	f7f9 fee7 	bl	80008f4 <_isatty_r>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d0e4      	beq.n	8006af4 <__smakebuf_r+0x80>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f043 0301 	orr.w	r3, r3, #1
 8006b30:	81a3      	strh	r3, [r4, #12]
 8006b32:	e7df      	b.n	8006af4 <__smakebuf_r+0x80>
 8006b34:	059a      	lsls	r2, r3, #22
 8006b36:	d4dd      	bmi.n	8006af4 <__smakebuf_r+0x80>
 8006b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b3c:	f043 0302 	orr.w	r3, r3, #2
 8006b40:	2101      	movs	r1, #1
 8006b42:	81a3      	strh	r3, [r4, #12]
 8006b44:	6022      	str	r2, [r4, #0]
 8006b46:	6122      	str	r2, [r4, #16]
 8006b48:	6161      	str	r1, [r4, #20]
 8006b4a:	e7d3      	b.n	8006af4 <__smakebuf_r+0x80>
 8006b4c:	0800558d 	.word	0x0800558d
 8006b50:	080067b9 	.word	0x080067b9

08006b54 <_init>:
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b56:	bf00      	nop
 8006b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5a:	bc08      	pop	{r3}
 8006b5c:	469e      	mov	lr, r3
 8006b5e:	4770      	bx	lr

08006b60 <_fini>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	bf00      	nop
 8006b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b66:	bc08      	pop	{r3}
 8006b68:	469e      	mov	lr, r3
 8006b6a:	4770      	bx	lr
